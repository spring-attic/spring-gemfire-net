<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Data</name>
    </assembly>
    <members>
        <member name="T:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor">
            <summary>
            Spring AOP exception translation aspect for use at Repository or DAO layer level.
            Translates native persistence exceptions into Spring's DataAccessException hierarchy,
            based on a given PersistenceExceptionTranslator.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack  (.NET)</author>
        </member>
        <member name="M:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor.#ctor(Spring.Dao.Support.IPersistenceExceptionTranslator,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor"/> class.
            </summary>
            <param name="persistenceExceptionTranslator">The persistence exception translator to use.</param>
            <param name="repositoryAttributeType">Type of the repository attribute to check for.</param>
        </member>
        <member name="M:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor.#ctor(Spring.Objects.Factory.IListableObjectFactory,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor"/> class.
            </summary>
            <param name="objectFactory">The object factory to obtain all IPersistenceExceptionTranslators from.</param>
            <param name="repositoryAttributeType">Type of the repository attribute to check for.</param>
        </member>
        <member name="P:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor.Advice">
            <summary>
            Return the advice part of this aspect.
            </summary>
            <value></value>
            <remarks>
            	<p>
            An advice may be an interceptor, a throws advice, before advice,
            introduction etc.
            </p>
            </remarks>
            <returns>
            The advice that should apply if the pointcut matches.
            </returns>
        </member>
        <member name="P:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
            <value></value>
        </member>
        <member name="T:Spring.Dao.Attributes.PersistenceExceptionTranslationPostProcessor">
            <summary>
            Object post-processor that automatically applies persistence exception
            translation to any bean that carries the <see cref="T:Spring.Stereotype.RepositoryAttribute"/>
            attribute, adding a corresponding <see cref="T:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor"/>
            to the exposed proxy (either an existing AOP proxy or a newly generated
            proxy that implements all of the target's interfaces).
            </summary>
            <remarks>
            <para>Translates native resource exceptions to Spring's <see cref="T:Spring.Dao.DataAccessException"/>
            hierarchy. Autodetects object that implement the <see cref="T:Spring.Dao.Support.IPersistenceExceptionTranslator"/>
            interface, which are subsequently asked to translate candidate exceptions.
            </para>
            <para>All of Spring's applicable resource factories implement the 
            <code>IPersistenceExceptionTranslator</code> interface out of the box.
            As a consequence, all that is usually needed to enable automatic exception
            translation is marking all affected objects (such as DAOs) with the
            <code>Repository</code> annotation, along with defining this post-processor
            in the application context.
            </para>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <seealso cref="T:Spring.Dao.Attributes.PersistenceExceptionTranslationAdvisor"/>
            <seealso cref="T:Spring.Stereotype.RepositoryAttribute"/>
            <seealso cref="T:Spring.Dao.DataAccessException"/>
            <seealso cref="T:Spring.Dao.Support.IPersistenceExceptionTranslator"/>
        </member>
        <member name="M:Spring.Dao.Attributes.PersistenceExceptionTranslationPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Just return the passed in object instance
            </summary>
            <param name="instance">The new object instance.</param>
            <param name="name">The name of the object.</param>
            <returns>
            The passed in object instance
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Dao.Attributes.PersistenceExceptionTranslationPostProcessor.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Add PersistenceExceptionTranslationAdvice to candidate object if it is a match.
            Create AOP proxy if necessary or add advice to existing advice chain.
            </summary>
            <param name="instance">The new object instance.</param>
            <param name="objectName">The name of the object.</param>
            <returns>
            The object instance to use, wrapped with either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="P:Spring.Dao.Attributes.PersistenceExceptionTranslationPostProcessor.RepositoryAttributeType">
            <summary>
            Sets the type of the repository attribute.  The default required attribute type is the 
            <see cref="T:Spring.Stereotype.RepositoryAttribute"/> attirbute.  This setter property exists so that developers
            can provide their own (non-Spring-specific) attribute type to indicate that a class has a 
            repository role.
            </summary>
            <value>The desitred type of the repository attribute.</value>
        </member>
        <member name="P:Spring.Dao.Attributes.PersistenceExceptionTranslationPostProcessor.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
        </member>
        <member name="T:Spring.Dao.Support.Generic.DataAccessUtils">
            <summary>
            Miscellaneous utility methods for DAO implementations.
            Useful with any data access technology.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.Support.Generic.DataAccessUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.Support.Generic.DataAccessUtils"/> class.
            </summary>
        </member>
        <member name="T:Spring.Dao.Support.ChainedPersistenceExceptionTranslator">
            <summary>
            Implementation of PersistenceExceptionTranslator that supports chaining,
            allowing the addition of PersistenceExceptionTranslator instances in order.
            Returns <code>non-null</code> on the first (if any) match.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Dao.Support.IPersistenceExceptionTranslator">
            <summary>
            Interface implemented by Spring integrations with data access technologies
            that throw exceptions.
            </summary>
            <remarks>
            This allows consistent usage of combined exception translation functionality,
            without forcing a single translator to understand every single possible type
            of exception.
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.Support.IPersistenceExceptionTranslator.TranslateExceptionIfPossible(System.Exception)">
            <summary>
            Translate the given exception thrown by a persistence framework to a
            corresponding exception from Spring's generic DataAccessException hierarchy,
            if possible.
            </summary>
            <remarks>
            <para>
            Do not translate exceptions that are not understand by this translator:
            for example, if coming from another persistence framework, or resulting
            from user code and unrelated to persistence.
            </para>
            <para>
            Of particular importance is the correct translation to <see cref="T:Spring.Dao.DataIntegrityViolationException"/>
            for example on constraint violation.  Implementations may use Spring ADO.NET Framework's 
            sophisticated exception translation to provide further information in the event of SQLException as a root cause.
            </para>
            </remarks>
            <param name="ex">The exception thrown.</param>
            <returns>the corresponding DataAccessException (or <code>null</code> if the
            exception could not be translated, as in this case it may result from
            user code rather than an actual persistence problem)
            </returns>
            <seealso cref="T:Spring.Dao.DataIntegrityViolationException"/>
            <seealso cref="T:Spring.Data.Support.ErrorCodeExceptionTranslator"/>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.Support.ChainedPersistenceExceptionTranslator.AddTranslator(Spring.Dao.Support.IPersistenceExceptionTranslator)">
            <summary>
            Adds the translator to the translator list.
            </summary>
            <param name="translator">The translator.</param>
        </member>
        <member name="M:Spring.Dao.Support.ChainedPersistenceExceptionTranslator.TranslateExceptionIfPossible(System.Exception)">
            <summary>
            Translate the given exception thrown by a persistence framework to a
            corresponding exception from Spring's generic DataAccessException hierarchy,
            if possible.
            </summary>
            <param name="ex">The exception thrown.</param>
            <returns>
            the corresponding DataAccessException (or <code>null</code> if the
            exception could not be translated, as in this case it may result from
            user code rather than an actual persistence problem)
            </returns>
            <remarks>
            	<para>
            Do not translate exceptions that are not understand by this translator:
            for example, if coming from another persistence framework, or resulting
            from user code and unrelated to persistence.
            </para>
            	<para>
            Of particular importance is the correct translation to <see cref="T:Spring.Dao.DataIntegrityViolationException"/>
            for example on constraint violation.  Implementations may use Spring ADO.NET Framework's
            sophisticated exception translation to provide further information in the event of SQLException as a root cause.
            </para>
            </remarks>
            <seealso cref="T:Spring.Dao.DataIntegrityViolationException"/>
            <seealso cref="T:Spring.Data.Support.ErrorCodeExceptionTranslator"/>
        </member>
        <member name="P:Spring.Dao.Support.ChainedPersistenceExceptionTranslator.Translators">
            <summary>
            Gets all registered IPersistenceExceptionTranslator as an array.
            </summary>
            <value>The IPersistenceExceptionTranslators.</value>
        </member>
        <member name="T:Spring.Dao.Support.DaoSupport">
            <summary>
            Generic base class for DAOs, defining template methods for DAO initialization. 
            </summary>
            <remarks>
            Extended by Spring's specific DAO support classes, such as:
             AdoDaoSupport, HibernateDaoSupport, etc.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Dao.Support.DaoSupport.log">
            <summary>
            The shared <see cref="T:Common.Logging.ILog"/> instance for this class (and derived classes). 
            </summary>
        </member>
        <member name="M:Spring.Dao.Support.DaoSupport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.Support.DaoSupport"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.Support.DaoSupport.CheckDaoConfig">
            <summary>
            Abstract subclasses must override this to check their configuration.
            </summary>
            <remarks>
            <p>Implementors should be marked as <code>sealed</code>, to make it clear that
            concrete subclasses are not supposed to override this template method themselves.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Dao.Support.DaoSupport.InitDao">
            <summary>        
            Concrete subclasses can override this for custom initialization behavior.
            </summary>
            <remarks>
            Gets called after population of this instance's object properties.
            Exception thrown if InitDao fails will be rethrown as
            a ObjectInitializationException.
            </remarks>
        </member>
        <member name="T:Spring.Dao.Support.DataAccessUtils">
            <summary>
            Miscellaneous utility methods for DAO implementations.
            Useful with any data access technology.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.Support.DataAccessUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.Support.DataAccessUtils"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.Support.DataAccessUtils.TranslateIfNecessary(System.Exception,Spring.Dao.Support.IPersistenceExceptionTranslator)">
            <summary>
            Return a translated exception if this is appropriate, or null if the exception could
            not be translated. 
            </summary>
            <param name="rawException">The raw exception we may wish to translate.</param>
            <param name="pet">The PersistenceExceptionTranslator to use to perform the translation.</param>
            <returns>A translated exception if translation is possible, or or null if the exception could
            not be translated.</returns>
        </member>
        <member name="T:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor">
            <summary>
            AOP MethodInterceptor that provides persistence exception translation
            based on a given PersistenceExceptionTranslator.
            </summary>
            <remarks>
            Delegates to the given <see cref="T:Spring.Dao.Support.IPersistenceExceptionTranslator"/> to translate
            an Exception thrown into Spring's DataAccessException hierarchy
            (if appropriate).
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor"/> class.
            Needs to be configured with a PersistenceExceptionTranslator afterwards.
            </summary>
        </member>
        <member name="M:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor.#ctor(Spring.Dao.Support.IPersistenceExceptionTranslator)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor"/> class for the
            given IPersistenceExceptionTranslator
            </summary>
            <param name="persistenceExceptionTranslator">The persistence exception translator to use.</param>
        </member>
        <member name="M:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor.#ctor(Spring.Objects.Factory.IListableObjectFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor"/> class, autodetecting
            IPersistenceExceptionTranslators in the given object factory.
            </summary>
            <param name="objectFactory">The object factory to obtain all IPersistenceExceptionTranslators from.</param>
        </member>
        <member name="M:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor.AfterPropertiesSet">
            <summary>
            Ensures that the property PersistenceExceptionTranslator has been set.
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as the failure to set a
            required property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor.DetectPersistenceExceptionTranslators(Spring.Objects.Factory.IListableObjectFactory)">
            <summary>
            Detects the petsistence exception translators in the given object factory.
            </summary>
            <param name="objectFactory">The object factory for obtaining all IPersistenceExceptionTranslators.</param>
            <returns>A chained IPersistenceExceptionTranslator, combining all PersistenceExceptionTranslators found in the factory
            </returns>
            <seealso cref="T:Spring.Dao.Support.ChainedPersistenceExceptionTranslator"/>
        </member>
        <member name="M:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Return a translated exception if this is appropriate, otherwise rethrow the original exception.
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="P:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor.PersistenceExceptionTranslator">
            <summary>
            Sets the persistence exception translator.  The default is to autodetect all IPersistenceExceptionTranslators
            in the containing object factory, using them in a chain.       
            </summary>
            <value>The persistence exception translator.</value>
        </member>
        <member name="P:Spring.Dao.Support.PersistenceExceptionTranslationInterceptor.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            	<p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="T:Spring.Dao.CannotAcquireLockException">
            <summary> 
            Exception thrown on failure to aquire a lock during an update i.e a select for
            update statement.
            </summary>
            <remarks>
            <p>
            This exception will be thrown either by O/R mapping tools or by custom DAO
            implementations.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Dao.PessimisticLockingFailureException">
            <summary> 
            Exception thrown on a pessimistic locking violation.
            </summary>
            <remarks>
            <para>Serves as a superclass for more specific exceptions, like 
            CannotAcquireLockException and DeadlockLoserDataAccessException
            </para>
            <para>
            This exception will be thrown either by O/R mapping tools or by custom DAO
            implementations.
            </para>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Dao.ConcurrencyFailureException">
            <summary> 
            Exception thrown on concurrency failure. This exception should be
            sublassed to indicate the type of failure - optimistic locking,
            failure to acquire lock, etc.
            </summary>
            <remarks>
            <p>
            This exception will be thrown either by O/R mapping tools or by custom DAO
            implementations.
            </p>
            </remarks>
            <author>Thomas Risberg</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Dao.TransientDataAccessException">
            <summary> 
            Root of the hierarchy of data access exception that are considered transient - 
            where a previously failed operation might be able to succeed when the operation
            is retried without any intervention by application-level functionality.
            </summary>
            <author>Thomas Risberg</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Dao.DataAccessException">
            <summary>
            Root of the hierarchy of data access exceptions
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.DataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.DataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.DataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.DataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.TransientDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TransientDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.TransientDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TransientDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.TransientDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TransientDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.TransientDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TransientDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.ConcurrencyFailureException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ConcurrencyFailureException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.ConcurrencyFailureException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ConcurrencyFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.ConcurrencyFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ConcurrencyFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.ConcurrencyFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ConcurrencyFailureException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.PessimisticLockingFailureException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.PessimisticLockingFailureException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.PessimisticLockingFailureException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.PessimisticLockingFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.PessimisticLockingFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.PessimisticLockingFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.PessimisticLockingFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotAcquireLockException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.CannotAcquireLockException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotAcquireLockException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.CannotAcquireLockException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotAcquireLockException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.CannotAcquireLockException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotAcquireLockException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.CannotAcquireLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotAcquireLockException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.CannotSerializeTransactionException">
            <summary> 
            Exception thrown on failure to complete a transaction in serialized mode due to
            update conflicts.
            </summary>
            <remarks>
            <p>
            This exception will be thrown either by O/R mapping tools or by custom DAO
            implementations.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.CannotSerializeTransactionException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotSerializeTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.CannotSerializeTransactionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotSerializeTransactionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.CannotSerializeTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotSerializeTransactionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.CannotSerializeTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CannotSerializeTransactionException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.CleanupFailureDataAccessException">
            <summary> 
            Exception thrown when we couldn't cleanup after a data access operation,
            but the actual operation went OK.
            </summary>
            <remarks>
            <p>
            For example, this exception or a subclass might be thrown if an ADO.NET
            connection couldn't be closed after it had been used successfully.
            </p>
            <p>
            Note that data access code might perform resource cleanup in a
            finally block and therefore log cleanup failure rather than rethrow it,
            to keep the original data access exception, if any.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Dao.NonTransientDataAccessException">
            <summary> 
            Root of the hierarchy of data access exception that are considered non-transient - 
            where a retry of the same operation would fail unless the cause of the Exception is
            corrected.
            </summary>
            <author>Thomas Risberg</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.NonTransientDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.NonTransientDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.NonTransientDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.NonTransientDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.NonTransientDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.NonTransientDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.NonTransientDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.NonTransientDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.CleanupFailureDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CleanupFailureDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.CleanupFailureDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CleanupFailureDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.CleanupFailureDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CleanupFailureDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.CleanupFailureDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CleanupFailureDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.DataAccessResourceFailureException">
            <summary> 
            Data access exception thrown when a resource fails completely:
            for example, if we can't connect to a database using ADO.NET.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.DataAccessResourceFailureException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataAccessResourceFailureException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.DataAccessResourceFailureException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataAccessResourceFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.DataAccessResourceFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataAccessResourceFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.DataAccessResourceFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataAccessResourceFailureException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.DataIntegrityViolationException">
            <summary> 
            Exception thrown when an attempt to insert or update data
            results in violation of an integrity constraint.
            </summary>
            <remarks>
            <p>
            Note that this is not purely a relational concept; unique primary keys are
            required by most database types.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.DataIntegrityViolationException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataIntegrityViolationException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.DataIntegrityViolationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataIntegrityViolationException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.DataIntegrityViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataIntegrityViolationException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.DataIntegrityViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataIntegrityViolationException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.DataRetrievalFailureException">
            <summary> 
            Exception thrown if certain expected data could not be retrieved, e.g.
            when looking up specific data via a known identifier.
            </summary>
            <remarks>
            <p>
            This exception will be thrown either by O/R mapping tools or by custom DAO
            implementations.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.DataRetrievalFailureException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataRetrievalFailureException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.DataRetrievalFailureException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataRetrievalFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.DataRetrievalFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataRetrievalFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.DataRetrievalFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DataRetrievalFailureException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.DeadlockLoserDataAccessException">
            <summary> 
            Generic exception thrown when the current process was
            a deadlock loser, and its transaction rolled back.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.DeadlockLoserDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DeadlockLoserDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.DeadlockLoserDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DeadlockLoserDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.DeadlockLoserDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DeadlockLoserDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.DeadlockLoserDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.DeadlockLoserDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.EmptyResultDataAccessException">
            <summary>
            Data access exception thrown when a result was not of the expected size,
            for example when expecting a single row but getting 0 or more than 1 rows.
            </summary>
            <author>Mark Pollack (.NET)</author>
            <author>Juergen Hoeller</author>
        </member>
        <member name="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            <summary> 
            Data access exception thrown when a result was not of the expected size,
            for example when expecting a single row but getting 0 or more than 1 rows.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Dao.InvalidDataAccessApiUsageException">
            <summary> 
            Exception thrown on incorrect usage of the API, such as failing to "compile" a query
            object that needed compilation before execution.
            </summary>
            <remarks>
            <p>
            This represents a problem in our data access framework, not the underlying data access
            infrastructure.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.InvalidDataAccessApiUsageException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.InvalidDataAccessApiUsageException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.InvalidDataAccessApiUsageException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.InvalidDataAccessApiUsageException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.InvalidDataAccessApiUsageException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.InvalidDataAccessApiUsageException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.InvalidDataAccessApiUsageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.InvalidDataAccessApiUsageException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.IncorrectResultSizeDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.IncorrectResultSizeDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.IncorrectResultSizeDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.IncorrectResultSizeDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.IncorrectResultSizeDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CleanupFailureDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.IncorrectResultSizeDataAccessException.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CleanupFailureDataAccessException"/> class.
            </summary>
            <param name="expectedSize">The expected result size.</param>
            <param name="actualSize">The actual result size (or -1 if unknown).</param>
        </member>
        <member name="M:Spring.Dao.IncorrectResultSizeDataAccessException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CleanupFailureDataAccessException"/> class.
            </summary>&gt;
            <param name="message">
            A message about the exception.
            </param>
            <param name="expectedSize">The expected result size.</param>
            <param name="actualSize">The actual result size (or -1 if unknown).</param>
        </member>
        <member name="M:Spring.Dao.IncorrectResultSizeDataAccessException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.IncorrectResultSizeDataAccessException"/> class.
            </summary>
            <param name="message">A message about the exception</param>
            <param name="expectedSize">The expected result size.</param>
        </member>
        <member name="M:Spring.Dao.IncorrectResultSizeDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.CleanupFailureDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.IncorrectResultSizeDataAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override of <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            to allow for private serialization.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Dao.IncorrectResultSizeDataAccessException.ExpectedSize">
            <summary>Return the expected result size.</summary>
        </member>
        <member name="P:Spring.Dao.IncorrectResultSizeDataAccessException.ActualSize">
            <summary>Return the actual result size (or -1 if unknown).</summary>
        </member>
        <member name="M:Spring.Dao.EmptyResultDataAccessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.EmptyResultDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.EmptyResultDataAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.EmptyResultDataAccessException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Dao.EmptyResultDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.EmptyResultDataAccessException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spring.Dao.EmptyResultDataAccessException.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.EmptyResultDataAccessException"/> class.
            </summary>
            <param name="expectedSize">The expected size.</param>
        </member>
        <member name="M:Spring.Dao.EmptyResultDataAccessException.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.EmptyResultDataAccessException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="expectedSize">The expected size.</param>
        </member>
        <member name="M:Spring.Dao.EmptyResultDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.EmptyResultDataAccessException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null"/> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Spring.Dao.IncorrectUpdateSemanticsDataAccessException">
            <summary> 
            Data access exception thrown when something unintended appears to have
            happened with an update, but the transaction hasn't already been rolled back.
            </summary>
            <remarks>
            <p>
            Thrown, for example, when we wanted to update 1 row in an RDBMS but actually
            updated 3.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Dao.InvalidDataAccessResourceUsageException">
            <summary> 
            Root for exceptions thrown when we use a data access resource incorrectly.
            </summary>
            <remarks>
            <p>
            Thrown for example on specifying bad SQL when using a RDBMS.
            Resource-specific subclasses will probably be supplied by data access packages.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.InvalidDataAccessResourceUsageException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.InvalidDataAccessResourceUsageException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.InvalidDataAccessResourceUsageException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.InvalidDataAccessResourceUsageException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.InvalidDataAccessResourceUsageException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.InvalidDataAccessResourceUsageException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.InvalidDataAccessResourceUsageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.InvalidDataAccessResourceUsageException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.IncorrectUpdateSemanticsDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.IncorrectUpdateSemanticsDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.IncorrectUpdateSemanticsDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.IncorrectUpdateSemanticsDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.IncorrectUpdateSemanticsDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.IncorrectUpdateSemanticsDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.IncorrectUpdateSemanticsDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.IncorrectUpdateSemanticsDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Dao.IncorrectUpdateSemanticsDataAccessException.DataWasUpdated">
            <summary>Return whether or not data was updated.</summary>
            <returns>
            <b>True</b> if data was updated (as opposed to being incorrectly
            updated). If this property returns false, there's nothing to roll back.
            </returns>
        </member>
        <member name="T:Spring.Dao.NonTransientDataAccessResourceException">
            <summary> 
            Data access exception thrown when a resource fails completely and the failure is permanent.
            </summary>
            <author>Thomas Risberg</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.NonTransientDataAccessResourceException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.NonTransientDataAccessResourceException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.NonTransientDataAccessResourceException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.NonTransientDataAccessResourceException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.NonTransientDataAccessResourceException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.NonTransientDataAccessResourceException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.NonTransientDataAccessResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.NonTransientDataAccessResourceException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.ObjectOptimisticLockingFailureException">
            <summary>
            Exception thrown on an optimistic locking violation for a mapped object.
             Provides information about the persistent class and the identifier. 
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Dao.OptimisticLockingFailureException">
            <summary> 
            Exception thrown on an optimistic locking violation.
            </summary>
            <remarks>
            <p>
            This exception will be thrown either by O/R mapping tools or by custom DAO
            implementations.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.OptimisticLockingFailureException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.OptimisticLockingFailureException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.OptimisticLockingFailureException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.OptimisticLockingFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.OptimisticLockingFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.OptimisticLockingFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.OptimisticLockingFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.OptimisticLockingFailureException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.ObjectOptimisticLockingFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.ObjectOptimisticLockingFailureException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.ObjectOptimisticLockingFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.ObjectOptimisticLockingFailureException"/> class.
            </summary>
            <param name="message">A message about the exception..</param>
        </member>
        <member name="M:Spring.Dao.ObjectOptimisticLockingFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ObjectRetrievalFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception from the underlying data access API
            </param>        
        </member>
        <member name="M:Spring.Dao.ObjectOptimisticLockingFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ObjectOptimisticLockingFailureException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.ObjectOptimisticLockingFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
        </member>
        <member name="T:Spring.Dao.ObjectRetrievalFailureException">
            <summary>
            Exception thrown if a mapped object could not be retrieved via its identifier.
            Provides information about the persistent class and the identifier.  
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.ObjectRetrievalFailureException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ObjectRetrievalFailureException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.ObjectRetrievalFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Dao.ObjectRetrievalFailureException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Spring.Dao.ObjectRetrievalFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ObjectRetrievalFailureException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception from the underlying data access API
            </param>        
        </member>
        <member name="M:Spring.Dao.ObjectRetrievalFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.ObjectRetrievalFailureException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Dao.ObjectRetrievalFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
        </member>
        <member name="T:Spring.Dao.PermissionDeniedDataAccessException">
            <summary> 
            Exception thrown when the underlyingresource denied a permission to 
            access a specific element, such as a specific database table.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.PermissionDeniedDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.PermissionDeniedDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.PermissionDeniedDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.PermissionDeniedDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.PermissionDeniedDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.PermissionDeniedDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.PermissionDeniedDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.PermissionDeniedDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.TransientDataAccessResourceException">
            <summary> 
            RDta access exception thrown when a resource fails temporarily and the operation can be
            retried.
            </summary>
            <author>Thomas Risberg</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Dao.TransientDataAccessResourceException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TransientDataAccessResourceException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.TransientDataAccessResourceException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TransientDataAccessResourceException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.TransientDataAccessResourceException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TransientDataAccessResourceException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.TransientDataAccessResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TransientDataAccessResourceException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.TypeMismatchDataAccessException">
            <summary> 
            Exception thrown on mismatch between CLS type and database type:
            for example on an attempt to set an object of the wrong type
            in an RDBMS column.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.TypeMismatchDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TypeMismatchDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.TypeMismatchDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TypeMismatchDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.TypeMismatchDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TypeMismatchDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.TypeMismatchDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.TypeMismatchDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Dao.UncategorizedDataAccessException">
            <summary> 
            Normal superclass when we can't distinguish anything more specific
            than "something went wrong with the underlying resource": for example,
            a SQLException from Sql Server that we can't pinpoint more precisely.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Dao.UncategorizedDataAccessException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.UncategorizedDataAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Dao.UncategorizedDataAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.UncategorizedDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Dao.UncategorizedDataAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.UncategorizedDataAccessException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception (from the underlying data access API, such as ADO.NET).
            </param>
        </member>
        <member name="M:Spring.Dao.UncategorizedDataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Dao.UncategorizedDataAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Data.Common.DbMetadata">
            <summary>
            Provides database metdata information.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Common.IDbMetadata">
            <summary>
            Provides minimal database metadata information to support the
            functionality in Spring.NET ADO.NET Framework.
            </summary>
            
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ProductName">
            <summary>
            Gets a descriptive name of the product.
            </summary>
            <example>Example: Microsoft SQL Server, provider V2.0.0.0 in framework .NET V2.0</example>
            <value>The name of the product.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ConnectionType">
            <summary>
            Gets the type of the connection.  The fully qualified type name is given since some providers,
            notably for SqlServerCe, do not use the same namespace for all data access types.
            </summary>
            <example>Example: System.Data.SqlClient.SqlCommand, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the connection.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
            <example>Example: System.Data.SqlClient.SqlCommand, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the command.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
            <example>Example: System.Data.SqlClient.SqlParameter, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the parameter.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.DataAdapterType">
            <summary>
            Gets the type of the data adapter.
            </summary>
            <example>Example: System.Data.SqlClient.SqlDataAdapter, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the data adapter.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.CommandBuilderType">
            <summary>
            Gets the type of the command builder.
            </summary>
            <example>Example: System.Data.SqlClient.SqlCommandBuilder, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the command builder.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <example>Example: System.Data.SqlClient.SqlException, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ErrorCodeExceptionExpression">
            <summary>
            Gets the error code exception expression.
            </summary>
            <example>Example Errors[0].Number.ToString() for Sql Server </example>
            <value>The error code exception expression.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.CommandBuilderDeriveParametersMethod">
            <summary>
            Gets the command builder derive parameters method.
            </summary>
            <remarks>If the value 'not supported' is specified then this method will throw an ArgumentException</remarks>
            <example>Example: DeriveParameters</example>
            <value>The command builder derive parameters method.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ParameterNamePrefix">
            <summary>
            Provide the prefix used to indentify named parameters in SQL text.
            </summary>
            <example>@ for Sql Server</example>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.UseParameterNamePrefixInParameterCollection">
            <summary>
            Does the driver require the use of the parameter prefix when
            specifying the name of the parameter in the Command's
            Parameter collection.  
            </summary>
            <remarks>If true, then commamd.Parameters["@parameterName"] is
            used, otherwise, command.Parameters["parameterName"].
            </remarks>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.UseParameterPrefixInSql">
            <summary>
            Gets a value indicating whether the Provider requires
            the use of a named prefix in the SQL string. 
            </summary>
            <remarks>
            The OLE DB/ODBC .NET Provider does not support named parameters for 
            passing parameters to an SQL Statement or a stored procedure called
            by an IDbCommand when CommandType is set to Text.
            </remarks>
            <value>
            	<c>true</c> if use parameter prefix in SQL; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.BindByName">
            <summary>
            For providers that allow you to choose between binding parameters
            to a command by name (true) or by position (false).
            </summary>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ParameterDbType">
            <summary>
            Gets the type of the parameter db.
            </summary>
            <example>Example: System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the parameter db.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ParameterDbTypeProperty">
            <summary>
            Gets the parameter db type property.
            </summary>
            <example>Example: SqlDbType for SqlServer</example>
            <value>The parameter db type property.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ParameterIsNullableProperty">
            <summary>
            Gets the parameter is nullable property.
            </summary>
            <example>Example: IsNullable for Sql Server</example>
            <value>The parameter is nullable property.</value>
        </member>
        <member name="P:Spring.Data.Common.IDbMetadata.ErrorCodes">
            <summary>
            Gets or sets the error codes.
            </summary>
            <remarks>The collection of error codes to map error code integer values to Spring's DAO exception hierarchy</remarks>
            <value>The error codes.</value>
        </member>
        <member name="M:Spring.Data.Common.DbMetadata.#ctor(System.String,System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.String,System.Type,System.String,System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.DbMetadata"/> class.
            </summary>
            <param name="productName">Name of the product.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="connectionType">Type of the connection.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="dataAdapterType">Type of the data adapter.</param>
            <param name="commandBuilderType">Type of the command builder.</param>
            <param name="commandBuilderDeriveParametersMethod">The command builder derive parameters method.</param>
            <param name="parameterDbType">Type of the parameter db.</param>
            <param name="parameterDbTypeProperty">The parameter db type property.</param>
            <param name="parameterIsNullableProperty">The parameter is nullable property.</param>
            <param name="parameterNamePrefix">The parameter name prefix.</param>
            <param name="exceptionType">Type of the exception.</param>
            <param name="useParameterNamePrefixInParameterCollection">if set to <c>true</c> [use parameter name prefix in parameter collection].</param>
            <param name="useParameterPrefixInSql">if set to <c>true</c> [use parameter prefix in SQL].</param>
            <param name="bindByName">if set to <c>true</c> [bind by name].</param>
            <param name="errorCodeExceptionExpression">The error code exception expression.</param>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.UseParamNamePrefixInParameterCollection">
            <summary>
            Gets a value indicating whether to use param name prefix in parameter collection.
            </summary>
            <value>
            	<c>true</c> if should use param name prefix in parameter collection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <example>Example: System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ProductName">
            <summary>
            Gets a descriptive name of the product.
            </summary>
            <example>Example: Microsoft SQL Server, provider V2.0.0.0 in framework .NET V2.0</example>
            <value>The name of the product.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ConnectionType">
            <summary>
            Gets the type of the connection.  The fully qualified type name is given since some providers,
            notably for SqlServerCe, do not use the same namespace for all data access types.
            </summary>
            <example>Example: System.Data.SqlClient.SqlCommand, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the connection.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
            <example>Example: System.Data.SqlClient.SqlCommand, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the command.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
            <example>Example: System.Data.SqlClient.SqlParameter, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the parameter.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.DataAdapterType">
            <summary>
            Gets the type of the data adapter.
            </summary>
            <example>Example: System.Data.SqlClient.SqlDataAdapter, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the data adapter.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.CommandBuilderType">
            <summary>
            Gets the type of the command builder.
            </summary>
            <example>Example: System.Data.SqlClient.SqlCommandBuilder, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the command builder.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.CommandBuilderDeriveParametersMethod">
            <summary>
            Gets the command builder derive parameters method.
            </summary>
            <remarks>If the value 'not supported' is specified then this method will throw an ArgumentException</remarks>
            <example>Example: DeriveParameters</example>
            <value>The command builder derive parameters method.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ParameterNamePrefix">
            <summary>
            Provide the prefix used to indentify named parameters in SQL text.
            </summary>
            <example>@ for Sql Server</example>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <example>Example: System.Data.SqlClient.SqlException, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.UseParameterNamePrefixInParameterCollection">
            <summary>
            Does the driver require the use of the parameter prefix when
            specifying the name of the parameter in the Command's
            Parameter collection.
            </summary>
            <value></value>
            <remarks>If true, then commamd.Parameters["@parameterName"] is
            used, otherwise, command.Parameters["parameterName"].
            </remarks>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.UseParameterPrefixInSql">
            <summary>
            Gets a value indicating whether the Provider requires
            the use of a named prefix in the SQL string.
            </summary>
            <value>
            	<c>true</c> if use parameter prefix in SQL; otherwise, <c>false</c>.
            </value>
            <remarks>
            The OLE DB/ODBC .NET Provider does not support named parameters for
            passing parameters to an SQL Statement or a stored procedure called
            by an IDbCommand when CommandType is set to Text.
            </remarks>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.BindByName">
            <summary>
            For providers that allow you to choose between binding parameters
            to a command by name (true) or by position (false).
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ParameterDbType">
            <summary>
            Gets the type of the parameter db.
            </summary>
            <example>Example: System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</example>
            <value>The type of the parameter db.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ParameterDbTypeProperty">
            <summary>
            Gets the parameter db type property.
            </summary>
            <example>Example: SqlDbType for SqlServer</example>
            <value>The parameter db type property.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ParameterIsNullableProperty">
            <summary>
            Gets the parameter is nullable property.
            </summary>
            <example>Example: IsNullable for Sql Server</example>
            <value>The parameter is nullable property.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ErrorCodes">
            <summary>
            Gets or sets the error codes.
            </summary>
            <remarks>The collection of error codes to map error code integer values to Spring's DAO exception hierarchy</remarks>
            <value>The error codes.</value>
        </member>
        <member name="P:Spring.Data.Common.DbMetadata.ErrorCodeExceptionExpression">
            <summary>
            Gets the error code exception expression.
            </summary>
            <example>Example Errors[0].Number.ToString() for Sql Server </example>
            <value>The error code exception expression.</value>
        </member>
        <member name="T:Spring.Data.Common.DbParameter">
            <summary>
            A parameter class used by <see cref="T:Spring.Data.Common.DbParametersBuilder"/>
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Common.IDbParameter">
            <summary>
            A parameter interface used by <see cref="T:Spring.Data.Common.IDbParametersBuilder"/>
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Common.DbParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.DbParameter"/> class.
            </summary>
            <remarks>
            Sets the SourceVersion to be Default and the ParameterDirection to be Input.
            </remarks>
        </member>
        <member name="T:Spring.Data.Common.DbParameters">
            <summary>
            A more portable means to create a collection of ADO.NET
            parameters.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Common.IDbParameters.Contains(System.String)">
            <summary>
            Determines whether this collection contains the specified parameter name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>
            	<c>true</c> if contains the specified parameter name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Data.Common.IDbParameters.AddParameter(System.Data.IDataParameter)">
            <summary>
            Add an instance of <see cref="T:System.Data.IDbDataParameter"/>.
            </summary>
            <param name="dbParameter"></param>
        </member>
        <member name="M:Spring.Data.Common.IDbParameters.AddParameter(System.String,System.Enum,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Add a parameter specifying the all the individual properties of a
            IDbDataParameter.
            </summary>
            <param name="name"></param>
            <param name="parameterType"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <param name="isNullable"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="sourceColumn"></param>
            <param name="sourceVersion"></param>
            <param name="parameterValue"></param>
            <returns>The newly created parameter</returns>
        </member>
        <member name="M:Spring.Data.Common.IDbParameters.AddParameter(System.String,System.Enum,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <param name="parameterType"></param>
             <param name="direction"></param>
             <param name="isNullable"></param>
             <param name="precision"></param>
             <param name="scale"></param>
             <param name="sourceColumn"></param>
             <param name="sourceVersion"></param>
             <param name="parameterValue"></param>
             <returns>The newly created parameter</returns>
        </member>
        <member name="M:Spring.Data.Common.IDbParameters.Add(System.Object)">
            <summary>
            Adds a value to the parameter collection
            </summary>
            <remarks>This method can not be used with stored procedures for
            providers that require named parameters.  However, it is of
            great convenience for other cases.</remarks>
            <param name="parameterValue">The value of the parameter.</param>
            <returns>Index of added parameter.</returns>
        </member>
        <member name="M:Spring.Data.Common.IDbParameters.AddRange(System.Array)">
            <summary>
            Adds a range of vlaues to the parameter collection.
            </summary>
            <remarks>This method can not be used with stored procedures for
            providers that require named parameters.  However, it is of
            great convenience for other cases.</remarks>
            <param name="values"></param>
        </member>
        <member name="P:Spring.Data.Common.IDbParameters.Item(System.String)">
            <summary>
            Gets the underlying standard ADO.NET <see cref="T:System.Data.IDbDataParameter"/> for the specified parameter name.
            </summary>
        </member>
        <member name="P:Spring.Data.Common.IDbParameters.Item(System.Int32)">
            <summary>
            Gets the underlying standard ADO.NET <see cref="T:System.Data.IDbDataParameter"/> for the specified index.
            </summary>
        </member>
        <member name="P:Spring.Data.Common.IDbParameters.DataParameterCollection">
            <summary>
            Returns the underlying standard ADO.NET parameters collection.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.DbParameters.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.DbParameters"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Common.DbParametersBuilder">
            <summary>
            Assists in creating a collection of parameters by keeping track of all
            IDbParameters its creates.  After creating a number of parameters ask for the collection
            with the GetParameters methods.
            </summary>
            <remarks>This builder is stateful, you must create a new one for each collection
            of parameters you would like to create.</remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Common.IDbParametersBuilder">
            <summary>
            A builder to create a collection of ADO.NET parameters.
            </summary>
            <remarks>The chaining of IDbParameter methods does the 
            building of the parameter details while the builder class
            itself keeps track of the collection.</remarks>
            
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Common.IDbParametersBuilder.Create">
            <summary>
            Creates a IDbParameter object and adds it to an internal collection for
            later retrieval via the GetParameters method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.Common.IDbParametersBuilder.GetParameters">
            <summary>
            Gets all the parameters created and configured via the Create method.
            </summary>
            <returns>An instance of IDbParameters</returns>
        </member>
        <member name="F:Spring.Data.Common.DbParametersBuilder.log">
            <summary>
            The shared log instance for this class (and derived classes). 
            </summary>
        </member>
        <member name="M:Spring.Data.Common.DbParametersBuilder.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.DbParametersBuilder"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Common.DbProvider">
            <summary>
            Implemenation of of DbProvider that uses metadata to create provider specific ADO.NET objects.
            </summary>
        </member>
        <member name="T:Spring.Data.Common.IDbProvider">
            <summary>
            Factory interface to create provider specific ADO.NET objects.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.CreateCommand">
            <summary>
            Returns a new command object for executing SQL statments/Stored Procedures
            against the database.
            </summary>
            <returns>An new <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.CreateCommandBuilder">
            <summary>
            Returns a new instance of the providers CommandBuilder class.
            </summary>
            <remarks>In .NET 1.1 there was no common base class or interface
            for command builders, hence the return signature is object to
            be portable (but more loosely typed) across .NET 1.1/2.0</remarks>
            <returns>A new Command Builder</returns>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.CreateConnection">
            <summary>
            Returns a new connection object to communicate with the database.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.CreateDataAdapter">
            <summary>
            Returns a new adapter objects for use with offline DataSets.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbDataAdapter"/></returns>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.CreateParameter">
            <summary>
            Returns a new parameter object for binding values to parameter
            placeholders in SQL statements or Stored Procedure variables.
            </summary> 
            <returns>A new <see cref="T:System.Data.IDbDataParameter"/></returns>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.CreateParameterName(System.String)">
            <summary>
            Creates the name of the parameter in the format appropriate to use inside IDbCommand.CommandText.
            </summary>
            <remarks>In most cases this adds the parameter prefix to the name passed into this method.</remarks>
            <param name="name">The unformatted name of the parameter.</param>
            <returns>The parameter name formatted foran IDbCommand.CommandText.</returns>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.CreateParameterNameForCollection(System.String)">
            <summary>
            Creates the name ofthe parameter in the format appropriate for an IDataParameter, i.e. to be
            part of a IDataParameterCollection.
            </summary>
            <param name="name">The unformatted name of the parameter.</param>
            <returns>The parameter name formatted for an IDataParameter</returns>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.ExtractError(System.Exception)">
            <summary>
            Extracts the provider specific error code as a string.
            </summary>
            <param name="e">The data access exception.</param>
            <returns>The provider specific error code</returns>
        </member>
        <member name="M:Spring.Data.Common.IDbProvider.IsDataAccessException(System.Exception)">
            <summary>
            Determines whether the provided exception is in fact related
            to database access.  This can be provider dependent in .NET 1.1 since
            there isn't a common base class for ADO.NET exceptions.
            </summary>
            <param name="e">The exception thrown when performing data access 
            operations.</param>
            <returns>
            	<c>true</c> if is a valid data access exception for the specified 
            exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spring.Data.Common.IDbProvider.DbMetadata">
            <summary>
            Return metadata information about the database provider
            </summary>
        </member>
        <member name="P:Spring.Data.Common.IDbProvider.ConnectionString">
            <summary>
            Connection string used to create connections.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.#ctor(Spring.Data.Common.IDbMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.DbProvider"/> class.
            </summary>
            <param name="dbMetadata">The db metadata.</param>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.CreateCommand">
            <summary>
            Returns a new command object for executing SQL statments/Stored Procedures
            against the database.
            </summary>
            <returns>An new <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.CreateCommandBuilder">
            <summary>
            Returns a new instance of the providers CommandBuilder class.
            </summary>
            <returns>A new Command Builder</returns>
            <remarks>In .NET 1.1 there was no common base class or interface
            for command builders, hence the return signature is object to
            be portable (but more loosely typed) across .NET 1.1/2.0</remarks>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.CreateConnection">
            <summary>
            Returns a new connection object to communicate with the database.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.CreateDataAdapter">
            <summary>
            Returns a new adapter objects for use with offline DataSets.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbDataAdapter"/></returns>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.CreateParameter">
            <summary>
            Returns a new parameter object for binding values to parameter
            placeholders in SQL statements or Stored Procedure variables.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbDataParameter"/></returns>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.CreateParameterName(System.String)">
            <summary>
            Creates the name of the parameter in the format appropriate to use inside IDbCommand.CommandText.
            </summary>
            <param name="name">The unformatted name of the parameter.</param>
            <returns>
            The parameter name formatted foran IDbCommand.CommandText.
            </returns>
            <remarks>In most cases this adds the parameter prefix to the name passed into this method.</remarks>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.CreateParameterNameForCollection(System.String)">
            <summary>
            Creates the name ofthe parameter in the format appropriate for an IDataParameter, i.e. to be
            part of a IDataParameterCollection.
            </summary>
            <param name="name">The unformatted name of the parameter.</param>
            <returns>
            The parameter name formatted for an IDataParameter
            </returns>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.ExtractError(System.Exception)">
            <summary>
            Extracts the provider specific error code as a string.
            </summary>
            <param name="e">The data access exception.</param>
            <returns>The provider specific error code</returns>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.IsDataAccessException(System.Exception)">
            <summary>
            Determines whether the provided exception is in fact related
            to database access.  This can be provider dependent in .NET 1.1 since
            there isn't a common base class for ADO.NET exceptions.
            </summary>
            <param name="e">The exception thrown when performing data access
            operations.</param>
            <returns>
            	<c>true</c> if is a valid data access exception for the specified
            exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Data.Common.DbProvider.IsDataAccessExceptionBCL11(System.Exception)">
            <summary>
            Determines whether is data access exception in .NET 1.1 for the specified exception.
            </summary>
            <param name="e">The candidate exception.</param>
            <returns>
            	<c>true</c> if is data access exception in .NET 1.1 for the specified exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spring.Data.Common.DbProvider.DbMetadata">
            <summary>
            Return metadata information about the database provider
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Data.Common.DbProvider.ConnectionString">
            <summary>
            Connection string used to create connections.
            </summary>
            <value></value>
        </member>
        <member name="T:Spring.Data.Common.DbProviderConfigurer">
            <summary>
             
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Data.Common.DbProviderConfigurer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.DbProviderConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its
            standard initialization.
            </summary>
            <param name="factory">The object factory used by the application context.</param>
            <remarks>
            	<p>
            All object definitions will have been loaded, but no objects will have
            been instantiated yet. This allows for overriding or adding properties
            even to eager-initializing objects.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="P:Spring.Data.Common.DbProviderConfigurer.ProviderResource">
            <summary>
            Gets or sets the provider resource which contains additional IDbProvider definitions.
            </summary>
            <value>The provider resource.</value>
        </member>
        <member name="T:Spring.Data.Common.DbProviderFactory">
             <summary>
             Create DbProviders based on configuration information in assembly resource
             dbproviders.xml
            
            
             </summary>
             <remarks>
             TODO: Provide over-ride resource location.
             TODO: Add error codes to provider.
             </remarks>
             <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Data.Common.DbProviderFactory.log">
            <summary>
            The shared log instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Data.Common.DbProviderFactory.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.DbProviderFactory"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.DbProviderFactory.GetDbProvider(System.String)">
            <summary>
            Gets the DbProvider given an identifying name.
            </summary>
            <remarks>
            Familiar names for the .NET 2.0 provider model are supported, i.e.
            System.Data.SqlClient.  Refer to the documentation for a complete
            listing of supported DbProviders and their names.  You may
            also use the method GetDbProviderClasses or obtain the
            underlying IApplicationContext to progammatically obtain information
            about supported providers.
            </remarks>
            <param name="providerInvariantName">Name of the provider invariant.</param>
            <returns></returns>
        </member>
        <member name="P:Spring.Data.Common.DbProviderFactory.ApplicationContext">
            <summary>
            Gets the application context that contains the definitions of the
            various providers.
            </summary>
            <remarks>This method should rarely, if ever, be used in
            application code.  It is used by the framework itself
            to map other data access products abstractions for a 'DbProvider/DataSource'
            onto Spring's model.</remarks>
            <value>The application context.</value>
        </member>
        <member name="T:Spring.Data.Common.DbProviderFactoryObject">
            <summary>
            A <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
            creates instances of the <see cref="T:Spring.Data.Common.IDbProvider"/> class.
            </summary>
            <remarks>Typically used as a convenience for retrieving shared 
            <see cref="T:Spring.Data.Common.IDbProvider"/> in a Spring XML configuration file as compared to
            using explict factory method support.
            </remarks>
        </member>
        <member name="M:Spring.Data.Common.DbProviderFactoryObject.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Data.Common.DbProviderFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.DbProviderFactoryObject.GetObject">
            <summary>
            Return an instance of and IDbProvider as configured by this factory
            managed by this factory.
            </summary>
            <returns>
            The same (singleton) instance of the IDbProvider managed by
            this factory.
            </returns>
            <remarks>
            	<note type="caution">
            If this method is being called in the context of an enclosing IoC container and
            returns <see langword="null"/>, the IoC container will consider this factory
            object as not being fully initialized and throw a corresponding (and most
            probably fatal) exception.
            </note>
            </remarks>
        </member>
        <member name="M:Spring.Data.Common.DbProviderFactoryObject.CreateProviderInstance">
            <summary>
            Create the actual provider instance as specified by this factory's configuration properties.
            </summary>
            <returns>the fully configured provider</returns>
        </member>
        <member name="M:Spring.Data.Common.DbProviderFactoryObject.AfterPropertiesSet">
            <summary>
            Validates that the provider name is specified.
            </summary>
            <remarks>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </remarks>
            <exception cref="T:System.ArgumentException">
            In the event of not setting the ProviderName.
            </exception>
        </member>
        <member name="M:Spring.Data.Common.DbProviderFactoryObject.ValidateProperties">
            <summary>
            Validates the properties.
            </summary>
        </member>
        <member name="P:Spring.Data.Common.DbProviderFactoryObject.Provider">
            <summary>
            Gets or sets the name of the database provider.
            </summary>
            <value>The name of the database provider.</value>
        </member>
        <member name="P:Spring.Data.Common.DbProviderFactoryObject.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Spring.Data.Common.DbProviderFactoryObject.ObjectType">
            <summary>
            Return the type of <see cref="T:Spring.Data.Common.IDbProvider"/>
            </summary>
        </member>
        <member name="P:Spring.Data.Common.DbProviderFactoryObject.IsSingleton">
            <summary>
            Returns true, as the the object managed by this factory is a singleton.
            </summary>
            <value></value>
        </member>
        <member name="T:Spring.Data.Common.DelegatingDbProvider">
            <summary>
            IDbProvider implementation that delegates all calls to a given target
            IDbProvider
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.DelegatingDbProvider"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.DelegatingDbProvider"/> class.
            </summary>
            <param name="targetDbProvider">The target db provider.</param>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.CreateCommand">
            <summary>
            Returns a new command object for executing SQL statments/Stored Procedures
            against the database.
            </summary>
            <returns>An new <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.CreateCommandBuilder">
            <summary>
            Returns a new instance of the providers CommandBuilder class.
            </summary>
            <remarks>In .NET 1.1 there was no common base class or interface
            for command builders, hence the return signature is object to
            be portable (but more loosely typed) across .NET 1.1/2.0</remarks>
            <returns>A new Command Builder</returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.CreateConnection">
            <summary>
            Returns a new connection object to communicate with the database.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.CreateDataAdapter">
            <summary>
            Returns a new adapter objects for use with offline DataSets.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbDataAdapter"/></returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.CreateParameter">
            <summary>
            Returns a new parameter object for binding values to parameter
            placeholders in SQL statements or Stored Procedure variables.
            </summary> 
            <returns>A new <see cref="T:System.Data.IDbDataParameter"/></returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.CreateParameterName(System.String)">
            <summary>
            Creates the name of the parameter in the format appropriate to use inside IDbCommand.CommandText.
            </summary>
            <remarks>In most cases this adds the parameter prefix to the name passed into this method.</remarks>
            <param name="name">The unformatted name of the parameter.</param>
            <returns>The parameter name formatted foran IDbCommand.CommandText.</returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.CreateParameterNameForCollection(System.String)">
            <summary>
            Creates the name ofthe parameter in the format appropriate for an IDataParameter, i.e. to be
            part of a IDataParameterCollection.
            </summary>
            <param name="name">The unformatted name of the parameter.</param>
            <returns>The parameter name formatted for an IDataParameter</returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.ExtractError(System.Exception)">
            <summary>
            Extracts the provider specific error code as a string.
            </summary>
            <param name="e">The data access exception.</param>
            <returns>The provider specific error code</returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.IsDataAccessException(System.Exception)">
            <summary>
            Determines whether the provided exception is in fact related
            to database access.  This can be provider dependent in .NET 1.1 since
            there isn't a common base class for ADO.NET exceptions.
            </summary>
            <param name="e">The exception thrown when performing data access 
            operations.</param>
            <returns>
            	<c>true</c> if is a valid data access exception for the specified 
            exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Data.Common.DelegatingDbProvider.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform the kind of
            initialization only possible when all of it's dependencies have
            been injected (set), and to throw an appropriate exception in the
            event of misconfiguration.
            </p>
            <p>
            Please do consult the class level documentation for the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface for a
            description of exactly <i>when</i> this method is invoked. In
            particular, it is worth noting that the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            callbacks will have been invoked <i>prior</i> to this method being
            called.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as the failure to set a
            required property) or if initialization fails.
            </exception>
        </member>
        <member name="P:Spring.Data.Common.DelegatingDbProvider.TargetDbProvider">
            <summary>
            Gets or sets the target IDbProvider that this IDbProvider should delegate to
            </summary>
            <value>The target db provider.</value>
        </member>
        <member name="P:Spring.Data.Common.DelegatingDbProvider.DbMetadata">
            <summary>
            Return metadata information about the database provider
            </summary>
        </member>
        <member name="P:Spring.Data.Common.DelegatingDbProvider.ConnectionString">
            <summary>
            Connection string used to create connections.
            </summary>
        </member>
        <member name="T:Spring.Data.Common.ErrorCodes">
            <summary>
            Holds ADO.NET error codes for a particular provider. 
            </summary>
            <remarks>
            Used by ErrorCodeExceptionTranslator.  The embedded resource
            "dbProviders.xml" in Spring.Data.Common contains default
            ErrorCodes instances for various providers.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Data.Common.ErrorCodes.log">
            <summary>
            The shared log instance for this class (and derived classes). 
            </summary>
        </member>
        <member name="M:Spring.Data.Common.ErrorCodes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.ErrorCodes"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Common.MultiDelegatingDbProvider">
            <summary>
            A wrapper implementation for IDbProvider such that multiple DbProvider instances can be
            selected at runtime, say based on web request criteria.
            </summary>
            <remarks>
            The name of which DbProvider to use, as provided to the IDictionary property TargetDbProviders
            is "dbProviderName".  Once the target dbprovider name is known, set the name via a call to
            <code>LogicalThreadContext.SetData(MultiDelegatingDbProvider.CURRENT_DBPROVIDER_SLOTNAME, "database1ProviderName")</code>. The value
            "database1ProviderName" must match a key in the provided TargetDbProviders dictionary.
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.MultiDelegatingDbProvider"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Common.MultiDelegatingDbProvider"/> class.
            </summary>
            <param name="targetDbProviders">The target db providers.</param>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.AfterPropertiesSet">
            <summary>
            Ensures that the there are values in the TargetDbProviders dictionary and that the
            key is of the type string and value is of the type IDbProvider.
            </summary>
            <exception cref="T:System.ArgumentException">If the above conditions are not met.</exception>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.CreateCommand">
            <summary>
            Returns a new command object for executing SQL statments/Stored Procedures
            against the database.
            </summary>
            <returns>An new <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.CreateConnection">
            <summary>
            Returns a new connection object to communicate with the database.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.CreateParameter">
            <summary>
            Returns a new parameter object for binding values to parameter
            placeholders in SQL statements or Stored Procedure variables.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbDataParameter"/></returns>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.CreateDataAdapter">
            <summary>
            Returns a new adapter objects for use with offline DataSets.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbDataAdapter"/></returns>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.CreateCommandBuilder">
            <summary>
            Returns a new instance of the providers CommandBuilder class.
            </summary>
            <returns>A new Command Builder</returns>
            <remarks>In .NET 1.1 there was no common base class or interface
            for command builders, hence the return signature is object to
            be portable (but more loosely typed) across .NET 1.1/2.0</remarks>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.CreateParameterName(System.String)">
            <summary>
            Creates the name of the parameter in the format appropriate to use inside IDbCommand.CommandText.
            </summary>
            <param name="name">The unformatted name of the parameter.</param>
            <returns>
            The parameter name formatted foran IDbCommand.CommandText.
            </returns>
            <remarks>In most cases this adds the parameter prefix to the name passed into this method.</remarks>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.CreateParameterNameForCollection(System.String)">
            <summary>
            Creates the name ofthe parameter in the format appropriate for an IDataParameter, i.e. to be
            part of a IDataParameterCollection.
            </summary>
            <param name="name">The unformatted name of the parameter.</param>
            <returns>
            The parameter name formatted for an IDataParameter
            </returns>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.ExtractError(System.Exception)">
            <summary>
            Extracts the provider specific error code as a string.
            </summary>
            <param name="e">The data access exception.</param>
            <returns>The provider specific error code</returns>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.IsDataAccessException(System.Exception)">
            <summary>
            Determines whether the provided exception is in fact related
            to database access.  This can be provider dependent in .NET 1.1 since
            there isn't a common base class for ADO.NET exceptions.
            </summary>
            <param name="e">The exception thrown when performing data access
            operations.</param>
            <returns>
            	<c>true</c> if is a valid data access exception for the specified
            exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.IsDataAccessExceptionBCL11(System.Exception)">
            <summary>
            Determines whether is data access exception in .NET 1.1 for the specified exception.
            </summary>
            <param name="e">The candidate exception.</param>
            <returns>
            	<c>true</c> if is data access exception in .NET 1.1 for the specified exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Data.Common.MultiDelegatingDbProvider.GetTargetProvider">
            <summary>
            Gets the target provider based on the thread local name "dbProviderName"
            </summary>
            <returns>The corresonding IDbProvider.</returns>
        </member>
        <member name="P:Spring.Data.Common.MultiDelegatingDbProvider.DefaultDbProvider">
            <summary>
            Sets the default IDbProvider. This will be returned if no DbProvider is found in thread local storage.
            </summary>
            <value>The default db provider.</value>
        </member>
        <member name="P:Spring.Data.Common.MultiDelegatingDbProvider.TargetDbProviders">
            <summary>
            Sets the target db providers.
            </summary>
            <value>The target db providers.</value>
        </member>
        <member name="P:Spring.Data.Common.MultiDelegatingDbProvider.DbMetadata">
            <summary>
            Return metadata information about the database provider
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Data.Common.MultiDelegatingDbProvider.ConnectionString">
            <summary>
            Connection string used to create connections.
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Data.Common.MultiDelegatingDbProvider.CurrentDbProviderName">
            <summary>
            Convenience method to sets the name of the DbProvider that will be used for the
            the current thread's procesing.
            </summary>
            <value>The name of the DbProvider to use for the current threads processing.</value>
        </member>
        <member name="T:Spring.Data.Common.UserCredentialsDbProvider">
            <summary>
            An adapter for a target IDbProvider, applying the specified user credentials
            to the connection string for every GetConnection call.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.UserCredentialsDbProvider.SetCredentialsForCurrentThread(System.String,System.String)">
            <summary>
            Sets the user credentials for current thread.  The given username and password
            strings will be added to the connection string for all subsequent GetConnection
            requests.  This will override any statically specified user credentials, that is,
            set by the properties Username nad Password.
            </summary>
            <param name="user">The username part of the connection string.</param>
            <param name="pass">The password part of the connection string.</param>
        </member>
        <member name="M:Spring.Data.Common.UserCredentialsDbProvider.RemoveCredentialsFromCurrentThread">
            <summary>
            Removes the user credentials from current thread.  Use statically specified 
            credentials afterwards.
            </summary>
        </member>
        <member name="M:Spring.Data.Common.UserCredentialsDbProvider.CreateConnection">
            <summary>
            Returns a new connection object to communicate with the database.
            Determine if there are currently thread-bound credentials, using them if
            available, falling back to the statically specified username and password
            (i.e. values of the properties 'Username' and 'Password') otherwise.  
            The username and password will be concatenated on the connection string
            using string in the Separator property
            </summary>
            <returns>A new <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="P:Spring.Data.Common.UserCredentialsDbProvider.Username">
            <summary>
            Sets the username string that will be appended to the connection string.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Spring.Data.Common.UserCredentialsDbProvider.Password">
            <summary>
            Sets the password string that will be appended to the connection string.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Spring.Data.Common.UserCredentialsDbProvider.Separator">
            <summary>
            Sets the separator used to separate elements of the connection string.  Default is ';'.
            </summary>
            
            <value>The separator used to separate elements in the connection string.</value>
        </member>
        <member name="T:Spring.Data.Config.DatabaseNamespaceParser">
            <summary>
            Implementation of the custom configuration parser for database definitions.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Data.Config.DatabaseNamespaceParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Config.DatabaseNamespaceParser"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Config.DatabaseNamespaceParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified element and register any resulting
            IObjectDefinitions with the IObjectDefinitionRegistry that is
            embedded in the supplied ParserContext.
            </summary>
            <param name="element">The element to be parsed into one or more IObjectDefinitions</param>
            <param name="parserContext">The object encapsulating the current state of the parsing
            process.</param>
            <returns>
            The primary IObjectDefinition (can be null as explained above)
            </returns>
            <remarks>
            Implementations should return the primary IObjectDefinition
            that results from the parse phase if they wish to used nested
            inside (for example) a <code>&lt;property&gt;</code> tag.
            <para>Implementations may return null if they will not
            be used in a nested scenario.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Data.Config.DatabaseNamespaceParser.ParseDbProviderDefinition(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses database provider definitions.
            </summary>
            <param name="element">Validator XML element.</param>
            <param name="name">The name of the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <returns>A database provider object definition.</returns>
        </member>
        <member name="M:Spring.Data.Config.DatabaseNamespaceParser.GetTypeName(System.Xml.XmlElement)">
            <summary>
            Gets the name of the object type for the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>The name of the object type.</returns>
        </member>
        <member name="T:Spring.Data.Core.AdoAccessor">
            <summary>
            Base class for AdoTemplate and other ADO.NET DAO helper classes defining
            common properties like DbProvider.
            </summary>
            <author>Mark Pollack (.NET)</author>
            <author>Juergen Hoeller</author>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.ApplyCommandSettings(System.Data.IDbCommand)">
            <summary>
            Prepare the command setting the transaction timeout.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.DisposeCommand(System.Data.IDbCommand)">
            <summary>
            Dispose the command, if any
            </summary>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.DisposeDataAdapterCommands(System.Data.IDbDataAdapter)">
            <summary>
            Dispose the command, if any
            </summary>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.GetCommandText(System.Object)">
            <summary>
            Extract the command text from the given <see cref="T:Spring.Data.ICommandTextProvider"/>, if any.
            </summary>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.GetConnectionTxPair(Spring.Data.Common.IDbProvider)">
            <summary>
            Obtain a connection/transaction pair
            </summary>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform the kind of
            initialization only possible when all of it's dependencies have
            been injected (set), and to throw an appropriate exception in the
            event of misconfiguration.
            </p>
            <p>
            Please do consult the class level documentation for the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface for a
            description of exactly <i>when</i> this method is invoked. In
            particular, it is worth noting that the
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and <see cref="T:Spring.Context.IApplicationContextAware"/>
            callbacks will have been invoked <i>prior</i> to this method being
            called.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as the failure to set a
            required property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.CreateDataReaderWrapper(System.Data.IDataReader)">
            <summary>
            Creates the data reader wrapper for use in AdoTemplate callback methods.
            </summary>
            <param name="readerToWrap">The reader to wrap.</param>
            <returns>The data reader used in AdoTemplate callbacks</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.CreateDbParameters(System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Creates the a db parameters collection, adding to the collection a parameter created from
            the method parameters.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="dbType">The type of the parameter.</param>
            <param name="size">The size of the parameter, for use in defining lengths of string values.  Use
            0 if not applicable.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>A collection of db parameters with a single parameter in the collection based
            on the method parameters</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.CreateDbParameters">
            <summary>
            Creates a new instance of <see cref="T:Spring.Data.Common.DbParameters"/>
            </summary>
            <returns>a new instance of <see cref="T:Spring.Data.Common.DbParameters"/></returns>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.DeriveParameters(System.String)">
            <summary>
            Derives the parameters of a stored procedure, not including the return parameter.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <returns>The stored procedure parameters.</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoAccessor.DeriveParameters(System.String,System.Boolean)">
            <summary>
            Derives the parameters of a stored procedure including the return parameter
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="includeReturnParameter">if set to <c>true</c> to include return parameter.</param>
            <returns>The stored procedure parameters</returns>
        </member>
        <member name="P:Spring.Data.Core.AdoAccessor.DbProvider">
            <summary>
            An instance of a DbProvider implementation.
            </summary>
        </member>
        <member name="P:Spring.Data.Core.AdoAccessor.LazyInit">
            <summary>
            Gets or sets a value indicating whether to lazily initialize the 
            IAdoExceptionTranslator for this accessor, on first encounter of a 
            exception from the data provider.  Default is "true"; can be switched to
            "false" for initialization on startup.
            </summary>
            <value><c>true</c> if to lazy initialize the IAdoExceptionTranslator; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Data.Core.AdoAccessor.ExceptionTranslator">
            <summary>
            Gets or sets the exception translator. If no custom translator is provided, a default
            <see cref="T:Spring.Data.Support.ErrorCodeExceptionTranslator"/> is used.
            </summary>
            <value>The exception translator.</value>
        </member>
        <member name="P:Spring.Data.Core.AdoAccessor.DataReaderWrapperType">
            <summary>
            Gets or set the System.Type to use to create an instance of IDataReaderWrapper 
            for the purpose of having defaults values to use in case of DBNull values read 
            from IDataReader.
            </summary>
            <value>The type of the data reader wrapper.</value>
        </member>
        <member name="P:Spring.Data.Core.AdoAccessor.CommandTimeout">
            <summary>
            Gets or sets the command timeout for IDbCommands that this AdoTemplate executes.
            </summary>
            <remarks>Default is 0, indicating to use the database provider's default.
            Any timeout specified here will be overridden by the remaining 
            transaction timeout when executing within a transaction that has a
            timeout specified at the transaction level. 
            </remarks>
            <value>The command timeout.</value>
        </member>
        <member name="T:Spring.Data.Core.AdoDaoSupport">
            <summary>
            Convenient super class for ADO.NET data access objects.
            </summary>
            <remarks>
            Requires a IDBProvider to be set, providing a
            AdoTemplate based on it to subclasses.
            This base class is mainly intended for AdoTemplate usage.
            </remarks>
        </member>
        <member name="M:Spring.Data.Core.AdoDaoSupport.CreateAdoTemplate(Spring.Data.Common.IDbProvider)">
            <summary>
            Create a AdoTemplate for a given DbProvider
            Only invoked if populating the DAO with a DbProvider reference.
            </summary>
            <remarks>
            Can be overriden in subclasses to provide AdoTemplate instances
            with a different configuration, or a cusotm AdoTemplate subclass.       
            </remarks>
            <param name="dbProvider">The DbProvider to create a AdoTemplate for</param>        
        </member>
        <member name="M:Spring.Data.Core.AdoDaoSupport.CreateDbParametersBuilder">
            <summary>
            Convenience method to create a parameters builder.
            </summary>
            <remarks>Virtual for sublcasses to override with custom
            implementation.</remarks>
            <returns>A new DbParameterBuilder</returns>
        </member>
        <member name="P:Spring.Data.Core.AdoDaoSupport.DbProvider">
            <summary>
            The DbProvider instance used by this DAO
            </summary>
        </member>
        <member name="P:Spring.Data.Core.AdoDaoSupport.AdoTemplate">
            <summary>
            Set the AdoTemplate for this DAO explicity, as
            an alternative to specifying a IDbProvider
            </summary>
        </member>
        <member name="T:Spring.Data.Core.AdoPlatformTransactionManager">
            <summary>
            ADO.NET based implementation of the <see cref="T:Spring.Transaction.IPlatformTransactionManager"/>
            interface.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.Support.AbstractPlatformTransactionManager">
            <summary>
            Abstract base class that allows for easy implementation of concrete platform transaction managers.
            </summary>
            <remarks>
            <p>Provides the following workflow handling:
            <ul>
            <li>Determines if there is an existing transaction</li>
            <li>Applies the appropriate propagation behavior</li>
            <li>Suspends and resumes transactions if necessary</li>
            <li>Checks the rollback-only flag on commit</li>
            <li>Applies the appropriate modification on rollback (actual rollback or setting rollback-only)</li>
            <li>Triggers registered synchronization callbacks (if transaction synchronization is active)</li>
            </ul>
            </p>
            <p>
            Transaction synchronization is a generic mechanism for registering
            callbacks that get invoked at transaction completion time. The same mechanism
            can also be used for custom synchronization efforts.
            </p>
            <p>
            The state of this class is serializable. It's up to subclasses if
            they wish to make their state to be serializable.
            They should implement <see cref="T:System.Runtime.Serialization.ISerializable"/> if they need
            to restore any transient state.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.IPlatformTransactionManager">
            <summary>
            This is the central interface in Spring.NET's transaction support.
            </summary>
            <remarks>
            <p>
            Applications can use this directly, but it is not primarily meant as an API.
            Typically, applications will work with either
            <see cref="T:Spring.Transaction.Support.TransactionTemplate"/> or the AOP transaction
            interceptor.
            </p>
            <p>
            For implementers, <see cref="T:Spring.Transaction.Support.AbstractPlatformTransactionManager"/>
            is a good starting point.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.IPlatformTransactionManager.GetTransaction(Spring.Transaction.ITransactionDefinition)">
            <summary>
            Return a currently active transaction or create a new one.
            </summary>
            <remarks>
            <p>
            Note that parameters like isolation level or timeout will only be applied
            to new transactions, and thus be ignored when participating in active ones.
            Furthermore, they aren't supported by every transaction manager:
            a proper implementation should throw an exception when custom values
            that it doesn't support are specified.
            </p>
            </remarks>
            <param name="definition">
            <see cref="T:Spring.Transaction.ITransactionDefinition"/> instance (can be null for
            defaults), describing propagation behavior, isolation level, timeout etc.
            </param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of lookup, creation, or system errors.
            </exception>
            <returns>
            A <see cref="T:Spring.Transaction.ITransactionStatus"/> representing the new or current transaction.
            </returns>
        </member>
        <member name="M:Spring.Transaction.IPlatformTransactionManager.Commit(Spring.Transaction.ITransactionStatus)">
            <summary>
            Commit the given transaction, with regard to its status.
            </summary>
            <remarks>
            <p>
            If the transaction has been marked rollback-only programmatically,
            perform a rollback.
            </p>
            <p>
            If the transaction wasn't a new one, omit the commit to take part
            in the surrounding transaction properly.
            </p>
            </remarks>
            <param name="transactionStatus">
            The <see cref="T:Spring.Transaction.ITransactionStatus"/> instance returned by the
            <see cref="M:Spring.Transaction.IPlatformTransactionManager.GetTransaction(Spring.Transaction.ITransactionDefinition)"/>() method.
            </param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of commit or system errors
            </exception>
        </member>
        <member name="M:Spring.Transaction.IPlatformTransactionManager.Rollback(Spring.Transaction.ITransactionStatus)">
            <summary>
            Roll back the given transaction, with regard to its status.
            </summary>
            <remarks>
            <p>
            If the transaction wasn't a new one, just set it rollback-only
            to take part in the surrounding transaction properly.
            </p>
            </remarks>
            <param name="transactionStatus">
            The <see cref="T:Spring.Transaction.ITransactionStatus"/> instance returned by the
            <see cref="M:Spring.Transaction.IPlatformTransactionManager.GetTransaction(Spring.Transaction.ITransactionDefinition)"/>() method.
            </param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction">
            <summary>
            Return the current transaction object.
            </summary>
            <returns>The current transaction object.</returns>
            <exception cref="T:Spring.Transaction.CannotCreateTransactionException">
            If transaction support is not available.
            </exception>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of lookup or system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.IsExistingTransaction(System.Object)">
            <summary>
            Check if the given transaction object indicates an existing transaction
            (that is, a transaction which has already started).
            </summary>
            <remarks>
            The result will be evaluated according to the specified propagation
            behavior for the new transaction. An existing transaction might get
            suspended (in case of PROPAGATION_REQUIRES_NEW), or the new transaction
            might participate in the existing one (in case of PROPAGATION_REQUIRED).
            Default implementation returns false, assuming that detection of or
            participating in existing transactions is generally not supported.
            Subclasses are of course encouraged to provide such support.</remarks>
            <param name="transaction">
            Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.
            </param>
            <returns>True if there is an existing transaction.</returns>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoBegin(System.Object,Spring.Transaction.ITransactionDefinition)">
            <summary>
            Begin a new transaction with the given transaction definition.
            </summary>
            <remarks>
            Does not have to care about applying the propagation behavior,
            as this has already been handled by this abstract manager.
            </remarks>
            <param name="transaction">
            Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.
            </param>
            <param name="definition">
            <see cref="T:Spring.Transaction.ITransactionDefinition"/> instance, describing
            propagation behavior, isolation level, timeout etc.
            </param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of creation or system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoSuspend(System.Object)">
            <summary>
            Suspend the resources of the current transaction.
            </summary>
            <remarks>
            Transaction synchronization will already have been suspended.
            <para>
            Default implementation throws a TransactionSuspensionNotSupportedException,
            assuming that transaction suspension is generally not supported.
            </para>
            </remarks>
            <param name="transaction">
            Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.
            </param>
            <returns>
            An object that holds suspended resources (will be kept unexamined for passing it into
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoResume(System.Object,System.Object)"/>.)
            </returns>
            <exception cref="T:Spring.Transaction.IllegalTransactionStateException">
            If suspending is not supported by the transaction manager implementation.
            </exception>
            <exception cref="T:Spring.Transaction.TransactionException">
            in case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoResume(System.Object,System.Object)">
            <summary>
            Resume the resources of the current transaction.
            </summary>
            <remarks>Transaction synchronization will be resumed afterwards.
            <para>
            Default implementation throws a TransactionSuspensionNotSupportedException,
            assuming that transaction suspension is generally not supported.
            </para>
            </remarks>
            <param name="transaction">
            Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.
            </param>
            <param name="suspendedResources">
            The object that holds suspended resources as returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoSuspend(System.Object)"/>.
            </param>
            <exception cref="T:Spring.Transaction.IllegalTransactionStateException">
            If suspending is not supported by the transaction manager implementation.
            </exception>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoCommit(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Perform an actual commit on the given transaction.
            </summary>
            <param name="status">The status representation of the transaction.</param>
            <remarks>
            <p>
            An implementation does not need to check the rollback-only flag.
            </p>
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoRollback(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Perform an actual rollback on the given transaction.
            </summary>
            <param name="status">The status representation of the transaction.</param>
            <remarks>
            An implementation does not need to check the new transaction flag.
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoSetRollbackOnly(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Set the given transaction rollback-only. Only called on rollback
            if the current transaction takes part in an existing one.
            </summary>
            <remarks>Default implementation throws an IllegalTransactionStateException,
            assuming that participating in existing transactions is generally not
            supported. Subclasses are of course encouraged to provide such support.
            </remarks>
            <param name="status">The status representation of the transaction.</param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.UseSavepointForNestedTransaction">
            <summary>
            Return whether to use a savepoint for a nested transaction. Default is true,
            which causes delegation to <see cref="T:Spring.Transaction.Support.DefaultTransactionStatus"/>
            for holding a savepoint.
            </summary>
            <returns></returns>
            <remarks>
            <p>
            Subclasses can override this to return false, causing a further
            invocation of
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoBegin(System.Object,Spring.Transaction.ITransactionDefinition)"/>
            despite an already existing transaction.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.RegisterAfterCompletionWithExistingTransaction(System.Object,System.Collections.IList)">
            <summary>
            Register the given list of transaction synchronizations with the existing transaction.
            </summary>
            <remarks>
            Invoked when the control of the Spring transaction manager and thus all Spring
            transaction synchronizations end, without the transaction being completed yet. This
            is for example the case when participating in an existing System.Transactions or
            EnterpriseServices transaction invoked via their APIs.
            <para>
            The default implementation simply invokes the <code>AfterCompletion</code> methods
            immediately, passing in TransactionSynchronizationStatus.Unknown. 
            This is the best we can do if there's no chance to determine the actual 
            outcome of the outer transaction.
            </para>
            </remarks>
            <param name="transaction">The transaction transaction object returned by <code>DoGetTransaction</code>.</param>
            <param name="synchronizations">The lList of TransactionSynchronization objects.</param>
            <exception cref="T:Spring.Transaction.TransactionException">In case of errors</exception>
            <seealso cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.InvokeAfterCompletion(System.Collections.IList,Spring.Transaction.Support.TransactionSynchronizationStatus)"/>
            <seealso cref="M:Spring.Transaction.Support.ITransactionSynchronization.AfterCompletion(Spring.Transaction.Support.TransactionSynchronizationStatus)"/>
            <seealso cref="F:Spring.Transaction.Support.TransactionSynchronizationStatus.Unknown"/>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoCleanupAfterCompletion(System.Object)">
            <summary>
            Cleanup resources after transaction completion.
            </summary>
            <param name="transaction">
            Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.
            </param>
            <remarks>
            <para>
            Called after <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoCommit(Spring.Transaction.Support.DefaultTransactionStatus)"/>
            and
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoRollback(Spring.Transaction.Support.DefaultTransactionStatus)"/>
            execution on any outcome.
            </para>
            <para>
            Should not throw any exceptions but just issue warnings on errors.
            </para>
            <para>
            Default implementation does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.GetTransaction(Spring.Transaction.ITransactionDefinition)">
            <summary>
            Return a currently active transaction or create a new one.
            </summary>
            <remarks>
            <p>
            This implementation handles propagation behavior.
            </p>
            <p>
            Delegates to
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>,
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.IsExistingTransaction(System.Object)"/>,
            and
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoBegin(System.Object,Spring.Transaction.ITransactionDefinition)"/>.
            </p>
            <p>
            Note that parameters like isolation level or timeout will only be applied
            to new transactions, and thus be ignored when participating in active ones.
            Furthermore, they aren't supported by every transaction manager:
            a proper implementation should throw an exception when custom values
            that it doesn't support are specified.
            </p>
            </remarks>
            <param name="definition">
            <see cref="T:Spring.Transaction.ITransactionDefinition"/> instance (can be null for
            defaults), describing propagation behavior, isolation level, timeout etc.
            </param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of lookup, creation, or system errors.
            </exception>
            <returns>
            <see cref="T:Spring.Transaction.ITransactionStatus"/> representing the new or current transaction.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.Commit(Spring.Transaction.ITransactionStatus)">
            <summary>
            This implementation of commit handles participating in existing transactions
            and programmatic rollback requests.
            </summary>
            <remarks>
            </remarks>
            <param name="transactionStatus">
            ITransactionStatus object returned by the
            <see cref="M:Spring.Transaction.IPlatformTransactionManager.GetTransaction(Spring.Transaction.ITransactionDefinition)"/>() method.
            </param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of commit or system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.Rollback(Spring.Transaction.ITransactionStatus)">
            <summary>
            Roll back the given transaction, with regard to its status.
            </summary>
            <remarks>
            <p>
            This implementation handles participating in existing transactions.
            </p>
            <p>
            Delegates to
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoRollback(Spring.Transaction.Support.DefaultTransactionStatus)"/>,
            and
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoSetRollbackOnly(Spring.Transaction.Support.DefaultTransactionStatus)"/>.
            </p>
            <p>
            If the transaction wasn't a new one, just set it rollback-only
            to take part in the surrounding transaction properly.
            </p>
            </remarks>
            <param name="transactionStatus">
            ITransactionStatusObject returned by the
            <see cref="M:Spring.Transaction.IPlatformTransactionManager.GetTransaction(Spring.Transaction.ITransactionDefinition)"/>() method.
            </param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DetermineTimeout(Spring.Transaction.ITransactionDefinition)">
            <summary>
            Determines the timeout to use for the given definition.  Will fall back to this manager's default
            timeout if the transaction definition doesn't specify a non-default value.
            </summary>
            <param name="definition">The transaction definition.</param>
            <returns>the actual timeout to use.</returns>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.Suspend(System.Object)">
            <summary>
            Suspend the given transaction. Suspends transaction synchronization first,
            then delegates to the doSuspend template method.
            </summary>
            <param name="transaction">the current transaction object</param>
            <returns>an object that holds suspended resources</returns>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.Resume(System.Object,System.Object)">
            <summary>
            Resume the given transaction. Delegates to the doResume template method
            first, then resuming transaction synchronization.
            </summary>
            <param name="transaction">the current transaction object</param>
            <param name="suspendedResources"> the object that holds suspended resources, as returned by suspend</param>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoRollbackOnCommitException(Spring.Transaction.Support.DefaultTransactionStatus,System.Exception)">
            <summary>
            Invoke doRollback, handling rollback exceptions properly.
            </summary>
            <param name="status">object representing the transaction</param>
            <param name="exception">the thrown application exception or error</param>
            <exception cref="T:Spring.Transaction.TransactionException">
            in case of a rollback error
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.TriggerBeforeCommit(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Trigger beforeCommit callback.
            </summary>
            <param name="status">object representing the transaction</param>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.TriggerBeforeCompletion(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Trigger beforeCompletion callback.
            </summary>
            <param name="status">object representing the transaction</param>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.TriggerAfterCompletion(Spring.Transaction.Support.DefaultTransactionStatus,Spring.Transaction.Support.TransactionSynchronizationStatus)">
            <summary>
            Trigger afterCompletion callback, handling exceptions properly.
            </summary>
            <param name="status">object representing the transaction</param>
            <param name="completionStatus">
            Completion status according to <see cref="T:Spring.Transaction.Support.TransactionSynchronizationStatus"/>
            </param>
        </member>
        <member name="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.CleanupAfterCompletion(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Clean up after completion, clearing synchronization if necessary,
            and invoking doCleanupAfterCompletion.
            </summary>
            <param name="status">object representing the transaction</param>
        </member>
        <member name="P:Spring.Transaction.Support.AbstractPlatformTransactionManager.TransactionSynchronization">
            <summary>
            Sets and gets when this transaction manager should activate the thread-bound
            transaction synchronization support. Default is "always".
            </summary>
            <remarks>
            <p>
            Note that transaction synchronization isn't supported for
            multiple concurrent transactions by different transaction managers.
            Only one transaction manager is allowed to activate it at any time.
            </p>
            <see cref="T:Spring.Transaction.Support.TransactionSynchronizationState"/>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Support.AbstractPlatformTransactionManager.NestedTransactionsAllowed">
            <summary>
            Sets and gets whether nested transactions are allowed. Default is false.
            </summary>
            <remarks>
            <p>
            Typically initialized with an appropriate default by the
            concrete transaction manager subclass.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Support.AbstractPlatformTransactionManager.RollbackOnCommitFailure">
            <summary>
            Sets and gets a flag that determines whether or not the
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoRollback(Spring.Transaction.Support.DefaultTransactionStatus)"/>
            method must be invoked if a call to the
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoCommit(Spring.Transaction.Support.DefaultTransactionStatus)"/>
            method fails. Default is false.
            </summary>
            <remarks>
            Typically not necessary and thus to be avoided as it can override the
            commit exception with a subsequent rollback exception.
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Support.AbstractPlatformTransactionManager.FailEarlyOnGlobalRollbackOnly">
            <summary>
            Gets or sets a value indicating whether to fail early in case of the transaction being
            globally marked as rollback-only.
            </summary>
            <remarks>
             Default is "false", only causing an UnexpectedRollbackException at the
             outermost transaction boundary. Switch this flag on to cause an
             UnexpectedRollbackException as early as the global rollback-only marker
             has been first detected, even from within an inner transaction boundary.
            </remarks>
            <value>
            	<c>true</c> if fail early on global rollback; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Transaction.Support.AbstractPlatformTransactionManager.DefaultTimeout">
            <summary>
            Gets or sets the default timeout that this transaction manager should apply if there
            is no timeout specified at the transaction level, in seconds.
            </summary>
            <remarks>Returns DefaultTransactionDefinition.TIMEOUT_DEFAULT to indicate the
            underlying transaction infrastructure's default timeout.</remarks>
            <value>The default timeout.</value>
        </member>
        <member name="T:Spring.Transaction.Support.IResourceTransactionManager">
            <summary>
            Extension of the <see cref="T:Spring.Transaction.IPlatformTransactionManager"/> 
            interface, indicating a native resource transaction manager, operating on a single
            target resource. Such transaction managers differ from DTC based transaction managers in
            that they do not use transaction enlistment for an open number of resources but
            rather focus on leveraging the native power and simplicity of a single target resource.
            </summary>
            <para>
            This interface is mainly used for abstract introspection of a transaction manager,
            giving clients a hint on what kind of transaction manager they have been given
            and on what concrete resource the transaction manager is operating on.
            </para>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack</author>
        </member>
        <member name="P:Spring.Transaction.Support.IResourceTransactionManager.ResourceFactory">
            <summary>
            Gets the resource factory that this transaction manager operates on,
            e.g. a IDbProvider or a Hibernate ISessionFactory.
            </summary>
            <value>The resource factory.</value>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.DoGetTransaction">
            <summary>
            Return the current transaction object.
            </summary>
            <returns>The current transaction object.</returns>
            <exception cref="T:Spring.Transaction.CannotCreateTransactionException">
            If transaction support is not available.
            </exception>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of lookup or system errors.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.IsExistingTransaction(System.Object)">
            <summary>
            Check if the given transaction object indicates an existing,
            i.e. already begun, transaction.
            </summary>
            <param name="transaction">
            Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.
            </param>
            <returns>True if there is an existing transaction.</returns>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.DoBegin(System.Object,Spring.Transaction.ITransactionDefinition)">
            <summary>
            Begin a new transaction with the given transaction definition.
            </summary>
            <param name="transaction">
            Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.
            </param>
            <param name="definition">
            <see cref="T:Spring.Transaction.ITransactionDefinition"/> instance, describing
            propagation behavior, isolation level, timeout etc.
            </param>
            <remarks>
            Does not have to care about applying the propagation behavior,
            as this has already been handled by this abstract manager.
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of creation or system errors.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.DoSuspend(System.Object)">
            <summary>
            Suspend the resources of the current transaction.
            </summary>
            <param name="transaction">Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.</param>
            <returns>
            An object that holds suspended resources (will be kept unexamined for passing it into
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoResume(System.Object,System.Object)"/>.)
            </returns>
            <remarks>
            Transaction synchronization will already have been suspended.
            </remarks>
            <exception cref="T:Spring.Transaction.IllegalTransactionStateException">
            If suspending is not supported by the transaction manager implementation.
            </exception>
            <exception cref="T:Spring.Transaction.TransactionException">
            in case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.DoResume(System.Object,System.Object)">
            <summary>
            Resume the resources of the current transaction.
            </summary>
            <param name="transaction">Transaction object returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoGetTransaction"/>.</param>
            <param name="suspendedResources">The object that holds suspended resources as returned by
            <see cref="M:Spring.Transaction.Support.AbstractPlatformTransactionManager.DoSuspend(System.Object)"/>.</param>
            <remarks>
            Transaction synchronization will be resumed afterwards.
            </remarks>
            <exception cref="T:Spring.Transaction.IllegalTransactionStateException">
            If suspending is not supported by the transaction manager implementation.
            </exception>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.DoCommit(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Perform an actual commit on the given transaction.
            </summary>
            <param name="status">The status representation of the transaction.</param>
            <remarks>
            <p>
            An implementation does not need to check the rollback-only flag.
            </p>
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.DoRollback(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Perform an actual rollback on the given transaction.
            </summary>
            <param name="status">The status representation of the transaction.</param>
            <remarks>
            An implementation does not need to check the new transaction flag.
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.DoSetRollbackOnly(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Set the given transaction rollback-only. Only called on rollback
            if the current transaction takes part in an existing one.
            </summary>
            <param name="status">The status representation of the transaction.</param>
            <exception cref="T:Spring.Transaction.TransactionException">
            In the case of system errors.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has injected all of an object's dependencies.
            </summary>
            <exception cref="T:System.ArgumentException">
            If DbProvider is null.
            </exception>
        </member>
        <member name="P:Spring.Data.Core.AdoPlatformTransactionManager.ResourceFactory">
            <summary>
            Gets the resource factory that this transaction manager operates on,
            For the AdoPlatformTransactionManager this is the DbProvider
            </summary>
            <value>The DbProvider.</value>
        </member>
        <member name="T:Spring.Data.Core.AdoPlatformTransactionManager.DbProviderTransactionObject">
            <summary>
            DbProvider transaction (state) object, representing a ConnectionHolder.
            Used as a transaction object by AdoPlatformTransactionManager
            </summary>
            <remarks>Derives from AdoTransactionObjectSupport to inherit the capability
            to manage Savepoints.
            </remarks>
            <seealso cref="T:Spring.Data.Support.ConnectionHolder"/>
        </member>
        <member name="T:Spring.Data.Support.AdoTransactionObjectSupport">
            <summary>
            Convenient base class for ADO.NET transaction aware objects.
            </summary>
            <remarks>
            Can contain a ConnectionHolder object.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.ISavepointManager">
            <summary>
            Interface that specifies means to programmatically manage
            transaction savepoints in a generic fashion.
            </summary>
            <remarks>
            <p>
            Note that savepoints can only work within an active transaction.
            Just use this programmatic savepoint handling for advanced needs;
            else, a subtransaction with a <see cref="T:Spring.Transaction.TransactionPropagation"/> value
            of <see cref="F:Spring.Transaction.TransactionPropagation.Nested"/> is preferable.
            </p>	
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.ISavepointManager.CreateSavepoint(System.String)">
            <summary>
            Create a new savepoint.
            </summary>
            <param name="savepointName">
            The name of the savepoint to create.
            </param>
            <remarks>
            You can roll back to a specific savepoint
            via <see cref="M:Spring.Transaction.ISavepointManager.RollbackToSavepoint(System.String)"/>,
            and explicitly release a savepoint that you don't need anymore via
            <see cref="M:Spring.Transaction.ISavepointManager.ReleaseSavepoint(System.String)"/>.
            <p>
            Note that most transaction managers will automatically release
            savepoints at transaction completion.
            </p>
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            If the savepoint could not be created,
            either because the backend does not support it or because the
            transaction is not in an appropriate state.
            </exception>
            <returns>
            A savepoint object, to be passed into
            <see cref="M:Spring.Transaction.ISavepointManager.RollbackToSavepoint(System.String)"/>
            or <see cref="M:Spring.Transaction.ISavepointManager.ReleaseSavepoint(System.String)"/>.
            </returns>
        </member>
        <member name="M:Spring.Transaction.ISavepointManager.RollbackToSavepoint(System.String)">
            <summary>
            Roll back to the given savepoint.
            </summary>
            <remarks>
            The savepoint will be automatically released afterwards.
            </remarks>
            <param name="savepoint">The savepoint to roll back to.</param>
            <exception cref="T:Spring.Transaction.TransactionException">
            If the rollback failed.
            </exception>
        </member>
        <member name="M:Spring.Transaction.ISavepointManager.ReleaseSavepoint(System.String)">
            <summary>
            Explicitly release the given savepoint.
            </summary>
            <remarks>
            <p>
            Note that most transaction managers will automatically release
            savepoints at transaction completion.
            </p>
            <p>
            Implementations should fail as silently as possible if
            proper resource cleanup will still happen at transaction completion.
            </p>
            </remarks>
            <param name="savepoint">The savepoint to release.</param>
            <exception cref="T:Spring.Transaction.TransactionException">
            If the release failed.
            </exception>
        </member>
        <member name="T:Spring.Transaction.Support.ISmartTransactionObject">
            <summary>
            Interface to be implemented by transaction objects that are able to
            return an internal rollback-only marker, typically from a another
            transaction that has participated and marked it as rollback-only.
            </summary>
            <remarks>
            <p>
            Autodetected by <see cref="T:Spring.Transaction.Support.DefaultTransactionStatus"/>,
            to always return a current rollbackOnly flag even if not resulting from the current
            <see cref="T:Spring.Transaction.ITransactionStatus"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="P:Spring.Transaction.Support.ISmartTransactionObject.RollbackOnly">
            <summary>
            Return whether the transaction is internally marked as rollback-only.
            </summary>
            <returns>True of the transaction is marked as rollback-only.</returns>
        </member>
        <member name="F:Spring.Data.Support.AdoTransactionObjectSupport.log">
            <summary>
            The shared log instance for this class (and derived classes). 
            </summary>
        </member>
        <member name="M:Spring.Data.Support.AdoTransactionObjectSupport.CreateSavepoint(System.String)">
            <summary>
            Create a new savepoint.
            </summary>
            <param name="savepointName">
            The name of the savepoint to create.
            </param>
            <remarks>
            You can roll back to a specific savepoint
            via <see cref="M:Spring.Transaction.ISavepointManager.RollbackToSavepoint(System.String)"/>,
            and explicitly release a savepoint that you don't need anymore via
            <see cref="M:Spring.Transaction.ISavepointManager.ReleaseSavepoint(System.String)"/>.
            <p>
            Note that most transaction managers will automatically release
            savepoints at transaction completion.
            </p>
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            If the savepoint could not be created,
            either because the backend does not support it or because the
            transaction is not in an appropriate state.
            </exception>
            <returns>
            A savepoint object, to be passed into
            <see cref="M:Spring.Transaction.ISavepointManager.RollbackToSavepoint(System.String)"/>
            or <see cref="M:Spring.Transaction.ISavepointManager.ReleaseSavepoint(System.String)"/>.
            </returns>
        </member>
        <member name="M:Spring.Data.Support.AdoTransactionObjectSupport.RollbackToSavepoint(System.String)">
            <summary>
            Roll back to the given savepoint.
            </summary>
            <remarks>
            The savepoint will be automatically released afterwards.
            </remarks>
            <param name="savepoint">The savepoint to roll back to.</param>
            <exception cref="T:Spring.Transaction.TransactionException">
            If the rollback failed.
            </exception>
        </member>
        <member name="M:Spring.Data.Support.AdoTransactionObjectSupport.ReleaseSavepoint(System.String)">
            <summary>
            Explicitly release the given savepoint.
            </summary>
            <remarks>
            <p>
            Note that most transaction managers will automatically release
            savepoints at transaction completion.
            </p>
            <p>
            Implementations should fail as silently as possible if
            proper resource cleanup will still happen at transaction completion.
            </p>
            </remarks>
            <param name="savepoint">The savepoint to release.</param>
            <exception cref="T:Spring.Transaction.TransactionException">
            If the release failed.
            </exception>
        </member>
        <member name="P:Spring.Data.Support.AdoTransactionObjectSupport.RollbackOnly">
            <summary>
            Return whether the transaction is internally marked as rollback-only.
            </summary>
            <value></value>
            <returns>True of the transaction is marked as rollback-only.</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoPlatformTransactionManager.DbProviderTransactionObject.SetRollbackOnly">
            <summary>
            Sets the rollback only.
            </summary>
        </member>
        <member name="P:Spring.Data.Core.AdoPlatformTransactionManager.DbProviderTransactionObject.RollbackOnly">
            <summary>
            Return whether the transaction is internally marked as rollback-only.
            </summary>
            <value></value>
            <returns>True of the transaction is marked as rollback-only.</returns>
        </member>
        <member name="T:Spring.Data.Core.AdoTemplate">
            <summary>
            This is the central class in the Spring.Data namespace.
            It simplifies the use of ADO.NET and helps to avoid commons errors.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.IAdoOperations">
            <summary>
            Interface that defines ADO.NET related database operations.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Execute the query with the specified command text returning a scalar result
            </summary>
            <remarks>No parameters are used.  As with 
            IDbCommand.ExecuteScalar, it returns the first column of the first row in the resultset
            returned by the query.  Extra columns or row are ignored.</remarks>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteScalar(System.Data.CommandType,System.String,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute the query with the specified command text and parameter returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteScalar(System.Data.CommandType,System.String,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute the query with the specified command text and parameters returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameters">The parameter collection to map.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteScalar(System.Data.CommandType,System.String,Spring.Data.ICommandSetter)">
            <summary>
            Execute the query with the specified command text and parameters set via the
            command setter, returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteScalar(Spring.Data.IDbCommandCreator)">
            <summary>
            Execute the query with a command created via IDbCommandCreator and 
            parameters
            </summary>
            <remarks>Output parameters can be retrieved via the returned
            dictionary.
            <para>
            More commonly used as a lower level support method within the framework,
            for example StoredProcedure/AdoScalar.
            </para>
            </remarks>
            <param name="commandCreator">The callback to create a IDbCommand.</param>
            <returns>A dictionary containing output parameters, if any</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteNonQuery(System.Data.CommandType,System.String,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteNonQuery(System.Data.CommandType,System.String,Spring.Data.Common.IDbParameters)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameters">The parameter collection to map.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteNonQuery(System.Data.CommandType,System.String,Spring.Data.ICommandSetter)">
            <summary>
            Executes a non query with parameters set via the
            command setter, returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.ExecuteNonQuery(Spring.Data.IDbCommandCreator)">
            <summary>
            Executes a non query with a command created via IDbCommandCreator and
            parameters.
            </summary>
            <remarks>Output parameters can be retrieved via the returned
            dictionary.
            <para>
            More commonly used as a lower level support method within the framework,
            for example StoredProcedure/AdoScalar.
            </para>
            </remarks>
            <param name="commandCreator">The callback to create a IDbCommand.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback)">
            <summary>
            Execute a query given IDbCommand's type and text, reading a 
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command.</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute a query given IDbCommand's type and text and provided parameter
            information, reading a 
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute a query given IDbCommand's type and text and provided IDbParameters,
            reading a single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">Type of the command.</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.</param>
            <param name="parameters">The parameter collection to map.</param>
        </member>
        <member name="M:Spring.Data.ICommonAdoOperations.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback,Spring.Data.ICommandSetter)">
            <summary>
            Execute a query given IDbCommand's type and text by 
            passing the created IDbCommand to a ICommandSetter implementation 
            that knows how to bind values to the IDbCommand, reading a 
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
            <param name="commandSetter">The command setter.</param>
        </member>
        <member name="M:Spring.Data.IAdoOperations.Execute(Spring.Data.CommandDelegate)">
            <summary>
            Execute a ADO.NET operation on a command object using a delegate callback.
            </summary>
            <remarks>This allows for implementing arbitrary data access operations
            on a single command within Spring's managed ADO.NET environment.</remarks>
            <param name="del">The delegate called with a command object.</param>
            <returns>A result object returned by the action or null</returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.Execute(Spring.Data.ICommandCallback)">
            <summary>
            Execute a ADO.NET operation on a command object using an interface based callback.
            </summary>
            <param name="action">the callback to execute</param>
            <returns>object returned from callback</returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.Execute(Spring.Data.IDbCommandCreator,Spring.Data.ICommandCallback)">
            <summary>
            Executes ADO.NET operations on a command object, created by the provided IDbCommandCreator,
            using the interface based callback IDbCommandCallback.
            </summary>
            <param name="commandCreator">The command creator.</param>
            <param name="action">The callback to execute based on IDbCommand</param>
            <returns>A result object returned by the action or null</returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.Execute(Spring.Data.IDataAdapterCallback)">
            <summary>
            Execute ADO.NET operations on a IDbDataAdapter object using an interface based callback.
            </summary>
            <remarks>This allows for implementing abritrary data access operations
            on a single DataAdapter within Spring's managed ADO.NET environment.
            </remarks>
            <param name="dataAdapterCallback">The data adapter callback.</param>
            <returns>A result object returned by the callback or null</returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryWithResultSetExtractor(System.Data.CommandType,System.String,Spring.Data.IResultSetExtractor)">
            <summary>
            Execute a query given IDbCommand's type and text, processing a 
            single result set with an instance of IResultSetExtractor
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="resultSetExtractor">Object that will extract all rows of a result set</param>
            <returns>An arbitrary result object, as returned by the IResultSetExtractor</returns>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryWithResultSetExtractor(System.Data.CommandType,System.String,Spring.Data.IResultSetExtractor,Spring.Data.ICommandSetter)">
            <summary>
            Execute a query given IDbCommand's type and text with parameters set
            via the command setter, processing a 
            single result set with an instance of IResultSetExtractor
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="resultSetExtractor">The result set extractor.</param>
            <param name="commandSetter">The command setter.</param>
            <returns>An arbitrary result object, as returned by the IResultSetExtractor</returns>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryWithResultSetExtractorDelegate(System.Data.CommandType,System.String,Spring.Data.ResultSetExtractorDelegate)">
            <summary>
            Execute a query given static SQL/Stored Procedure name 
            and process a single result set with an instance of ResultSetExtractorDelegate
            </summary>
            <param name="cmdType">The type of command.</param>
            <param name="cmdText">The command text.</param>
            <param name="resultSetExtractorDelegate">Delegate that will extract all rows of a result set</param>
            <returns>An arbitrary result object, as returned by the IResultSetExtractor</returns>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>        
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryWithRowMapper(System.Data.CommandType,System.String,Spring.Data.IRowMapper)">
            <summary>
            Execute a query given static SQL, mapping each row to a .NET object
            iva a RowMapper
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">SQL query to execute</param>
            <param name="rowMapper">object that will map one object per row</param>
            <returns>the result list containing mapped objects</returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryForObject(System.Data.CommandType,System.String,Spring.Data.IRowMapper)">
            <summary>
            Execute a query with the specified command text, mapping a single result 
            row to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapper">object that will map one object per row</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryForObject(System.Data.CommandType,System.String,Spring.Data.IRowMapper,Spring.Data.ICommandSetter)">
            <summary>
            Execute a query with the specified command text and parameters set via the
            command setter, mapping a single result row to an object via a RowMapper.  
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapper">object that will map one object per row</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryForObject(System.Data.CommandType,System.String,Spring.Data.IRowMapper,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute a query with the specified command text and parameters, mapping a single result row
            to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapper">object that will map one object per row</param>
            <param name="parameters">The parameter collection to use in the query.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryForObject(System.Data.CommandType,System.String,Spring.Data.IRowMapper,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute a query with the specified command text and parameter, mapping a single result row
            to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapper">object that will map one object per row</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryForObjectDelegate(System.Data.CommandType,System.String,Spring.Data.RowMapperDelegate)">
            <summary>
            Execute a query with the specified command text, mapping a single result 
            row to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapperDelgate">delegate that will map one object per row</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryForObjectDelegate(System.Data.CommandType,System.String,Spring.Data.RowMapperDelegate,Spring.Data.ICommandSetter)">
            <summary>
            Execute a query with the specified command text and parameters set via the
            command setter, mapping a single result row to an object via a RowMapper.  
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapperDelegate">delegate that will map one object per row</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryForObjectDelegate(System.Data.CommandType,System.String,Spring.Data.RowMapperDelegate,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute a query with the specified command text and parameters, mapping a single result row
            to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapperDelegate">delegate that will map one object per row</param>
            <param name="parameters">The parameter collection to use in the query.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.IAdoOperations.QueryForObjectDelegate(System.Data.CommandType,System.String,Spring.Data.RowMapperDelegate,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute a query with the specified command text and parameter, mapping a single result row
            to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapperDelegate">delegate that will map one object per row</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.DataTableFill(System.Data.DataTable,System.Data.CommandType,System.String)">
            <summary>
            Fill a  <see cref="T:System.Data.DataTable"/> based on a select command that requires no parameters.
            </summary>
            <param name="dataTable">The <see cref="T:System.Data.DataTable"/> to populate</param>
            <param name="commandType">The type of command</param>
            <param name="sql">SQL query to execute</param>
            <returns>The number of rows successfully added to or refreshed in the  <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.DataSetFill(System.Data.DataSet,System.Data.CommandType,System.String)">
            <summary>
            Fill a  <see cref="T:System.Data.DataSet"/> based on a select command that requires no parameters.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to populate</param>
            <param name="commandType">The type of command</param>
            <param name="sql">SQL query to execute</param>
            <returns>The number of rows successfully added to or refreshed in the  <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.DataSetFill(System.Data.DataSet,System.Data.CommandType,System.String,System.String[])">
            <summary>
            Fill a  <see cref="T:System.Data.DataSet"/> based on a select command that requires no parameters
            that returns one or more result sets that are added as 
            <see cref="T:System.Data.DataTable"/>s to the <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to populate</param>
            <param name="commandType">The type of command</param>
            <param name="sql">SQL query to execute</param>
            <param name="tableNames">The mapping of table names for each <see cref="T:System.Data.DataTable"/>
            created</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.IAdoOperations.DeriveParameters(System.String)">
            <summary>
            Note that output parameters are marked input/output after derivation....
            (TODO - double check....)
            </summary>
            <param name="procedureName"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.AdoTemplate"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.AdoTemplate"/> class.
            </summary>
            <param name="provider">The database provider.</param>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.#ctor(Spring.Data.Common.IDbProvider,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.AdoTemplate"/> class.
            </summary>
            <param name="provider">The database provider.</param>
            <param name="lazyInit">if set to <c>false</c>
            lazily initialize the ErrorCodeExceptionTranslator.</param>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.Execute(Spring.Data.CommandDelegate)">
            <summary>
            Execute a ADO.NET operation on a command object using a delegate callback.
            </summary>
            <param name="del">The delegate called with a command object.</param>
            <returns>
            A result object returned by the action or null
            </returns>
            <remarks>This allows for implementing arbitrary data access operations
            on a single command within Spring's managed ADO.NET environment.</remarks>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.Execute(Spring.Data.ICommandCallback)">
            <summary>
            Callback to execute a IDbCommand.
            </summary>
            <param name="action">the callback to execute</param>
            <returns>object returned from callback</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.Execute(Spring.Data.IDbCommandCreator,Spring.Data.ICommandCallback)">
            <summary>
            Executes ADO.NET operations on a command object, created by the provided IDbCommandCreator,
            using the interface based callback IDbCommandCallback.
            </summary>
            <param name="commandCreator">The command creator.</param>
            <param name="action">The callback to execute based on IDbCommand</param>
            <returns>A result object returned by the action or null</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.Execute(Spring.Data.IDataAdapterCallback)">
            <summary>
            Execute ADO.NET operations on a IDbDataAdapter object using an interface based callback.
            </summary>
            <remarks>This allows for implementing abritrary data access operations
            on a single DataAdapter within Spring's managed ADO.NET environment.
            </remarks>
            <param name="dataAdapterCallback">The data adapter callback.</param>
            <returns>A result object returned by the callback or null</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteNonQuery(System.Data.CommandType,System.String,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteNonQuery(System.Data.CommandType,System.String,Spring.Data.Common.IDbParameters)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameters">The parameter collection to map.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteNonQuery(System.Data.CommandType,System.String,Spring.Data.ICommandSetter)">
            <summary>
            Executes a non query with parameters set via the
            command setter, returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteNonQuery(Spring.Data.IDbCommandCreator)">
            <summary>
            Executes a non query with a command created via IDbCommandCreator and
            parameters.
            </summary>
            <remarks>Output parameters can be retrieved via the returned
            dictionary.
            <para>
            More commonly used as a lower level support method within the framework,
            for example StoredProcedure/AdoScalar.
            </para>
            </remarks>
            <param name="commandCreator">The callback to create a IDbCommand.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Execute the query with the specified command text.
            </summary>
            <remarks>No parameters are used.  As with
            IDbCommand.ExecuteScalar, it returns the first column of the first row in the resultset
            returned by the query.  Extra columns or row are ignored.</remarks>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteScalar(System.Data.CommandType,System.String,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute the query with the specified command text and parameter returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteScalar(System.Data.CommandType,System.String,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute the query with the specified command text and parameters returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameters">The parameter collection to map.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteScalar(System.Data.CommandType,System.String,Spring.Data.ICommandSetter)">
            <summary>
            Execute the query with the specified command text and parameters set via the
            command setter, returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.ExecuteScalar(Spring.Data.IDbCommandCreator)">
            <summary>
            Execute the query with a command created via IDbCommandCreator and
            parameters
            </summary>
            <remarks>Output parameters can be retrieved via the returned
            dictionary.
            <para>
            More commonly used as a lower level support method within the framework,
            for example for StoredProcedure/AdoScalar.
            </para></remarks>
            <param name="commandCreator">The callback to create a IDbCommand.</param>
            <returns>A dictionary containing output parameters, if any</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback)">
            <summary>
            Execute a query given IDbCommand's type and text, reading a
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback,Spring.Data.ICommandSetter)">
            <summary>
            Execute a query given IDbCommand's type and text by
            passing the created IDbCommand to a ICommandSetter implementation
            that knows how to bind values to the IDbCommand, reading a
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
            <param name="commandSetter">The command setter.</param>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute a query given IDbCommand's type and text and provided parameter
            information, reading a
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryWithResultSetExtractor(System.Data.CommandType,System.String,Spring.Data.IResultSetExtractor)">
            <summary>
            Execute a query given static SQL/Stored Procedure name
            and process a single result set with an instance of IResultSetExtractor
            </summary>
            <param name="cmdType">The type of command.</param>
            <param name="sql">The SQL/Stored Procedure to execute</param>
            <param name="rse">Object that will extract all rows of a result set</param>
            <returns>An arbitrary result object, as returned by the IResultSetExtractor</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryWithResultSetExtractorDelegate(System.Data.CommandType,System.String,Spring.Data.ResultSetExtractorDelegate)">
            <summary>
            Execute a query given static SQL/Stored Procedure name
            and process a single result set with an instance of IResultSetExtractor
            </summary>
            <param name="cmdType">The type of command.</param>
            <param name="sql">The SQL/Stored Procedure to execute</param>
            <param name="resultSetExtractorDelegate">Delegate that will extract all rows of a result set</param>
            <returns>An arbitrary result object, as returned by the IResultSetExtractor</returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryForObject(System.Data.CommandType,System.String,Spring.Data.IRowMapper)">
            <summary>
            Execute a query with the specified command text, mapping a single result
            row to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapper">object that will map one object per row</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryForObject(System.Data.CommandType,System.String,Spring.Data.IRowMapper,Spring.Data.ICommandSetter)">
            <summary>
            Execute a query with the specified command text and parameters set via the
            command setter, mapping a single result row to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapper">object that will map one object per row</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryForObject(System.Data.CommandType,System.String,Spring.Data.IRowMapper,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute a query with the specified command text and parameters, mapping a single result row
            to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapper">object that will map one object per row</param>
            <param name="parameters">The parameter collection to use in the query.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryForObject(System.Data.CommandType,System.String,Spring.Data.IRowMapper,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute a query with the specified command text and parameter, mapping a single result row
            to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapper">object that will map one object per row</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryForObjectDelegate(System.Data.CommandType,System.String,Spring.Data.RowMapperDelegate)">
            <summary>
            Execute a query with the specified command text, mapping a single result
            row to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapperDelegate">delegate that will map one object per row</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryForObjectDelegate(System.Data.CommandType,System.String,Spring.Data.RowMapperDelegate,Spring.Data.ICommandSetter)">
            <summary>
            Execute a query with the specified command text and parameters set via the
            command setter, mapping a single result row to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapperDelegate">delegate that will map one object per row</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryForObjectDelegate(System.Data.CommandType,System.String,Spring.Data.RowMapperDelegate,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute a query with the specified command text and parameters, mapping a single result row
            to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapperDelegate">delegate that will map one object per row</param>
            <param name="parameters">The parameter collection to use in the query.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.QueryForObjectDelegate(System.Data.CommandType,System.String,Spring.Data.RowMapperDelegate,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute a query with the specified command text and parameter, mapping a single result row
            to an object via a RowMapper.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="rowMapperDelegate">delegate that will map one object per row</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The single mapped object.</returns>
            <exception cref="T:Spring.Dao.IncorrectResultSizeDataAccessException">
            If the query does not return exactly one row.
            </exception>
            <exception cref="T:Spring.Dao.DataAccessException">
            If there is any problem executing the query.
            </exception>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.DataTableFill(System.Data.DataTable,System.Data.CommandType,System.String)">
            <summary>
            Fill a  <see cref="T:System.Data.DataTable"/> based on a select command that requires no parameters.
            </summary>
            <param name="dataTable">The <see cref="T:System.Data.DataTable"/> to populate</param>
            <param name="commandType">The type of command</param>
            <param name="sql">SQL query to execute</param>
            <returns>The number of rows successfully added to or refreshed in the  <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Spring.Data.Core.AdoTemplate.CreateDataReaderWrapper(System.Data.IDataReader)">
            <summary>
            Creates the data reader wrapper for use in AdoTemplate callback methods.
            </summary>
            <param name="readerToWrap">The reader to wrap.</param>
            <returns>The data reader used in AdoTemplate callbacks</returns>
        </member>
        <member name="P:Spring.Data.Core.AdoTemplate.DbProvider">
            <summary>
            An instance of a DbProvider implementation.
            </summary>
        </member>
        <member name="P:Spring.Data.Core.AdoTemplate.LazyInit">
            <summary>
            Gets or sets a value indicating whether to lazily initialize the 
            IAdoExceptionTranslator for this accessor, on first encounter of a 
            exception from the data provider.  Default is "true"; can be switched to
            "false" for initialization on startup.
            </summary>
            <value><c>true</c> if to lazy initialize the IAdoExceptionTranslator; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Data.Core.AdoTemplate.ExceptionTranslator">
            <summary>
            Gets or sets the exception translator. If no custom translator is provided, a default
            <see cref="T:Spring.Data.Support.ErrorCodeExceptionTranslator"/> is used.
            </summary>
            <value>The exception translator.</value>
        </member>
        <member name="P:Spring.Data.Core.AdoTemplate.DataReaderWrapperType">
            <summary>
            Gets or set the System.Type to use to create an instance of IDataReaderWrapper 
            for the purpose of having defaults values to use in case of DBNull values read 
            from IDataReader.
            </summary>
            <value>The type of the data reader wrapper.</value>
        </member>
        <member name="T:Spring.Data.IDataAdapterCallback">
            <summary>
            Generic callback interface for code that operates on a 
            IDbDataAdapter. 
            </summary>
            <remarks>
            <p>Allows you to execute any number of operations
            on a IDbDataAdapter, for example to Fill a DataSet
            or other more advanced operations such as the transfering
            data between two different DataSets.
            </p>
            <p>Note that the passed in IDbDataAdapter
            has been created by the framework and its SelectCommand
            will be populated with values for CommandType and Text properties
            along with Connection/Transaction properties based on the
            calling transaction context.
             </p>
            <see cref="T:Spring.Data.Core.AdoTemplate"/> Execute(IDataAdapterCallback dataAdapterCallback)
            method.
            </remarks>    
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.IDataAdapterCallback.DoInDataAdapter(System.Data.IDbDataAdapter)">
            <summary>
            Called by AdoTemplate.Execute with an preconfigured
            ADO.NET IDbDataAdapter instance with its SelectCommand
            property populated with CommandType and Text values
            along with Connection/Transaction properties based on the
            calling transaction context.
            </summary>
            <param name="dataAdapter">An active IDbDataAdapter instance</param>
            <returns>The result object</returns>
        </member>
        <member name="T:Spring.Data.ICommandCallback">
            <summary>
            Generic callback interface for code that operates on a 
            IDbCommand. 
            </summary>
            <remarks>
            <p>Allows you to execute any number of operations
            on a single IDbCommand, for example a single ExecuteScalar
            call or repeated execute calls with varying parameters.
            </p>
            <p>Used internally by AdoTemplate, but also useful for 
            application code.  Note that the passed in IDbCommand
            has been created by the framework.  </p>
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Data.ICommandCallback.DoInCommand(System.Data.IDbCommand)">
            <summary>
            Called by AdoTemplate.Execute with an active ADO.NET IDbCommand.
            The calling code does not need to care about closing the 
            command or the connection, or
            about handling transactions:  this will all be handled by 
            Spring's AdoTemplate
            </summary>
            <param name="command">An active IDbCommand instance</param>
            <returns>The result object</returns>
        </member>
        <member name="T:Spring.Data.ICommandTextProvider">
            <summary>
            Interface to be implemented by objects that can provide SQL strings
            </summary>
            <remarks>Typically implemented by IDbCommandCreator and 
            ICommandCallbacks that want to expose the CommandText they
            use to create their ADO.NET commands, to allow for better
            contextual information in case of exceptions</remarks>
            <author>Mark Pollack(.NET)</author>
            <author>Juergen Hoeller</author>
        </member>
        <member name="T:Spring.Data.Core.RowMapperResultSetExtractor">
            <summary>
            Adapter implementation of the ResultSetExtractor interface that delegates 
            to a RowMapper which is supposed to create an object for each row.
            Each object is added to the results List of this ResultSetExtractor.
            </summary>
            <remarks>
            Useful for the typical case of one object per row in the database table.
            The number of entries in the results list will match the number of rows.
            <p>
            Note that a RowMapper object is typically stateless and thus reusable;
            just the RowMapperResultSetExtractor adapter is stateful.
            </p>
            <p>
            As an alternative consider subclassing MappingAdoQuery from the 
            Spring.Data.Objects namespace:  Instead of working with separate 
            AdoTemplate and IRowMapper objects you can have executable
            query objects (containing row-mapping logic) there.
            </p>
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.IResultSetExtractor">
            <summary>
            Callback interface to process all result sets and rows in
            an AdoTemplate query method.
            </summary>
            <remarks>Implementations of this interface perform the work
            of extracting results but don't need worry about managing
            ADO.NET resources, such as closing the reader or transaction management.
            <p>
            This interface is mainly used within the ADO.NET
            framework.  An IResultSetExtractor is usually a simpler choice
            for result set (DataReader) processing, in particular a 
            RowMapperResultSetExtractor in combination with a IRowMapper.
            </p>
            <para>Note: in contracts to a IRowCallbackHandler, a ResultSetExtractor
            is usually stateless and thus reusable, as long as it doesn't access
            stateful resources or keep result state within the object.
            </para>
            </remarks>
            
        </member>
        <member name="M:Spring.Data.IResultSetExtractor.ExtractData(System.Data.IDataReader)">
            <summary>
            Implementations must implement this method to process all
            result set and rows in the IDataReader.
            </summary>
            <param name="reader">The IDataReader to extract data from.
            Implementations should not close this: it will be closed
            by the AdoTemplate.</param>
            <returns>An arbitrary result object or null if none.  The
            extractor will typically be stateful in the latter case.</returns>
        </member>
        <member name="M:Spring.Data.Core.RowMapperResultSetExtractor.#ctor(Spring.Data.IRowMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.RowMapperResultSetExtractor"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Core.ServiceDomainPlatformTransactionManager">
            <summary>
            Transaction Manager that uses EnterpriseServices to access the
            MS-DTC.  It requires the support of 'Services without Components'
            functionality which is available on Win 2003 and Win XP SP2.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Core.ServiceDomainPlatformTransactionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.ServiceDomainPlatformTransactionManager"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Core.ServiceDomainPlatformTransactionManager.#ctor(Spring.Data.Support.IServiceDomainAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.ServiceDomainPlatformTransactionManager"/> class.
            </summary>
            <remarks>This is indented only for unit testing purposes and should not be
            called by production application code.</remarks>
            <param name="txAdapter">The tx adapter.</param>
        </member>
        <member name="P:Spring.Data.Core.ServiceDomainPlatformTransactionManager.TrackingEnabled">
            <summary>
            Gets or sets a value indicating whether tracking is enabled.
            </summary>
            <value><c>true</c> if tracking is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Data.Core.ServiceDomainPlatformTransactionManager.TrackingAppName">
            <summary>
            Gets or sets a text string that corresponds to the application ID under which tracker information is reported.
            The default value is 'Spring.NET'
            </summary>
            <value>The name of the tracking app.</value>
        </member>
        <member name="P:Spring.Data.Core.ServiceDomainPlatformTransactionManager.TrackingComponentName">
            <summary>
            Gets or sets a text string that corresponds to the context name under which tracker information is reported. 
            </summary>
            <value>The name of the tracking component.</value>
        </member>
        <member name="T:Spring.Data.Core.TxScopeTransactionManager">
            <summary>
            TransactionManager that uses TransactionScope provided by System.Transactions.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Core.TxScopeTransactionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.TxScopeTransactionManager"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Core.TxScopeTransactionManager.#ctor(Spring.Data.Support.ITransactionScopeAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.TxScopeTransactionManager"/> class.
            </summary>
            <remarks>This is indented only for unit testing purposes and should not be
            called by production application code.</remarks>
            <param name="txAdapter">The tx adapter.</param>
        </member>
        <member name="M:Spring.Data.Core.TxScopeTransactionManager.AfterPropertiesSet">
            <summary>
            No-op initialization
            </summary>
        </member>
        <member name="T:Spring.Data.Core.TxScopeTransactionManager.PromotableTxScopeTransactionObject">
            <summary>
            The transaction resource object that encapsulates the state and functionality
            contained in TransactionScope and Transaction.Current via the ITransactionScopeAdapter 
            property.
            </summary>
        </member>
        <member name="M:Spring.Data.Core.TxScopeTransactionManager.PromotableTxScopeTransactionObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.TxScopeTransactionManager.PromotableTxScopeTransactionObject"/> class.
            Will create an instance of <see cref="T:Spring.Data.Support.DefaultTransactionScopeAdapter"/>.
            </summary>
        </member>
        <member name="P:Spring.Data.Core.TxScopeTransactionManager.PromotableTxScopeTransactionObject.TxScopeAdapter">
            <summary>
            Gets or sets the transaction scope adapter.
            </summary>
            <value>The transaction scope adapter.</value>
        </member>
        <member name="P:Spring.Data.Core.TxScopeTransactionManager.PromotableTxScopeTransactionObject.RollbackOnly">
            <summary>
            Return whether the transaction is internally marked as rollback-only.
            </summary>
            <value></value>
            <returns>True of the transaction is marked as rollback-only.</returns>
        </member>
        <member name="T:Spring.Data.Generic.AdoDaoSupport">
            <summary>
            Convenient super class for ADO.NET data access objects using generics.
            </summary>
            <remarks>
            Requires a IDBProvider to be set, providing a
            AdoTemplate based on it to subclasses.
            This base class is mainly intended for AdoTemplate usage.
            </remarks>
        </member>
        <member name="M:Spring.Data.Generic.AdoDaoSupport.CreateAdoTemplate(Spring.Data.Common.IDbProvider)">
            <summary>
            Create a AdoTemplate for a given DbProvider
            Only invoked if populating the DAO with a DbProvider reference.
            </summary>
            <remarks>
            Can be overriden in subclasses to provide AdoTemplate instances
            with a different configuration, or a cusotm AdoTemplate subclass.       
            </remarks>
            <param name="dbProvider">The DbProvider to create a AdoTemplate for</param>        
        </member>
        <member name="M:Spring.Data.Generic.AdoDaoSupport.CreateDbParametersBuilder">
            <summary>
            Convenience method to create a parameters builder.
            </summary>
            <remarks>Virtual for sublcasses to override with custom
            implementation.</remarks>
            <returns>A new DbParameterBuilder</returns>
        </member>
        <member name="P:Spring.Data.Generic.AdoDaoSupport.DbProvider">
            <summary>
            The DbProvider instance used by this DAO
            </summary>
        </member>
        <member name="P:Spring.Data.Generic.AdoDaoSupport.AdoTemplate">
            <summary>
            Set the AdoTemplate for this DAO explicity, as
            an alternative to specifying a IDbProvider
            </summary>
        </member>
        <member name="T:Spring.Data.Generic.AdoTemplate">
            <summary>
            This is the central class in the Spring.Data.Generic namespace.
            It simplifies the use of ADO.NET and helps to avoid commons errors.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Generic.IAdoOperations">
            <summary>
            Interface that defines ADO.NET related database operations using generics
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Generic.IAdoOperations.Execute``1(Spring.Data.Generic.ICommandCallback{``0})">
            <summary>
            Execute a ADO.NET operation on a command object using a generic interface based callback.
            </summary>
            <typeparam name="T">The type of object returned from the callback.</typeparam>
            <param name="action">the callback to execute based on DbCommand</param>
            <returns>An object returned from callback</returns>
        </member>
        <member name="M:Spring.Data.Generic.IAdoOperations.Execute``1(Spring.Data.Generic.IDbCommandCallback{``0})">
            <summary>
            Execute a ADO.NET operation on a command object using a generic interface based callback.
            </summary>
            <typeparam name="T">The type of object returned from the callback.</typeparam>
            <param name="action">The callback to execute based on IDbCommand</param>
            <returns>An object returned from callback</returns>
        </member>
        <member name="M:Spring.Data.Generic.IAdoOperations.Execute``1(Spring.Data.Generic.CommandDelegate{``0})">
            <summary>
            Execute a ADO.NET operation on a command object using a generic delegate callback.
            </summary>
            <typeparam name="T">The type of object returned from the callback.</typeparam>        
            <remarks>This allows for implementing arbitrary data access operations
            on a single command within Spring's managed ADO.NET environment.</remarks>
            <param name="del">The delegate called with a DbCommand object.</param>
            <returns>A result object returned by the action or null</returns>
        </member>
        <member name="M:Spring.Data.Generic.IAdoOperations.Execute``1(Spring.Data.Generic.IDbCommandDelegate{``0})">
            <summary>
            Execute a ADO.NET operation on a command object using a generic delegate callback.
            </summary>
            <typeparam name="T">The type of object returned from the callback.</typeparam>        
            <remarks>This allows for implementing arbitrary data access operations
            on a single command within Spring's managed ADO.NET environment.</remarks>
            <param name="del">The delegate called with a IDbCommand object.</param>
            <returns>A result object returned by the action or null</returns>
        </member>
        <member name="M:Spring.Data.Generic.IAdoOperations.Execute``1(Spring.Data.IDbCommandCreator,Spring.Data.Generic.IDbCommandCallback{``0})">
            <summary>
            Executes ADO.NET operations on a command object, created by the provided IDbCommandCreator,
            using the interface based callback IDbCommandCallback.
            </summary>
            <typeparam name="T">The type of object returned from the callback.</typeparam>
            <param name="commandCreator">The command creator.</param>
            <param name="action">The callback to execute based on IDbCommand</param>
            <returns>A result object returned by the action or null</returns>
        </member>
        <member name="M:Spring.Data.Generic.IAdoOperations.Execute``1(Spring.Data.Generic.IDataAdapterCallback{``0})">
            <summary>
            Execute ADO.NET operations on a IDbDataAdapter object using an interface based callback.
            </summary>
            <remarks>This allows for implementing abritrary data access operations
            on a single DataAdapter within Spring's managed ADO.NET environment.
            </remarks>        
            <typeparam name="T">The type of object returned from the callback.</typeparam>
            <param name="dataAdapterCallback">The data adapter callback.</param>
            <returns>A result object returned by the callback or null</returns>
        </member>
        <member name="M:Spring.Data.Generic.IAdoOperations.Execute``1(Spring.Data.Generic.DataAdapterDelegate{``0})">
            <summary>
            Execute ADO.NET operations on a IDbDataAdapter object using an delgate based callback.
            </summary>
            <remarks>This allows for implementing abritrary data access operations
            on a single DataAdapter within Spring's managed ADO.NET environment.
            </remarks>        
            <typeparam name="T">The type of object returned from the callback.</typeparam>
            <param name="del">The delegate called with a IDbDataAdapter object.</param>
            <returns>A result object returned by the callback or null</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Generic.AdoTemplate"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Generic.AdoTemplate"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.#ctor(Spring.Data.Common.IDbProvider,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Generic.AdoTemplate"/> class.
            </summary>
            <param name="provider">The database provider.</param>
            <param name="lazyInit">if set to <c>false</c>
            lazily initialize the ErrorCodeExceptionTranslator.</param>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.#ctor(Spring.Data.Core.AdoTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Generic.AdoTemplate"/> class.
            </summary>
            <remarks>Useful if you have a subclass of Spring.Data.Core.AdoTemplate.</remarks>
            <param name="classicAdoTemplate">The classic ADO template.</param>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.Execute``1(Spring.Data.Generic.ICommandCallback{``0})">
            <summary>
            Execute a ADO.NET operation on a command object using a interface based callback.
            </summary>
            <param name="action">the callback to execute</param>
            <returns>object returned from callback</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.Execute``1(Spring.Data.Generic.CommandDelegate{``0})">
            <summary>
            Execute a ADO.NET operation on a command object using a delegate callback.
            </summary>
            <remarks>This allows for implementing arbitrary data access operations
            on a single command within Spring's managed ADO.NET environment.</remarks>
            <param name="del">The delegate called with a command object.</param>
            <returns>A result object returned by the action or null</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.Execute``1(Spring.Data.Generic.IDbCommandCallback{``0})">
            <summary>
            Execute a ADO.NET operation on a command object using a interface based callback.
            </summary>
            <param name="action">the callback to execute</param>
            <returns>object returned from callback</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.Execute``1(Spring.Data.Generic.IDbCommandDelegate{``0})">
            <summary>
            Execute a ADO.NET operation on a command object using a delegate callback.
            </summary>
            <remarks>This allows for implementing arbitrary data access operations
            on a single command within Spring's managed ADO.NET environment.</remarks>
            <param name="del">The delegate called with a command object.</param>
            <returns>A result object returned by the action or null</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.Execute``1(Spring.Data.IDbCommandCreator,Spring.Data.Generic.IDbCommandCallback{``0})">
            <summary>
            Executes ADO.NET operations on a command object, created by the provided IDbCommandCreator,
            using the interface based callback IDbCommandCallback.
            </summary>
            <typeparam name="T">The type of object returned from the callback.</typeparam>
            <param name="commandCreator">The command creator.</param>
            <param name="action">The callback to execute based on IDbCommand</param>
            <returns>
            A result object returned by the action or null
            </returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.Execute``1(Spring.Data.Generic.IDataAdapterCallback{``0})">
            <summary>
            Execute ADO.NET operations on a IDbDataAdapter object using an interface based callback.
            </summary>
            <typeparam name="T">The type of object returned from the callback.</typeparam>
            <param name="dataAdapterCallback">The data adapter callback.</param>
            <returns>
            A result object returned by the callback or null
            </returns>
            <remarks>This allows for implementing abritrary data access operations
            on a single DataAdapter within Spring's managed ADO.NET environment.
            </remarks>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.Execute``1(Spring.Data.Generic.DataAdapterDelegate{``0})">
            <summary>
            Execute ADO.NET operations on a IDbDataAdapter object using an delgate based callback.
            </summary>
            <remarks>This allows for implementing abritrary data access operations
            on a single DataAdapter within Spring's managed ADO.NET environment.
            </remarks>        
            <typeparam name="T">The type of object returned from the callback.</typeparam>
            <param name="dataAdapterCallback">The delegate called with a IDbDataAdapter object.</param>
            <returns>A result object returned by the callback or null</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteNonQuery(System.Data.CommandType,System.String,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteNonQuery(System.Data.CommandType,System.String,Spring.Data.Common.IDbParameters)">
            <summary>
            Executes a non query returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameters">The parameter collection to map.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteNonQuery(System.Data.CommandType,System.String,Spring.Data.ICommandSetter)">
            <summary>
            Executes a non query with parameters set via the
            command setter, returning the number of rows affected.
            </summary>
            <param name="cmdType">The command type.</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteNonQuery(Spring.Data.IDbCommandCreator)">
            <summary>
            Executes a non query with a command created via IDbCommandCreator and
            parameters.
            </summary>
            <remarks>Output parameters can be retrieved via the returned
            dictionary.
            <para>
            More commonly used as a lower level support method within the framework,
            for example StoredProcedure/AdoScalar.
            </para>
            </remarks>
            <param name="commandCreator">The callback to create a IDbCommand.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Execute the query with the specified command text.
            </summary>
            <remarks>No parameters are used.  As with 
            IDbCommand.ExecuteScalar, it returns the first column of the first row in the result set
            returned by the query.  Extra columns or row are ignored.</remarks>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteScalar(System.Data.CommandType,System.String,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute the query with the specified command text and parameter returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteScalar(System.Data.CommandType,System.String,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute the query with the specified command text and parameters returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="parameters">The parameter collection to map.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteScalar(System.Data.CommandType,System.String,Spring.Data.ICommandSetter)">
            <summary>
            Execute the query with the specified command text and parameters set via the
            command setter, returning a scalar result
            </summary>
            <param name="cmdType">The command type</param>
            <param name="cmdText">The command text to execute.</param>
            <param name="commandSetter">The command setter.</param>
            <returns>The first column of the first row in the result set</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.ExecuteScalar(Spring.Data.IDbCommandCreator)">
            <summary>
            Execute the query with a command created via IDbCommandCreator and 
            parameters
            </summary>
            <remarks>Output parameters can be retrieved via the returned
            dictionary.
            <para>
            More commonly used as a lower level support method within the framework,
            for example for StoredProcedure/AdoScalar.
            </para></remarks>
            <param name="commandCreator">The callback to create a IDbCommand.</param>
            <returns>A dictionary containing output parameters, if any</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback,Spring.Data.ICommandSetter)">
            <summary>
            Execute a query given IDbCommand's type and text by 
            passing the created IDbCommand to a ICommandSetter implementation 
            that knows how to bind values to the IDbCommand, reading a 
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
            <param name="commandSetter">The command setter.</param>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback)">
            <summary>
            Execute a query given IDbCommand's type and text, reading a 
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback,System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Execute a query given IDbCommand's type and text and provided parameter
            information, reading a 
            single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">The type of command</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.
            </param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="dbType">One of the database parameter type enumerations.</param>
            <param name="size">The length of the parameter. 0 if not applicable to parameter type.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.QueryWithRowCallback(System.Data.CommandType,System.String,Spring.Data.IRowCallback,Spring.Data.Common.IDbParameters)">
            <summary>
            Execute a query given IDbCommand's type and text and provided IDbParameters,
            reading a single result set on a per-row basis with a <see cref="T:Spring.Data.IRowCallback"/>.
            </summary>
            <param name="cmdType">Type of the command.</param>
            <param name="cmdText">The text of the query.</param>
            <param name="rowCallback">callback that will extract results
            one row at a time.</param>
            <param name="parameter">The parameter collection to map.</param>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.AfterPropertiesSet">
            <summary>
            Checks if DbProvider is not null and creates ExceptionTranslator if not LazyInit.
            </summary>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.CreateDataReaderWrapper(System.Data.IDataReader)">
            <summary>
            Creates the data reader wrapper for use in AdoTemplate callback methods.
            </summary>
            <param name="readerToWrap">The reader to wrap.</param>
            <returns>The data reader used in AdoTemplate callbacks</returns>
        </member>
        <member name="M:Spring.Data.Generic.AdoTemplate.DeriveParameters(System.String,System.Boolean)">
            <summary>
            Derives the parameters of a stored procedure including the return parameter
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="includeReturnParameter">if set to <c>true</c> to include return parameter.</param>
            <returns>The stored procedure parameters</returns>
        </member>
        <member name="P:Spring.Data.Generic.AdoTemplate.DbProvider">
            <summary>
            An instance of a DbProvider implementation.
            </summary>
        </member>
        <member name="P:Spring.Data.Generic.AdoTemplate.LazyInit">
            <summary>
            Gets or sets a value indicating whether to lazily initialize the 
            IAdoExceptionTranslator for this accessor, on first encounter of a 
            exception from the data provider.  Default is "true"; can be switched to
            "false" for initialization on startup.
            </summary>
            <value><c>true</c> if to lazy initialize the IAdoExceptionTranslator; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Data.Generic.AdoTemplate.ExceptionTranslator">
            <summary>
            Gets or sets the exception translator. If no custom translator is provided, a default
            <see cref="T:Spring.Data.Support.ErrorCodeExceptionTranslator"/> is used.
            </summary>
            <value>The exception translator.</value>
        </member>
        <member name="P:Spring.Data.Generic.AdoTemplate.DataReaderWrapperType">
            <summary>
            Gets or set the System.Type to use to create an instance of IDataReaderWrapper 
            for the purpose of having defaults values to use in case of DBNull values read 
            from IDataReader.
            </summary>
            <value>The type of the data reader wrapper.</value>
        </member>
        <member name="P:Spring.Data.Generic.AdoTemplate.ClassicAdoTemplate">
            <summary>
            Gets the 'Classic' AdoTemplate in Spring.Data
            </summary>
            <remarks>
            Useful to access methods that return non-generic collections.
            </remarks>
            <value>The 'Classic; AdoTemplate in Spring.Data.</value>
        </member>
        <member name="P:Spring.Data.Generic.AdoTemplate.CommandTimeout">
            <summary>
            Gets or sets the command timeout for IDbCommands that this AdoTemplate executes.  It also
            sets the value of the contained 'ClassicAdoTemplate'.
            </summary>
            <value>The command timeout.</value>
            <remarks>Default is 0, indicating to use the database provider's default.
            Any timeout specified here will be overridden by the remaining
            transaction timeout when executing within a transaction that has a
            timeout specified at the transaction level.
            </remarks>
        </member>
        <member name="T:Spring.Data.Generic.IDbCommandCallback`1">
            <summary>
            Generic callback interface for code that operates on a 
            IDbCommand. 
            </summary>
            <typeparam name="T">The return type from executing the
            callback</typeparam>
            <remarks>
            <p>Allows you to execute any number of operations
            on a single IDbCommand, for example a single ExecuteScalar
            call or repeated execute calls with varying parameters.
            </p>
            <p>Used internally by AdoTemplate, but also useful for 
            application code.  Note that the passed in IDbCommand
            has been created by the framework and will have its
            Connection property set and the Transaction property
            set based on the transaction context.</p>
            <p>As an alternative to using this interface you can use 
            the delegate version which is particularly nice when using
            anonymous delegates for writing more terse code and having
            easy access to the variables in the calling class.</p>
            <p>See <see cref="T:Spring.Data.ICommandCallback"/> for a version that has the
            base class DbCommand as the callback argument.</p>
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Data.Generic.IDbCommandCallback`1.DoInCommand(System.Data.IDbCommand)">
            <summary>
            Called by AdoTemplate.Execute with an active ADO.NET IDbCommand.
            The calling code does not need to care about closing the 
            command or the connection, or
            about handling transactions:  this will all be handled by 
            Spring's AdoTemplate
            </summary>
            <param name="command">An active IDbCommand instance</param>
            <returns>The result object</returns>
        </member>
        <member name="T:Spring.Data.Generic.CommandDelegate`1">
            <summary>
            Generic callback delegate for code that operates on a DbCommand. 
            </summary>
            <remarks>
            <p>Allows you to execute any number of operations
            on a single DbCommand, for example a single ExecuteScalar
            call or repeated execute calls with varying parameters.
            </p>
            <p>Used internally by AdoTemplate, but also useful for 
            application code.  Note that the passed in DbCommand
            has been created by the framework and will have its
            Connection property set and the Transaction property
            set based on the transaction context.</p>
            </remarks>
            <typeparam name="T">The return type from executing the
            callback</typeparam>
            <param name="command">The ADO.NET DbCommand object</param>
            <returns>The object returned from processing with the
            provided DbCommand </returns>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Data.Generic.DataAdapterDelegate`1">
            <summary>
            Called by AdoTemplate.Execute with an preconfigured
            ADO.NET IDbDataAdapter instance with its SelectCommand
            property populated with CommandType and Text values
            along with Connection/Transaction properties based on the
            calling transaction context.
            </summary>
            <param name="dataAdapter">An active IDbDataAdapter instance</param>
            <returns>The result object</returns>
        </member>
        <member name="T:Spring.Data.Generic.ICommandCallback`1">
            <summary>
            Generic callback interface for code that operates on a 
            DbCommand. 
            </summary>
            <typeparam name="T">The return type from executing the
            callback</typeparam>
            <remarks>
            <p>Allows you to execute any number of operations
            on a single DbCommand, for example a single ExecuteScalar
            call or repeated execute calls with varying parameters.
            </p>
            <p>Used internally by AdoTemplate, but also useful for 
            application code.  Note that the passed in DbCommand
            has been created by the framework and will have its
            Connection property set and the Transaction property
            set based on the transaction context.</p>
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Data.Generic.ICommandCallback`1.DoInCommand(System.Data.Common.DbCommand)">
            <summary>
            Called by AdoTemplate.Execute with an active ADO.NET IDbCommand.
            The calling code does not need to care about closing the 
            command or the connection, or
            about handling transactions:  this will all be handled by 
            Spring's AdoTemplate
            </summary>
            <param name="command">An active IDbCommand instance</param>
            <returns>The result object</returns>
        </member>
        <member name="T:Spring.Data.Generic.IDataAdapterCallback`1">
            <summary>
            Generic callback interface for code that operates on a 
            IDbDataAdapter. 
            </summary>
            <remarks>
            <p>Allows you to execute any number of operations
            on a IDbDataAdapter, for example to Fill a DataSet
            or other more advanced operations such as the transfering
            data between two different DataSets.
            </p>
            <p>Note that the passed in IDbDataAdapter
            has been created by the framework and its SelectCommand
            will be populated with values for CommandType and Text properties
            along with Connection/Transaction properties based on the
            calling transaction context.
             </p>
            <see cref="T:Spring.Data.Generic.AdoTemplate"/> Execute(IDataAdapterCallback dataAdapterCallback)
            method.
            </remarks>    
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Generic.IDataAdapterCallback`1.DoInDataAdapter(System.Data.IDbDataAdapter)">
            <summary>
            Called by AdoTemplate.Execute with an preconfigured
            ADO.NET IDbDataAdapter instance with its SelectCommand
            property populated with CommandType and Text values
            along with Connection/Transaction properties based on the
            calling transaction context.
            </summary>
            <param name="dataAdapter">An active IDbDataAdapter instance</param>
            <returns>The result object</returns>
        </member>
        <member name="T:Spring.Data.Generic.IDbCommandDelegate`1">
            <summary>
            Generic callback delegate for code that operates on a IDbCommand. 
            </summary>
            <remarks>
            <p>Allows you to execute any number of operations
            on a single IDbCommand, for example a single ExecuteScalar
            call or repeated execute calls with varying parameters.
            </p>
            <p>Used internally by AdoTemplate, but also useful for 
            application code.  Note that the passed in DbCommand
            has been created by the framework and will have its
            Connection property set and the Transaction property
            set based on the transaction context.</p>
            </remarks>
            <typeparam name="T">The return type from executing the
            callback</typeparam>
            <param name="command">The ADO.NET DbCommand object</param>
            <returns>The object returned from processing with the
            provided DbCommand </returns>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Data.Generic.IResultSetExtractor`1">
            <summary>
            Callback interface to process all results sets and rows in
            an AdoTemplate query method.
            </summary>
            <remarks>Implementations of this interface perform the work
            of extracting results but don't need worry about managing
            ADO.NET resources, such as closing the reader. 
            <p>
            This interface is mainly used within the ADO.NET
            framework.  An IResultSetExtractor is usually a simpler choice
            for result set (DataReader) processing, in particular a 
            RowMapperResultSetExtractor in combination with a IRowMapper.
            </p>
            <para>Note: in contracts to a IRowCallbackHandler, a ResultSetExtractor
            is usually stateless and thus reusable, as long as it doesn't access
            stateful resources or keep result state within the object.
            </para>
            </remarks>
            
        </member>
        <member name="M:Spring.Data.Generic.IResultSetExtractor`1.ExtractData(System.Data.IDataReader)">
            <summary>
            Implementations must implement this method to process all
            result set and rows in the IDataReader.
            </summary>
            <param name="reader">The IDataReader to extract data from.
            Implementations should not close this: it will be closed
            by the AdoTemplate.</param>
            <returns>An arbitrary result object or null if none.  The
            extractor will typically be stateful in the latter case.</returns>
        </member>
        <member name="T:Spring.Data.Generic.IRowMapper`1">
            <summary>
            Generic callback to process each row of data in a result set to an object.
            </summary>
            <remarks>Implementations of this interface perform the actual work
            of mapping rows, but don't need worry about managing
            ADO.NET resources, such as closing the reader.
            <p>
            Typically used for AdoTemplate's query methods (with RowMapperResultSetExtractor
            adapters).  RowMapper objects are typically stateless and thus
            reusable; they are ideal choices for implementing row-mapping logic in a single
            place.
            </p>
            <p>Alternatively, consider subclassing MappingSqlQuery from the Spring.Data.Object
            namespace:  Instead of working with separate AdoTemplate and RowMapper objects, 
            you can have executable query objects (containing row-mapping logic) there.
            </p>
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Generic.IRowMapper`1.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Implementations must implement this method to map each row of data in the
            result set (DataReader).  This method should not call Next() on the 
            DataReader; it should only extract the values of the current row.
            </summary>
            <param name="reader">The IDataReader to map (pre-initialized to the current row)</param>
            <param name="rowNum">The number of the current row..</param>
            <returns>The specific typed result object for the current row.</returns>
        </member>
        <member name="T:Spring.Data.Generic.NamedResultSetProcessor`1">
            <summary>
            Provides a name to a ResultSetProcessor for use with AdoOperation subclasses
            such as StoredProcedure.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Generic.NamedResultSetProcessor`1.#ctor(System.String,Spring.Data.IRowCallback)">
            <summary>
            Initializes a new instance of the class with a
            IRowCallback instance
            </summary>
            <param name="name">The name of the associated row callback for use with output 
            result set mappers.</param>
            <param name="rowcallback">A row callback instance.</param>
        </member>
        <member name="M:Spring.Data.Generic.NamedResultSetProcessor`1.#ctor(System.String,Spring.Data.Generic.IRowMapper{`0})">
            <summary>
            Initializes a new instance of the class with a
            IRowMapper instance
            </summary>
            <param name="name">The name of the associated row mapper.</param>
            <param name="rowMapper">A IRowMapper instance.</param>
        </member>
        <member name="M:Spring.Data.Generic.NamedResultSetProcessor`1.#ctor(System.String,Spring.Data.Generic.IResultSetExtractor{`0})">
            <summary>
            Initializes a new instance of the class with a
            IResultSetExtractor instance
            </summary>
            <param name="name">The name of the associated result set extractor.</param>
            <param name="resultSetExtractor">A IResultSetExtractor instance.</param>
        </member>
        <member name="T:Spring.Data.Generic.ResultSetExtractorDelegate`1">
            <summary>
            Callback delegate to process all result sets and row in an 
            AdoTemplate query method.
            </summary>
            <typeparam name="T">The type returned from the result set mapping.</typeparam>
            <param name="reader">The IDataReader to extract data from.
            Implementations should not close this: it will be closed
            by the AdoTemplate.</param>
            <returns>An arbitrary result object or null if none.</returns>
        </member>
        <member name="T:Spring.Data.Generic.RowMapperDelegate`1">
            <summary>
            Callback delegate to process each row of data in a result set to an object.
            </summary>
            <typeparam name="T">The type of the object returned from the mapping operation.</typeparam>
            <param name="dataReader">The IDataReader to map</param>
            <param name="rowNum">the number of the current row.</param>
            <returns>An abrirary object, typically derived from data
            in the result set.</returns>
        </member>
        <member name="T:Spring.Data.Generic.RowMapperResultSetExtractor`1">
            <summary>
            Adapter implementation of the ResultSetExtractor interface that delegates 
            to a RowMapper which is supposed to create an object for each row.
            Each object is added to the results List of this ResultSetExtractor.
            </summary>
            <remarks>
            Useful for the typical case of one object per row in the database table.
            The number of entries in the results list will match the number of rows.
            <p>
            Note that a RowMapper object is typically stateless and thus reusable;
            just the RowMapperResultSetExtractor adapter is stateful.
            </p>
            <p>
            As an alternative consider subclassing MappingAdoQuery from the 
            Spring.Data.Objects namespace:  Instead of working with separate 
            AdoTemplate and IRowMapper objects you can have executable
            query objects (containing row-mapping logic) there.
            </p>
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Generic.RowMapperResultSetExtractor`1.#ctor(Spring.Data.Generic.IRowMapper{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Core.RowMapperResultSetExtractor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Generic.RowMapperResultSetExtractor`1.#ctor(Spring.Data.Generic.IRowMapper{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Generic.RowMapperResultSetExtractor`1"/> class.
            </summary>
            <param name="rowMapper">The row mapper.</param>
            <param name="rowsExpected">The rows expected.</param>
        </member>
        <member name="T:Spring.Data.Objects.Generic.AdoOperation">
            <summary>
            A "AdoOperation" is a thread-safe, reusable object representing 
            an ADO Query, "NonQuery" (Create, Update, Delete), stored procedure
            or DataSet manipualtions.
            </summary>
            <remarks>
            Subclasses should set Command Text and add parameters before invoking
            Compile().  The order in which parameters are added is generally
            significant when using providers or functionality that do not use
            named parameters.
            
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Objects.AbstractAdoOperation">
            <summary>
            Abstract base class providing common functionality for generic and non
            generic implementations of "AdoOperation" subclasses.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Data.Objects.AbstractAdoOperation.compiled">
            <summary>
            Has this operation been compiled?  Compilation means at 
            least checking that a IDbProvider and sql have been provided,
            but subclasses may also implement their own custom validation.
            </summary>
        </member>
        <member name="F:Spring.Data.Objects.AbstractAdoOperation.commandFactory">
            <summary>
            Object enabling us to create IDbCommands
            efficiently, based on this class's declared parameters.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.AbstractAdoOperation.AfterPropertiesSet">
            <summary>
            Ensures compilation if used in an IApplicationContext
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.AbstractAdoOperation.Compile">
            <summary>
            Compiles this operation.  Ignores subsequent attempts to compile.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.AbstractAdoOperation.CheckCompiled">
            <summary>
            Check whether this operation has been compiled already;
            lazily compile it if not already compiled.
            </summary>
            <remarks>Automatically called by ValidateParameters and ValidateNamedParameters</remarks>
        </member>
        <member name="M:Spring.Data.Objects.AbstractAdoOperation.ValidateNamedParameters(System.Collections.IDictionary)">
            <summary>
            Validates the named parameters passed to an AdoTemplate ExecuteXXX method based on
            declared parameters.
            </summary>
            <remarks>
            Subclasses should invoke this method very every ExecuteXXX method.
            </remarks>
            <param name="parameters">The parameter dictionary supplied.  May by null.</param>
        </member>
        <member name="M:Spring.Data.Objects.AbstractAdoOperation.CompileInternal">
            <summary>
            Subclasses must implement to perform their own compilation.
            Invoked after this class's compilation is complete.
            Subclasses can assume that SQL has been supplied and that
            a IDbProvider has been supplied.
            </summary>                                                                                                
        </member>
        <member name="M:Spring.Data.Objects.AbstractAdoOperation.OnCompileInternal">
            <summary>
            Hook method that subclasses may override to react to compilation.
            This implementation does nothing.
            </summary>
        </member>
        <member name="P:Spring.Data.Objects.AbstractAdoOperation.CommandType">
            <summary>
            Gets or sets the type of the command.
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:Spring.Data.Objects.AbstractAdoOperation.DbProvider">
            <summary>
            Gets or sets the db provider.
            </summary>
            <value>The db provider.</value>
        </member>
        <member name="P:Spring.Data.Objects.AbstractAdoOperation.Sql">
            <summary>
            Gets or sets the SQL to execute
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="P:Spring.Data.Objects.AbstractAdoOperation.DeclaredParameters">
            <summary>
            Gets or sets the declared parameters.
            </summary>
            <value>The declared parameters.</value>
        </member>
        <member name="P:Spring.Data.Objects.AbstractAdoOperation.Compiled">
            <summary>
            Gets a value indicating whether this <see cref="T:Spring.Data.Objects.AdoOperation"/> is compiled.
            </summary>
            <remarks>Compilation means that the operation is fully configured,
             and ready to use.  The exact meaning of compilation will vary between subclasses.</remarks>
            <value><c>true</c> if compiled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Data.Objects.AbstractAdoOperation.CommandTimeout">
            <summary>
            Sets the command timeout for IDbCommands that this AdoTemplate executes.
            </summary>
            <remarks>Default is 0, indicating to use the database provider's default.
            Any timeout specified here will be overridden by the remaining 
            transaction timeout when executing within a transaction that has a
            timeout specified at the transaction level. 
            </remarks>
            <value>The command timeout.</value>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.Generic.AdoOperation"/> class.
            </summary>
            <remarks>A DbProvider, SQL and any parameters must be supplied
            before invoking the compile method and using this object.       
            </remarks>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoOperation.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.Generic.AdoOperation"/> class.
            </summary>
            <remarks>A DbProvider, SQL and any parameters must be supplied
            before invoking the compile method and using this object.       
            </remarks>
            <param name="provider">Database provider to use.</param>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoOperation.#ctor(Spring.Data.Common.IDbProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.Generic.AdoOperation"/> class.
            </summary>
            <remarks>A DbProvider, SQL and any parameters must be supplied
            before invoking the compile method and using this object.       
            </remarks>
            <param name="provider">Database provider to use.</param>
            <param name="sql">SQL query or stored procedure name.</param>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoOperation.Compile">
            <summary>
            Compiles this operation.  Ignores subsequent attempts to compile.
            </summary>
        </member>
        <member name="P:Spring.Data.Objects.Generic.AdoOperation.AdoTemplate">
            <summary>
            Gets or sets the ADO template.
            </summary>
            <value>The ADO template.</value>
        </member>
        <member name="P:Spring.Data.Objects.Generic.AdoOperation.DbProvider">
            <summary>
            Gets or sets the db provider.
            </summary>
            <value>The db provider.</value>
        </member>
        <member name="P:Spring.Data.Objects.Generic.AdoOperation.CommandTimeout">
            <summary>
            Sets the command timeout for IDbCommands that this AdoTemplate executes.
            </summary>
            <remarks>Default is 0, indicating to use the database provider's default.
            Any timeout specified here will be overridden by the remaining 
            transaction timeout when executing within a transaction that has a
            timeout specified at the transaction level. 
            </remarks>
            <value>The command timeout.</value>
        </member>
        <member name="T:Spring.Data.Objects.Generic.AdoQuery">
            <summary>
            Place together the mapping logic to a plain .NET object
            for one result set within the same class.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.Generic.AdoQuery"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoQuery.#ctor(Spring.Data.Common.IDbProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.Generic.AdoQuery"/> class.
            </summary>
            <param name="provider">The database provider.</param>
            <param name="sql">The SQL to execute</param>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoQuery.Query``1">
            <summary>
            Convenient method to execute query without parameters or calling context.
            </summary>
            <typeparam name="T">The type parameter for the returned collection</typeparam>
            <returns>List of mapped objects</returns>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoQuery.QueryByNamedParam``1(System.Collections.IDictionary)">
            <summary>
            Convenient method to execute query with parameters but without calling context.
            </summary>
            <typeparam name="T">The type parameter for the returned collection</typeparam>
            <param name="inParams">The parameters for the query.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoQuery.QueryByNamedParam``1(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Convenient method to execute query with parameters and access to output parameter values.
            </summary>
            <typeparam name="T">The type parameter for the returned collection</typeparam>
            <param name="inParams">The parameters for the query.</param>
            <param name="outParams">The returned output parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.Objects.Generic.AdoQuery.QueryByNamedParam``1(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Central execution method.  All named parameter execution goes through this method.
            </summary>
            <typeparam name="T">the type parameter for the returned collection</typeparam>
            <param name="inParams">The in params.</param>
            <param name="outParams">The out params.</param>
            <param name="callingContext">The calling context.</param>
            <returns></returns>
        </member>
        <member name="T:Spring.Data.Objects.Generic.MappingAdoQuery">
            <summary>
            Reusable query in which concrete subclasses must implement the
            MapRow method to map each row of a single result set into an 
            object.
            </summary>
            <remarks>
            Simplifies MappingSqlQueryWithContext API by dropping parameters and
            context. Most subclasses won't care about parameters. If you don't use
            contextual information, subclass this instead of MappingSqlQueryWithContext.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Objects.Generic.MappingAdoQueryWithContext">
            <summary>
            Reusable query in which concrete subclasses must implement the
            abstract MapRow method to map each row of a single result set into an 
            object.
            </summary>
            <remarks>The MapRow method is also passed the input parameters and
            a dictionary to provide the method with calling context information
            (if necessary).  If you do not need these additional parameters, use
            the subclass MappingAdoQuery.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Objects.Generic.MappingAdoQueryWithContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.Generic.MappingAdoQueryWithContext"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.Generic.MappingAdoQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.Generic.MappingAdoQuery"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Objects.Generic.StoredProcedure">
            <summary>
            A superclass for object based abstractions of RDBMS stored procedures. 
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Objects.Generic.StoredProcedure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.Generic.StoredProcedure"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.Generic.StoredProcedure.ExecuteScalarByNamedParam(System.Collections.IDictionary)">
            <summary>
            Execute the stored procedure using 'ExecuteScalar'
            </summary>
            <param name="inParams">Value of input parameters.</param>
            <returns>Dictionary with any named output parameters and the value of the
            scalar under the key "scalar".</returns>
        </member>
        <member name="T:Spring.Data.Objects.AdoNonQuery">
            <summary>
            Encapsulate Command.ExecuteNonQuery operations within a reusable class. 
            </summary>
            <author>Mark Pollack (.NET)</author>
            <remarks>The default CommandType is CommandType.Text</remarks>
        </member>
        <member name="T:Spring.Data.Objects.AdoOperation">
            <summary>
            A "AdoOperation" is a thread-safe, reusable object representing 
            an ADO Query, "NonQuery" (Create, Update, Delete), stored procedure
            or DataSet manipualtions.
            </summary>
            <remarks>
            Subclasses should set Command Text and add parameters before invoking
            Compile().  The order in which parameters are added is generally
            significant when using providers or functionality that do not use
            named parameters.
            
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Objects.AdoOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoOperation"/> class.
            </summary>
            <remarks>A DbProvider, SQL and any parameters must be supplied
            before invoking the compile method and using this object.       
            </remarks>
        </member>
        <member name="M:Spring.Data.Objects.AdoOperation.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoOperation"/> class.
            </summary>
            <remarks>A DbProvider, SQL and any parameters must be supplied
            before invoking the compile method and using this object.       
            </remarks>
            <param name="provider">Database provider to use.</param>
        </member>
        <member name="M:Spring.Data.Objects.AdoOperation.#ctor(Spring.Data.Common.IDbProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoOperation"/> class.
            </summary>
            <remarks>A DbProvider, SQL and any parameters must be supplied
            before invoking the compile method and using this object.       
            </remarks>
            <param name="provider">Database provider to use.</param>
            <param name="sql">SQL query or stored procedure name.</param>
        </member>
        <member name="M:Spring.Data.Objects.AdoOperation.Compile">
            <summary>
            Compiles this operation.  Ignores subsequent attempts to compile.
            </summary>
        </member>
        <member name="P:Spring.Data.Objects.AdoOperation.AdoTemplate">
            <summary>
            Gets or sets the ADO template.
            </summary>
            <value>The ADO template.</value>
        </member>
        <member name="P:Spring.Data.Objects.AdoOperation.DbProvider">
            <summary>
            Gets or sets the db provider.
            </summary>
            <value>The db provider.</value>
        </member>
        <member name="P:Spring.Data.Objects.AdoOperation.CommandTimeout">
            <summary>
            Sets the command timeout for IDbCommands that this AdoTemplate executes.
            </summary>
            <remarks>Default is 0, indicating to use the database provider's default.
            Any timeout specified here will be overridden by the remaining 
            transaction timeout when executing within a transaction that has a
            timeout specified at the transaction level. 
            </remarks>
            <value>The command timeout.</value>
        </member>
        <member name="M:Spring.Data.Objects.AdoNonQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoNonQuery"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.AdoNonQuery.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoNonQuery"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.AdoNonQuery.#ctor(Spring.Data.Common.IDbProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoNonQuery"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Objects.AdoQuery">
            <summary>
            Place together the mapping logic to a plain .NET object
            for one result set within the same class.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Objects.AdoQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoQuery"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Objects.AdoScalar">
            <summary>
            Encapsulate Command ExecuteScalar operations within a reusable class. 
            </summary>
            <remarks>The default CommandType is CommandType.Text</remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Objects.AdoScalar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoScalar"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.AdoScalar.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoScalar"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.AdoScalar.#ctor(Spring.Data.Common.IDbProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.AdoScalar"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Objects.MappingAdoQuery">
            <summary>
            Reusable query in which concrete subclasses must implement the
            MapRow method to map each row of a single result set into an 
            object.
            </summary>
            <remarks>
            Simplifies MappingAdoQueryWithContext API by dropping parameters and
            context. Most subclasses won't care about parameters. If you don't use
            contextual information, subclass this instead of MappingSqlQueryWithContext.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Objects.MappingAdoQueryWithContext">
            <summary>
            Reusable query in which concrete subclasses must implement the
            MapRow method to map each row of a single result set into an 
            object.
            </summary>
            <remarks>The MapRow method is also passed the input parameters and
            a dictionary to provide the method with calling context information
            (if necessary).  If you do not need these additional parameters, use
            the subclass MappingAdoQuery.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Objects.MappingAdoQueryWithContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.MappingAdoQueryWithContext"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.IRowMapper">
            <summary>
            Callback to process each row of data in a result set to an object.
            </summary>
            <remarks>Implementations of this interface perform the actual work
            of mapping rows, but don't need worry about managing
            ADO.NET resources, such as closing the reader.
            <p>
            Typically used for AdoTemplate's query methods (with RowMapperResultSetExtractor
            adapters).  RowMapper objects are typically stateless and thus
            reusable; they are ideal choices for implementing row-mapping logic in a single
            place.
            </p>
            <p>Alternatively, consider subclassing MappingSqlQuery from the Spring.Data.Object
            namespace:  Instead of working with separate AdoTemplate and RowMapper objects, 
            you can have executable query objects (containing row-mapping logic) there.
            </p>
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.IRowMapper.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Implementations must implement this method to map each row of data in the
            result set (DataReader).  This method should not call Next() on the 
            DataReader; it should only extract the values of the current row.
            </summary>
            <param name="reader">The IDataReader to map (pre-initialized for the current row)</param>
            <param name="rowNum">The number of the current row.</param>
            <returns>The result object for the current row.</returns>
        </member>
        <member name="M:Spring.Data.Objects.MappingAdoQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.MappingAdoQuery"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.Objects.StoredProcedure">
            <summary>
            A superclass for object based abstractions of RDBMS stored procedures. 
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Objects.StoredProcedure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.StoredProcedure"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Objects.StoredProcedure.#ctor(Spring.Data.Common.IDbProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Objects.StoredProcedure"/> class.
            </summary>
            <param name="dbProvider">The db provider.</param>
            <param name="procedureName">Name of the stored procedure.</param>
        </member>
        <member name="M:Spring.Data.Objects.StoredProcedure.ExecuteScalarByNamedParam(System.Collections.IDictionary)">
            <summary>
            Execute the stored procedure using 'ExecuteScalar'
            </summary>
            <param name="inParams">Value of input parameters.</param>
            <returns>Dictionary with any named output parameters and the value of the
            scalar under the key "scalar".</returns>
        </member>
        <member name="T:Spring.Data.Support.AdoUtils">
            <summary>
            Summary description for AdoUtils.
            </summary>
        </member>
        <member name="F:Spring.Data.Support.AdoUtils.CONNECTION_SYNCHRONIZATION_ORDER">
            <summary>
            Order value for TransactionSynchronization objects that clean up
            ADO.NET Connections.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.AdoUtils.DisposeCommand(System.Data.IDbCommand)">
            <summary>
            Property dispose of the command.  Useful in finally or catch blocks.
            </summary>
            <param name="command">command to dispose</param>
        </member>
        <member name="T:Spring.Data.Support.ConnectionHolder">
            <summary>
            Connection holder, wrapping a ADO.NET connection and transaction.
            </summary>
            <remarks>AdoTransactionManager binds instances of this class to the
            thread for a given DbProvider.</remarks>
            <author>Jurgen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.Support.ResourceHolderSupport">
            <summary>
            Convenient base class for resource holders.
            </summary>
            <remarks>
            <p>
            Features rollback-only support transactions. Can expire after a certain number of
            seconds or milliseconds, to determine transactional timeouts.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Support.ResourceHolderSupport.Clear">
            <summary>
            Clear the transaction state of this resource holder.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Support.ResourceHolderSupport.Requested">
            <summary>
            Increase the reference count by one because the holder has been requested.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Support.ResourceHolderSupport.Released">
            <summary>
            Decrease the reference count by one because the holder has been released.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.SynchronizedWithTransaction">
            <summary>
            Mark the resource as synchronized with a transaction.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.RollbackOnly">
            <summary>
            Get or set whether the resource is synchronized with a transaction.
            </summary>
            <value><c>true</c> if synchronized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.Deadline">
            <summary>
            Return the expiration deadline of this object.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.HasTimeout">
            <summary>
            Return whether this object has an associated timeout.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.TimeToLiveInSeconds">
            <summary>
            Return the time to live for this object in seconds.
            </summary>
            <remarks>
            <p>
            Rounds up eagerly, e.g. '9.00001' to '10'.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If no deadline has been set.
            </exception>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.TimeToLiveInMilliseconds">
            <summary>
            Return the time to live for this object in milliseconds.
            </summary>
            <exception cref="T:System.ArgumentException">
            If no deadline has been set.
            </exception>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.TimeoutInMillis">
            <summary>
            Sets the timeout for this object in milliseconds.
            </summary>
            <value>Number of milliseconds until expiration.</value>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.TimeoutInSeconds">
            <summary>
            Sets the timeout for this object in seconds.
            </summary>
            <value>Number of seconds until expiration.</value>
        </member>
        <member name="P:Spring.Transaction.Support.ResourceHolderSupport.IsOpen">
            <summary>
            Return wheterh there are still open references to this holder
            </summary>
        </member>
        <member name="M:Spring.Data.Support.ConnectionHolder.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Create a new ConnectionHolder
            </summary>
            <param name="conn">The connection to hold</param>
            <param name="transaction">The transaction to hold</param>
        </member>
        <member name="T:Spring.Data.Support.ConnectionSynchronization">
            <summary>
            Callback for resource cleanup at end of transaction.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Support.TransactionSynchronizationAdapter">
            <summary>
            Adapter for the <see cref="T:Spring.Transaction.Support.ITransactionSynchronization"/>
            interface.
            </summary>
            <remarks>
            Contains empty implementations of all interface methods, for easy overriding of
            single methods.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.Support.ITransactionSynchronization">
            <summary>
            Interface for transaction synchronization callbacks.
            </summary>
            <remarks>
            Supported by <see cref="T:Spring.Transaction.Support.AbstractPlatformTransactionManager"/>.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionSynchronization.Suspend">
            <summary>
            Suspend this synchronization. 
            </summary>
            <remarks>
            <p>
            Supposed to unbind resources from
            <see cref="T:Spring.Transaction.Support.TransactionSynchronizationManager"/>
            if managing any.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionSynchronization.Resume">
            <summary>
            Resume this synchronization.
            </summary>
            <remarks>
            <p>
            Supposed to rebind resources from
            <see cref="T:Spring.Transaction.Support.TransactionSynchronizationManager"/>
            if managing any.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCommit(System.Boolean)">
            <summary>
            Invoked before transaction commit (before
            <see cref="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCompletion"/>)
            Can e.g. flush transactional O/R Mapping sessions to the database
            </summary>
            <remarks>
            <para>
            This callback does not mean that the transaction will actually be
            commited.  A rollback decision can still occur after this method
            has been called.  This callback is rather meant to perform work 
            that's only relevant if a commit still has a chance
            to happen, such as flushing SQL statements to the database.
            </para>
            <para>
            Note that exceptions will get propagated to the commit caller and cause a
            rollback of the transaction.</para>
            <para>
            (note: do not throw TransactionException subclasses here!)
            </para>
            </remarks>
            <param name="readOnly">
            If the transaction is defined as a read-only transaction.
            </param>
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionSynchronization.AfterCommit">
            <summary>
            Invoked after transaction commit.
            </summary>
            <remarks>Can e.g. commit further operations that are supposed to follow on
            a successful commit of the main transaction.
            Throws exception in case of errors; will be propagated to the caller.
            Note: To not throw TransactionExeption sbuclasses here!
            </remarks>
            
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCompletion">
            <summary>
            Invoked before transaction commit/rollback (after
            <see cref="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCommit(System.Boolean)"/>,
            even if
            <see cref="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCommit(System.Boolean)"/>
            threw an exception).
            </summary>
            <remarks>
            <p>
            Can e.g. perform resource cleanup.
            </p>
            <p>
            Note that exceptions will get propagated to the commit caller
            and cause a rollback of the transaction.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionSynchronization.AfterCompletion(Spring.Transaction.Support.TransactionSynchronizationStatus)">
            <summary>
            Invoked after transaction commit/rollback.
            </summary>
            <param name="status">
            Status according to <see cref="T:Spring.Transaction.Support.TransactionSynchronizationStatus"/>
            </param>
            <remarks>
            Can e.g. perform resource cleanup, in this case after transaction completion.
            <p>
            Note that exceptions will get propagated to the commit or rollback
            caller, although they will not influence the outcome of the transaction.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationAdapter.Suspend">
            <summary>
            Suspend this synchronization. 
            </summary>
            <remarks>
            <p>
            Supposed to unbind resources from
            <see cref="T:Spring.Transaction.Support.TransactionSynchronizationManager"/>
            if managing any.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationAdapter.Resume">
            <summary>
            Resume this synchronization.
            </summary>
            <remarks>
            <p>
            Supposed to unbind resources from
            <see cref="T:Spring.Transaction.Support.TransactionSynchronizationManager"/>
            if managing any.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationAdapter.BeforeCommit(System.Boolean)">
            <summary>
            Invoked before transaction commit (before
            <see cref="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCompletion"/>)
            </summary>
            <param name="readOnly">
            If the transaction is defined as a read-only transaction.
            </param>
            <remarks>
            <p>
            Can flush transactional sessions to the database.
            </p>
            <p>
            Note that exceptions will get propagated to the commit caller and 
            cause a rollback of the transaction.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationAdapter.AfterCommit">
            <summary>
            Invoked after transaction commit.
            </summary>
            <remarks>Can e.g. commit further operations that are supposed to follow on
            a successful commit of the main transaction.
            Throws exception in case of errors; will be propagated to the caller.
            Note: To not throw TransactionExeption sbuclasses here!
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationAdapter.BeforeCompletion">
            <summary>
            Invoked before transaction commit/rollback (after
            <see cref="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCommit(System.Boolean)"/>,
            even if
            <see cref="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCommit(System.Boolean)"/>
            threw an exception).
            </summary>
            <remarks>
            <p>
            Can e.g. perform resource cleanup.
            </p>
            <p>
            Note that exceptions will get propagated to the commit caller
            and cause a rollback of the transaction.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationAdapter.AfterCompletion(Spring.Transaction.Support.TransactionSynchronizationStatus)">
            <summary>
            Invoked after transaction commit/rollback.
            </summary>
            <param name="status">
            Status according to <see cref="T:Spring.Transaction.Support.TransactionSynchronizationStatus"/>
            </param>
            <remarks>
            Can e.g. perform resource cleanup, in this case after transaction completion.
            <p>
            Note that exceptions will get propagated to the commit or rollback
            caller, although they will not influence the outcome of the transaction.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationAdapter.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj. 
            </returns>
            
            <param name="obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Data.Support.ConnectionSynchronization.#ctor(Spring.Data.Support.ConnectionHolder,Spring.Data.Common.IDbProvider)">
            <summary>
            Create a new instance.
            </summary>
            <param name="connHolder"></param>
            <param name="provider"></param>
        </member>
        <member name="M:Spring.Data.Support.ConnectionSynchronization.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            The value of the order property.
            </returns>
        </member>
        <member name="M:Spring.Data.Support.ConnectionSynchronization.Suspend">
            <summary>
            Suspend this synchronization.
            </summary>
            <remarks>
            	<p>
            Supposed to unbind resources from
            <see cref="T:Spring.Transaction.Support.TransactionSynchronizationManager"/>
            if managing any.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Data.Support.ConnectionSynchronization.Resume">
            <summary>
            Resume this synchronization.
            </summary>
            <remarks>
            	<p>
            Supposed to unbind resources from
            <see cref="T:Spring.Transaction.Support.TransactionSynchronizationManager"/>
            if managing any.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Data.Support.ConnectionSynchronization.BeforeCompletion">
            <summary>
            Invoked before transaction commit/rollback (after
            <see cref="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCommit(System.Boolean)"/>,
            even if
            <see cref="M:Spring.Transaction.Support.ITransactionSynchronization.BeforeCommit(System.Boolean)"/>
            threw an exception).
            </summary>
            <remarks>
            	<p>
            Can e.g. perform resource cleanup.
            </p>
            	<p>
            Note that exceptions will get propagated to the commit caller
            and cause a rollback of the transaction.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Data.Support.ConnectionSynchronization.AfterCompletion(Spring.Transaction.Support.TransactionSynchronizationStatus)">
            <summary>
            Invoked after transaction commit/rollback.
            </summary>
            <param name="status">Status according to <see cref="T:Spring.Transaction.Support.TransactionSynchronizationStatus"/></param>
            <remarks>
            Can e.g. perform resource cleanup, in this case after transaction completion.
            <p>
            Note that exceptions will get propagated to the commit or rollback
            caller, although they will not influence the outcome of the transaction.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Data.Support.ConnectionTxPair">
            <summary>
            A simple holder for the current Connection/Transaction objects
            to use within a given AdoTemplate Execute operation.  Used internally.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.ConnectionTxPair.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.ConnectionTxPair"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="P:Spring.Data.Support.ConnectionTxPair.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:Spring.Data.Support.ConnectionTxPair.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="T:Spring.Data.Support.ConnectionUtils">
            <summary>
            Summary description for DbProviderUtils.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.ConnectionUtils.DisposeConnection(System.Data.IDbConnection,Spring.Data.Common.IDbProvider)">
            <summary>
            Dispose of the given Connection, created via the given IDbProvider,
            if it is not managed externally (that is, not bound to the thread).
            </summary>
            <param name="conn">The connection to close if necessary.  If
            this is null the call will be ignored. </param>
            <param name="dbProvider">The IDbProvider the connection came from</param>
        </member>
        <member name="M:Spring.Data.Support.ConnectionUtils.GetConnectionTxPair(Spring.Data.Common.IDbProvider)">
            <summary>
            Get a ADO.NET Connection/Transaction Pair for the given IDbProvider.
            Changes any exception into the Spring hierarchy of generic data access 
            exceptions, simplifying calling code and making any exception that is 
            thrown more meaningful.
            </summary>
            <remarks>
            Is aware of a corresponding Connection/Transaction bound to the current thread, for example
            when using AdoPlatformTransactionManager. Will bind a IDbConnection to the thread
            if transaction synchronization is active
            </remarks>
            <param name="provider">The provider.</param>
            <returns>A Connection/Transaction pair.</returns>
        </member>
        <member name="M:Spring.Data.Support.ConnectionUtils.DoGetConnection(Spring.Data.Common.IDbProvider)">
            <summary>
            Get a ADO.NET Connection/Transaction Pair for the given IDbProvider.
            Same as <see cref="M:Spring.Data.Support.ConnectionUtils.GetConnection(Spring.Data.Common.IDbProvider)"/> but throwing original provider
            exception.
            </summary>
            <remarks>
            Is aware of a corresponding Connection/Transaction bound to the current thread, for example
            when using AdoPlatformTransactionManager. Will bind a IDbConnection to the thread
            if transaction synchronization is active
            </remarks>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.Support.ConnectionUtils.GetConnection(Spring.Data.Common.IDbProvider)">
            <summary>
            Do the connection mgmt.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.Support.ConnectionUtils.ApplyTransactionTimeout(System.Data.IDbCommand,Spring.Data.Common.IDbProvider)">
            <summary>
            Applies the current transaction timeout, if any, to the given ADO.NET IDbCommand object.
            </summary>
            <param name="command">The command.</param>
            <param name="dbProvider">The db provider.</param>
        </member>
        <member name="M:Spring.Data.Support.ConnectionUtils.ApplyTransactionTimeout(System.Data.IDbCommand,Spring.Data.Common.IDbProvider,System.Int32)">
            <summary>
            Applies the specified timeout - overridden by the current transaction timeout, if any, to to the
            given ADO.NET IDb command object.
            </summary>
            <param name="command">The command.</param>
            <param name="dbProvider">The db provider the command was obtained from.</param>
            <param name="timeout">The timeout to apply (or 0 for no timeout outside of a transaction.</param>
        </member>
        <member name="T:Spring.Data.Support.DefaultServiceDomainAdapter">
            <summary>
            Implementation that delegates to ServiceDomain and ContextUtil for all functionality.
            </summary>
            <remarks>Introduced for purposes of unit testing.</remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Support.IServiceDomainAdapter">
            <summary>
            Provides the necessary transactional state and operations for ServiceDomainTransactionManager to
            work with ServiceDomain and ContextUtil.
            </summary>
            <remarks>Introduced for purposes of unit testing.</remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Support.IServiceDomainAdapter.Enter(Spring.Data.Support.SimpleServiceConfig)">
            <summary>
            Creates the context specified by the ServiceConfig object and pushes it onto the context stack to 
            become the current context. 
            </summary>
            <param name="config">A ServiceConfig that contains the configuration information for the services to be used within the enclosed code.</param>
        </member>
        <member name="M:Spring.Data.Support.IServiceDomainAdapter.Leave">
            <summary>
            Leaves this ServiceDomain. The current context is then popped from the context stack, and the 
            context that was running when Enter was called becomes the current context. 
            </summary>
            <returns>One of the TransactionStatus values</returns>
        </member>
        <member name="M:Spring.Data.Support.IServiceDomainAdapter.SetComplete">
            <summary>
            Sets the consistent bit and the done bit to true in the COM+ context
            </summary>
        </member>
        <member name="M:Spring.Data.Support.IServiceDomainAdapter.SetAbort">
            <summary>
            Sets the consistent bit to false and the done bit to true in the COM+ context. 
            </summary>
        </member>
        <member name="P:Spring.Data.Support.IServiceDomainAdapter.MyTransactionVote">
            <summary>
            Gets or sets the consistent bit in the COM+ context.
            </summary>
            <value>My transaction vote.</value>
        </member>
        <member name="P:Spring.Data.Support.IServiceDomainAdapter.IsInTransaction">
            <summary>
             Gets a value indicating whether the current context is transactional.
            </summary>
            <value>
            	<c>true</c> if this instance is existing transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spring.Data.Support.DefaultServiceDomainAdapter.Enter(Spring.Data.Support.SimpleServiceConfig)">
            <summary>
            Creates the context specified by the ServiceConfig object and pushes it onto the context stack to
            become the current context.
            </summary>
            <param name="config">A ServiceConfig that contains the configuration information for the services to be used within the enclosed code.</param>
        </member>
        <member name="M:Spring.Data.Support.DefaultServiceDomainAdapter.Leave">
            <summary>
            Leaves this ServiceDomain. The current context is then popped from the context stack, and the
            context that was running when Enter was called becomes the current context.
            </summary>
            <returns>One of the TransactionStatus values</returns>
        </member>
        <member name="M:Spring.Data.Support.DefaultServiceDomainAdapter.SetComplete">
            <summary>
            Sets the consistent bit and the done bit to true in the COM+ context
            </summary>
        </member>
        <member name="M:Spring.Data.Support.DefaultServiceDomainAdapter.SetAbort">
            <summary>
            Sets the consistent bit to false and the done bit to true in the COM+ context.
            </summary>
        </member>
        <member name="P:Spring.Data.Support.DefaultServiceDomainAdapter.MyTransactionVote">
            <summary>
            Gets or sets the consistent bit in the COM+ context.
            </summary>
            <value>My transaction vote.</value>
        </member>
        <member name="P:Spring.Data.Support.DefaultServiceDomainAdapter.IsInTransaction">
            <summary>
            Gets a value indicating whether the current context is transactional.
            </summary>
            <value>
            	<c>true</c> if this instance is existing transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spring.Data.Support.DefaultTransactionScopeAdapter">
            <summary>
            Uses <see cref="T:System.Transactions.TransactionScope"/> and System.Transactions.Transaction.Current to provide
            necessary state and operations to TxScopeTransactionManager.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Support.ITransactionScopeAdapter">
            <summary>
            Provides the necessary transactional state and operations for TxScopeTransactionManager to
            work with TransactionScope and Transaction.Current.
            </summary>
            <remarks>Introduced for purposes of unit testing.</remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Support.ITransactionScopeAdapter.CreateTransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
            <summary>
            Creates the transaction scope.
            </summary>
            <param name="txScopeOption">The tx scope option.</param>
            <param name="txOptions">The tx options.</param>
            <param name="interopOption">The interop option.</param>
        </member>
        <member name="M:Spring.Data.Support.ITransactionScopeAdapter.Complete">
            <summary>
            Call Complete() on the TransactionScope object created by this instance.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.ITransactionScopeAdapter.Dispose">
            <summary>
            Call Disponse() on the TransactionScope object created by this instance.
            </summary>
        </member>
        <member name="P:Spring.Data.Support.ITransactionScopeAdapter.IsExistingTransaction">
            <summary>
            Gets a value indicating whether there is a new transaction or an existing transaction.
            </summary>
            <value>
            	<c>true</c> if this instance is existing transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Data.Support.ITransactionScopeAdapter.RollbackOnly">
            <summary>
            Gets a value indicating whether rollback only has been called (i.e. Rollback() on the
            Transaction object) and therefore voting that the transaction will be aborted.
            </summary>
            <value><c>true</c> if rollback only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spring.Data.Support.DefaultTransactionScopeAdapter.Complete">
            <summary>
            Call Complete() on the TransactionScope object created by this instance.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.DefaultTransactionScopeAdapter.Dispose">
            <summary>
            Call Disponse() on the TransactionScope object created by this instance.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.DefaultTransactionScopeAdapter.CreateTransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
            <summary>
            Creates the transaction scope.
            </summary>
            <param name="txScopeOption">The tx scope option.</param>
            <param name="txOptions">The tx options.</param>
            <param name="interopOption">The interop option.</param>
        </member>
        <member name="P:Spring.Data.Support.DefaultTransactionScopeAdapter.IsExistingTransaction">
            <summary>
            Gets a value indicating whether there is a new transaction or an existing transaction.
            </summary>
            <value>
            	<c>true</c> if this instance is existing transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Data.Support.DefaultTransactionScopeAdapter.RollbackOnly">
            <summary>
            Gets a value indicating whether rollback only has been called (i.e. Rollback() on the
            Transaction object) and therefore voting that the transaction will be aborted.
            </summary>
            <value><c>true</c> if rollback only; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spring.Data.Support.ErrorCodeExceptionTranslator">
            <summary>
            Implementation of IAdoExceptionTranslator that analyzes provider specific
            error codes and translates into the DAO exception hierarchy.
            </summary>
            <remarks>This class loads the obtains error codes from
            the IDbProvider metadata property ErrorCodes  
            which defines error code mappings for various providers.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Support.IAdoExceptionTranslator">
            <summary>
            Interface to be implemented by classes that can translate between properietary SQL exceptions
            and Spring.NET's data access strategy-agnostic <see cref="T:Spring.Dao.DataAccessException"/>.
            </summary>
            <remarks>
             <p>
             Implementations can be generic (for example, ADO.NET Exceptions) or proprietary (for example,
             using SQL Server or Oracle error codes) for greater precision.
             </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack</author> 
        </member>
        <member name="M:Spring.Data.Support.IAdoExceptionTranslator.Translate(System.String,System.String,System.Exception)">
            <summary>
            Translate the given <see cref="T:System.SystemException"/> into a generic data access exception.
            </summary>
            <param name="task">A readable string describing the task being attempted.</param>
            <param name="sql">The SQL query or update that caused the problem. May be null.</param>
            <param name="exception">
            The <see cref="T:System.Exception"/> encountered by the ADO.NET implementation.
            </param>
            <returns>
            A <see cref="T:Spring.Dao.DataAccessException"/> appropriate for the supplied
            <paramref name="exception"/>.
            </returns>
        </member>
        <member name="F:Spring.Data.Support.ErrorCodeExceptionTranslator.log">
            <summary>
            The shared log instance for this class (and derived classes). 
            </summary>
        </member>
        <member name="M:Spring.Data.Support.ErrorCodeExceptionTranslator.#ctor(Spring.Data.Common.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.ErrorCodeExceptionTranslator"/> class.
            </summary>
            <param name="provider">The data provider.</param>
        </member>
        <member name="M:Spring.Data.Support.ErrorCodeExceptionTranslator.#ctor(Spring.Data.Common.IDbProvider,Spring.Data.Common.ErrorCodes)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.ErrorCodeExceptionTranslator"/> class.
            </summary>
            <param name="provider">The data provider.</param>
            <param name="ec">The error code collection.</param>
        </member>
        <member name="M:Spring.Data.Support.ErrorCodeExceptionTranslator.Translate(System.String,System.String,System.Exception)">
            <summary>
            Translate the given <see cref="T:System.SystemException"/> into a generic data access exception.
            </summary>
            <param name="task">A readable string describing the task being attempted.</param>
            <param name="sql">The SQL query or update that caused the problem. May be null.</param>
            <param name="exception">
            The <see cref="T:System.Exception"/> encountered by the ADO.NET implementation.
            </param>
            <returns>
            A <see cref="T:Spring.Dao.DataAccessException"/> appropriate for the supplied
            <paramref name="exception"/>.
            </returns>
        </member>
        <member name="M:Spring.Data.Support.ErrorCodeExceptionTranslator.DoTranslate(System.String,System.String,System.String,System.Exception)">
            <summary>
            Template method for actually translating the given exception.
            given <see cref="T:System.SystemException"/> into a generic data access exception.
            </summary>
            <param name="task">A readable string describing the task being attempted.</param>
            <param name="sql">The SQL query or update that caused the problem. May be null.</param>
            <param name="errorCode">The error code.</param>
            <param name="exception">The <see cref="T:System.Exception"/> encountered by the ADO.NET implementation.</param>
            <returns>
            A <see cref="T:Spring.Dao.DataAccessException"/> appropriate for the supplied
            <paramref name="exception"/>.
            </returns>
            <remarks>
            The passed-in arguments will have been pre-checked.  furthermore, this method is allowed to
            return <code>null</code> to indicate that no exception match has been found and that
            fallback translation should kick in.
            </remarks>
        </member>
        <member name="M:Spring.Data.Support.ErrorCodeExceptionTranslator.TranslateException(System.String,System.String,System.String,System.Exception)">
            <summary>
            Subclasses can override this method to attempt a custom mapping from a data access Exception
            to DataAccessException.
            </summary>
            <param name="task">Readable text describing the task being attempted.</param>
            <param name="sql">SQL query or update that caused the problem. May be <code>null</code>.</param>
            <param name="errorCode">The error code extracted from the generic data access exception for
            a particular provider.</param>
            <param name="exception">The exception thrown from a data access operation.</param>
            <returns>
            null if no custom translation was possible, otherwise a DataAccessException
            resulting from custom translation.  This exception should include the exception parameter
            as a nested root cause. This implementation always returns null, meaning that
            the translator always falls back to the default error codes.
            </returns>
        </member>
        <member name="M:Spring.Data.Support.ErrorCodeExceptionTranslator.BuildMessage(System.String,System.String,System.Exception)">
            <summary>
            Builds the message.
            </summary>
            <param name="task">The task.</param>
            <param name="sql">The SQL.</param>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Data.Support.ErrorCodeExceptionTranslator.IsValidDataAccessException(System.Exception)">
            <summary>
            Determines whether the specified exception is valid data access exception.
            </summary>
            <param name="e">The exception.</param>
            <returns>
            	<c>true</c> if is valid data access exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Data.Support.ErrorCodeExceptionTranslator.LogTranslation(System.String,System.String,System.String,System.Exception,System.Boolean)">
            <summary>
            Logs the translation.
            </summary>
            <param name="task">The task.</param>
            <param name="sql">The SQL.</param>
            <param name="errorCode">The error code.</param>
            <param name="exception">The exception.</param>
            <param name="b">if set to <c>true</c> [b].</param>
        </member>
        <member name="P:Spring.Data.Support.ErrorCodeExceptionTranslator.DbProvider">
            <summary>
            Sets the db provider.
            </summary>
            <value>The db provider.</value>
        </member>
        <member name="P:Spring.Data.Support.ErrorCodeExceptionTranslator.ErrorCodes">
            <summary>
            Gets the error codes for the provider
            </summary>
            <value>The error codes.</value>
        </member>
        <member name="P:Spring.Data.Support.ErrorCodeExceptionTranslator.FallbackTranslator">
            <summary>
            Gets or sets the fallback translator to use in case error code based translation
            fails.
            </summary>
            <value>The fallback translator.</value>
        </member>
        <member name="T:Spring.Data.Support.FallbackExceptionTranslator">
            <summary>
            Translates all exceptions to an UncategorizedAdoException.
            </summary>
            <remarks>
            This exception translator used when an exception is thrown using the
            "primary" implementation of IAdoExceptionTranslator, i.e. AdoExceptionTranslator.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Support.FallbackExceptionTranslator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.FallbackExceptionTranslator"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.FallbackExceptionTranslator.Translate(System.String,System.String,System.Exception)">
            <summary>
            Translate the given <see cref="T:System.SystemException"/> into a generic data access exception.
            </summary>
            <param name="task">A readable string describing the task being attempted.</param>
            <param name="sql">The SQL query or update that caused the problem. May be null.</param>
            <param name="exception">
            The <see cref="T:System.Exception"/> encountered by the ADO.NET implementation.
            </param>
            <returns>
            A <see cref="T:Spring.Dao.DataAccessException"/> appropriate for the supplied
            <paramref name="exception"/>.
            </returns>
        </member>
        <member name="T:Spring.Data.Support.NamedResultSetProcessor">
            <summary>
            Provides a name to a ResultSetProcessor for use with AdoOperation subclasses
            such as StoredProcedure.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.Support.NamedResultSetProcessor.#ctor(System.String,Spring.Data.IRowCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.NamedResultSetProcessor"/> class with a
            IRowCallback instance
            </summary>
            <param name="name">The name of the associated row callback for use with output 
            result set mappers.</param>
            <param name="rowcallback">A row callback instance.</param>
        </member>
        <member name="M:Spring.Data.Support.NamedResultSetProcessor.#ctor(System.String,Spring.Data.IRowMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.NamedResultSetProcessor"/> class with a
            IRowMapper instance
            </summary>
            <param name="name">The name of the associated row mapper.</param>
            <param name="rowMapper">A IRowMapper instance.</param>
        </member>
        <member name="M:Spring.Data.Support.NamedResultSetProcessor.#ctor(System.String,Spring.Data.IResultSetExtractor)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.NamedResultSetProcessor"/> class with a
            IResultSetExtractor instance
            </summary>
            <param name="name">The name of the associated result set extractor.</param>
            <param name="resultSetExtractor">A IResultSetExtractor instance.</param>
        </member>
        <member name="T:Spring.Data.Support.NullMappingDataReader">
            <summary>
            A data reader implementation that mapps DBNull values to sensible defaults.
            </summary>
            <remarks>IDataRecord methods are virtual.</remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.IDataReaderWrapper">
            <summary>
            Custom data reader implementations often delegate to an underlying
            instance.  This interface captures that relationship for reuse in
            the framework.
            </summary>
            <remarks>Implementations will typically add behavior to standard IDataReader methods,
            for example, by providing default values for DbNull values.  
            See <see cref="T:Spring.Data.Support.NullMappingDataReader"/> as an example.
             </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="P:Spring.Data.IDataReaderWrapper.WrappedReader">
            <summary>
            The underlying reader implementation to delegate to for accessing data 
            from a returned result sets.
            </summary>
            <value>The wrapped reader.</value>
        </member>
        <member name="M:Spring.Data.Support.NullMappingDataReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.NullMappingDataReader"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.NullMappingDataReader.#ctor(System.Data.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.NullMappingDataReader"/> class.
            </summary>
            <param name="dataReader">The data reader to delegate operations to.</param>
        </member>
        <member name="M:Spring.Data.Support.NullMappingDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 32-bit signed integer value of the specified field or 0 if null
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>.</exception>
        </member>
        <member name="M:Spring.Data.Support.NullMappingDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field, null if value equals DBNull.Value
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Object"/> which will contain the field value upon return.
            Returns null if value equals DBNull.Value
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>.
            </exception>
        </member>
        <member name="M:Spring.Data.Support.NullMappingDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            	<see langword="true"/> if the specified field is set to null, otherwise
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. </exception>
        </member>
        <member name="P:Spring.Data.Support.NullMappingDataReader.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.  
            Returns null if value equals DBNull.Value
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Data.Support.NullMappingDataReader.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified i.
            Returns null if value equals DBNull.Value
            </summary>
            <value>Return the object or null if the value equals DBNull.Value</value>
        </member>
        <member name="T:Spring.Data.Support.ParameterUtils">
            <summary>
            Miscellaneous utility methods for manipulating parameter objects. 
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Data.Support.ParameterUtils.log">
            <summary>
            The shared log instance for this class (and derived classes). 
            </summary>
        </member>
        <member name="M:Spring.Data.Support.ParameterUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.ParameterUtils"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.Support.ParameterUtils.CopyParameters(System.Data.IDbCommand,Spring.Data.Common.IDbParameters)">
            <summary>
            Copies the parameters from IDbParameters to the parameter collection in IDbCommand
            </summary>
            <param name="command">The command.</param>
            <param name="springParamCollection">The spring param collection.</param>
        </member>
        <member name="M:Spring.Data.Support.ParameterUtils.CopyParameters(Spring.Data.Common.IDbParameters,System.Data.IDbCommand)">
            <summary>
            Copies the parameters in IDbCommand to IDbParameters
            </summary>
            <param name="springParamCollection">The spring param collection.</param>
            <param name="command">The command.</param>
        </member>
        <member name="T:Spring.Data.Support.RowCallbackResultSetExtractor">
            <summary>
            Adapter to enable use of a IRowCallback inside a ResultSetExtractor.
            </summary>
            <remarks>We don't use it for navigating since this could lead to unpredictable consequences.</remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Data.Support.RowCallbackResultSetExtractor.#ctor(Spring.Data.IRowCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.RowCallbackResultSetExtractor"/> class.
            </summary>
            <param name="rowCallback">The row callback.</param>
        </member>
        <member name="M:Spring.Data.Support.RowCallbackResultSetExtractor.#ctor(Spring.Data.RowCallbackDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.Support.RowCallbackResultSetExtractor"/> class.
            </summary>
            <param name="rowCallbackDelegate">The row callback delegate.</param>
        </member>
        <member name="M:Spring.Data.Support.RowCallbackResultSetExtractor.ExtractData(System.Data.IDataReader)">
            <summary>
            All rows of the data reader are passed to the IRowCallback
            associated with this class.
            </summary>
            <param name="reader">The IDataReader to extract data from.
            Implementations should not close this: it will be closed
            by the AdoTemplate.</param>
            <returns>
            Null is returned since IRowCallback manages its own state.
            </returns>
        </member>
        <member name="T:Spring.Data.Support.SimpleServiceConfig">
            <summary>
            A class that contains the properties of ServiceConfig used by ServiceDomainPlatformTransactionManager.
            </summary>
            <remarks>This is done to enhance testability of the transaction manager since ServiceConfig does not override Equals or Hashcode</remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.Support.TypedDataSetUtils">
             <summary>
             Using reflection on VS.NET 2005 a generated typed dataset, apply the
             connection/transaction pair associated with the current Spring based
             transaction scope.  
             </summary>
             <remarks>This avoids the limitations of using System.Transaction
             based transaction scope for multiple operation on typed datasets withone one
             transaction.  Reflection was used rather than partial classes to provide
             a general solution that can be written and applied once.
             Usage within a DAO method, FindAll() is shown below.  Note: Convenience methods
             to simplify calling syntax maybe provided in the future, it is a trade off on type
             safety calling the typed adapter defined outside the anonymous method as 
             compared to casting inside a "DoInDbAdapter(object dbAdapter) method.
             <code>
             public PrintGroupMappingDataSet FindAll()
             {
            
                PrintGroupMappingTableAdapter adapter = new PrintGroupMappingTableAdapter();
                PrintGroupMappingDataSet printGroupMappingDataSet = new PrintGroupMappingDataSet();
                    
                    
                printGroupMappingDataSet = AdoTemplate.Execute(delegate(IDbCommand command)
                                           {
                                               TypedDataSetUtils.ApplyConnectionAndTx(adapter, command);
                                               adapter.Fill(printGroupMappingDataSet.PrintGroupMapping);
                                               return printGroupMappingDataSet;
                                           }) 
                                           as PrintGroupMappingDataSet;
            
                return printGroupMappingDataSet;
             }
             </code>
             See https://www.code-magazine.com/articleprint.aspx?quickid=0605031 for a 
             more complete discussion.
             
             </remarks>
        </member>
        <member name="M:Spring.Data.Support.TypedDataSetUtils.ApplyConnectionAndTx(System.Object,Spring.Data.Common.IDbProvider)">
            <summary>
            Applies the connection and tx to the provided typed dataset.  The connection and transaction
            used are taken from the Spring's current transactional context.  See ConnectionUtils.GetConnectionTxPair
            for more information
            </summary>
            <param name="typedDataSetAdapter">The typed data set adapter.</param>
            <param name="dbProvider">The db provider.</param>
        </member>
        <member name="M:Spring.Data.Support.TypedDataSetUtils.ApplyConnectionAndTx(System.Object,System.Data.IDbCommand)">
            <summary>
            Applies the connection and tx to the provided typed dataset.
            </summary>
            <remarks>Generated dataset to not inherit from a common base
            class so that we must pass in the generic object type.</remarks>
            <param name="typedDataSetAdapter">The typed data set adapter.</param>
            <param name="sourceCommand">The IDbCommand managed by Spring and set with
            the connection/transaction of the current Spring transaction scope.</param>
        </member>
        <member name="T:Spring.Data.BadSqlGrammarException">
            <summary>
            Exception thrown when SQL specified is invalid.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Data.BadSqlGrammarException.sql">
            <summary>
            SQL that led to the problem
            </summary>
        </member>
        <member name="M:Spring.Data.BadSqlGrammarException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.BadSqlGrammarException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.BadSqlGrammarException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.BadSqlGrammarException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Spring.Data.BadSqlGrammarException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.BadSqlGrammarException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Spring.Data.BadSqlGrammarException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.BadSqlGrammarException"/> class.
            </summary>
            <param name="task">name of the current task.</param>
            <param name="sql">The offending SQL statment</param>
            <param name="ex">The root cause.</param>
        </member>
        <member name="M:Spring.Data.BadSqlGrammarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Data.BadSqlGrammarException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Data.BadSqlGrammarException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
        </member>
        <member name="T:Spring.Data.CannotGetAdoConnectionException">
            <summary>
            Fatal exception thrown when we can't connect to an RDBMS using ADO.NET
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.CannotGetAdoConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.CannotGetAdoConnectionException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.CannotGetAdoConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.CannotGetAdoConnectionException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Spring.Data.CannotGetAdoConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.CannotGetAdoConnectionException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Spring.Data.CannotGetAdoConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Data.CannotGetAdoConnectionException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Data.CommandDelegate">
            <summary>
            Callback delegate for code that operates on a IDbCommand. 
            </summary>
            <param name="command">the ADO.NET command object.</param>
            <remarks>
            <p>Allows you to execute any number of operations
            on a single IDbCommand, for example a single ExecuteScalar
            call or repeated execute calls with varying parameters.
            </p>
            <p>Used internally by AdoTemplate, but also useful for 
            application code.  Note that the passed in IDbCommand
            has been created by the framework and will have its
            Connection property set and the Transaction property
            set based on the transaction context.</p>
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Data.CommandSetterDelegate">
            <summary>
            Callback delegate to set any necessary parameters or other
            properties on the command object.  The CommandType and
            CommandText properties will have already been supplied
            </summary>
            <param name="dbCommand">The database command object.</param>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Data.DuplicateKeyException">
            <summary>
            Exception thrown when an attempt to insert or update data
            results in violation of an primary key or unique constraint.
            Note that this is not necessarily a purely relational concept;
            unique primary keys are required by most database types.
            </summary>
            <author>Thomas Risberg</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Data.DuplicateKeyException.sql">
            <summary>
            SQL that led to the problem
            </summary>
        </member>
        <member name="M:Spring.Data.DuplicateKeyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.DuplicateKeyException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.DuplicateKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.DuplicateKeyException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Spring.Data.DuplicateKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.DuplicateKeyException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Spring.Data.DuplicateKeyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.DuplicateKeyException"/> class.
            </summary>
            <param name="task">name of the current task.</param>
            <param name="sql">The offending SQL statment</param>
            <param name="ex">The root cause.</param>
        </member>
        <member name="M:Spring.Data.DuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Data.DuplicateKeyException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Data.DuplicateKeyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
        </member>
        <member name="P:Spring.Data.DuplicateKeyException.Sql">
            <summary>
            Gets the SQL that caused the exception
            </summary>
            <value>The SQL that caused the exception.</value>
        </member>
        <member name="T:Spring.Data.ICommandSetter">
            <summary>
            Called by the AdoTemplate class to allow implementations
            to set any necessary parameters on the command object.
            The CommandType and CommandText will have already been supplied.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.IDataAdapterSetter">
            <summary>
            Called by the AdoTemplate class to allow implementations
            to set any necessary properties on the DbDataAdapter object.
            </summary>
            <remarks>
            <p>For example, this callback can be used to set the 
            AcceptChangesDuringFill property, register an event handler 
            for the FillErrors event, set update batch sizes if your provider 
            supports such functionality, set the ContinueUpdateOnError property,
            or in .NET 2.0 to set the property AcceptChangesDuringUpdate.
            </p>
            <p>
            Downcast to the appropriate subtype to access vendor specific
            functionality.</p>
            <p>
            The DataAdapter SelectCommand will be already be 
            populated with values for CommandType and Text properties
            along with Connection/Transaction properties based on the
            calling transaction context.
            </p>
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Data.IDataSetFillLifecycleProcessor">
            <summary>
            Lifecycle callback methods that can be registered when
            performing Fill operations with AdoTemplate.
            </summary>
            <remarks>
            <p>
            The methods let you set various properties and invoke
            methods on the DataSet before and after it gets filled by a DataAdapter.  
            For example, EnforceConstraints, BeginLoadData, and EndLoadData
            can be called to optimize the loading of large DataSets with
            many related tables.
            </p>
            <p>Vendors may expose other propriety methods on their DataSet
            implementation, downcast to access this specific functionality.
            </p>
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.IDataSetFillLifecycleProcessor.BeforeFill(System.Data.DataSet,System.Data.ITableMappingCollection)">
            <summary>
            Called before a DataAdapter is used to fill a DataSet 
            the the provided tablename.
            </summary>
            <param name="ds">The DataSet to be filled with a DataTable</param>
            <param name="tableMappingCollection">The table collection to be filled</param>
        </member>
        <member name="M:Spring.Data.IDataSetFillLifecycleProcessor.AfterFill(System.Data.DataSet,System.Data.ITableMappingCollection)">
            <summary>
            Called after a DataAdapter is used to fill a DataSet 
            the the provided tablename.
            </summary>
            <param name="ds">The DataSet to be filled with a DataTable</param>
            <param name="tableMappingCollection">The table collection to be filled</param>
        </member>
        <member name="T:Spring.Data.IDbCommandCreator">
            <summary>
            One of the central callback interfaces used by the AdoTemplate class
            This interface creates a IDbCommand.  Implementations are responsible
            for configuring the created command with command type, command text and
            any necessary parameters. 
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.IDbCommandCreator.CreateDbCommand(Spring.Data.Common.IDbProvider)">
            <summary>
            Creates a IDbCommand.
            </summary>
            <param name="dbProvider">The IDbProvider reference that can be used to create the command in a 
            provider independent manner.  The provider supplied is the same as used in configuration of AdoTemplate.</param>
            <returns></returns>
        </member>
        <member name="T:Spring.Data.IDbCommandCreatorFactory">
            <summary>
            Helper class that can efficiently create multiple IDbCommand
            objects with different parameters based on a SQL statement and a single
            set of parameter declarations.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.IDbCommandCreatorFactory.#ctor(Spring.Data.Common.IDbProvider,System.Data.CommandType,System.String,Spring.Data.Common.IDbParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.IDbCommandCreatorFactory"/> class.
            </summary>
        </member>
        <member name="T:Spring.Data.IDbDataAdapterCreator">
            <summary>
            This interface creates a IDbDataAdapterCommand.  
            Implementations are responsible
            for configuring the created command with appropriate
            select and actions commands along with their parameters.
            </summary>
            <remarks>
            Generally used to to support the DataSet functionality in
            the Spring.Data.Objects namespace.
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Data.IDbDataAdapterCreator.CreateDataAdapter">
            <summary>
            Creates the data adapter.
            </summary>
            <returns>A new IDbDataAdapter instance</returns>
        </member>
        <member name="T:Spring.Data.InvalidResultSetAccessException">
            <summary>
            Exception thrown when a result set has been accessed in an invalid fashion.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Data.InvalidResultSetAccessException.sql">
            <summary>
            SQL that led to the problem
            </summary>
        </member>
        <member name="M:Spring.Data.InvalidResultSetAccessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.InvalidResultSetAccessException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.InvalidResultSetAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.InvalidResultSetAccessException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Spring.Data.InvalidResultSetAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.InvalidResultSetAccessException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Spring.Data.InvalidResultSetAccessException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.InvalidResultSetAccessException"/> class.
            </summary>
            <param name="task">name of the current task.</param>
            <param name="sql">The offending SQL statment</param>
            <param name="ex">The root cause.</param>
        </member>
        <member name="M:Spring.Data.InvalidResultSetAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Data.InvalidResultSetAccessException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Data.InvalidResultSetAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
        </member>
        <member name="P:Spring.Data.InvalidResultSetAccessException.Sql">
            <summary>
            Gets the SQL that caused the exception
            </summary>
            <value>The SQL that caused the exception.</value>
        </member>
        <member name="T:Spring.Data.IRowCallback">
            <summary>
            Callback to process each row of data in an AdoOperation's Query method.
            </summary>
            <remarks>
            Implementations of this interface perform the actual work of extracting
            results. In contrast to a IResultSetExtractor, a IRowCallback object is typically
            stateful.  It keeps the result state within the object, to be available
            for later inspection.
            </remarks>	
            
        </member>
        <member name="M:Spring.Data.IRowCallback.ProcessRow(System.Data.IDataReader)">
            <summary>
            Implementations must implement this method to process each row of data
            in the data reader.
            </summary>
            <remarks>
            This method should not advance the cursor by calling Read()
            on IDataReader but only extract the current values.  The
            caller does not need to care about closing the reader, command, connection, or
            about handling transactions:  this will all be handled by 
            Spring's AdoTemplate
            </remarks>
            <param name="reader">An active IDataReader instance</param>
            <returns>The result object</returns>
        </member>
        <member name="T:Spring.Data.ResultSetExtractorDelegate">
            <summary>
            Callback delegate to process all result sets and row in an 
            AdoTemplate query method.
            </summary>
            <remarks>
            Implementations of this delegate perform the work
            of extracting results but don't need worry about managing
            ADO.NET resources, such as closing the reader, or transaction management.
            </remarks> 
            <param name="reader">The IDataReader to extract data from.
            Implementations should not close this: it will be closed
            by the AdoTemplate.</param>
            <returns>An arbitrary result object or null if none.</returns>
        </member>
        <member name="T:Spring.Data.RowMapperDelegate">
            <summary>
            Callback delegate to process each row of data in a result set to an object.
            </summary>
            <param name="dataReader">The IDataReader to map</param>
            <param name="rowNum">the number of the current row.</param>
            <returns>An abrirary object, typically derived from data
            in the result set.</returns>
        </member>
        <member name="T:Spring.Data.UncategorizedAdoException">
            <summary>
            Exception thrown when we can't classify a SQLException into 
            one of our generic data access exceptions. 
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Data.UncategorizedAdoException.sql">
            <summary>
            SQL that led to the problem
            </summary>
        </member>
        <member name="F:Spring.Data.UncategorizedAdoException.errorCode">
            <summary>
            The error code, if available, that was unable to be categorized.
            </summary>
        </member>
        <member name="M:Spring.Data.UncategorizedAdoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.UncategorizedAdoException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Data.UncategorizedAdoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.UncategorizedAdoException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Spring.Data.UncategorizedAdoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.UncategorizedAdoException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Spring.Data.UncategorizedAdoException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Data.UncategorizedAdoException"/> class.
            </summary>
            <param name="task">name of the current task.</param>
            <param name="errorCode">the underlying error code that could not be translated</param>
            <param name="sql">The offending SQL statment</param>
            <param name="ex">The root cause.</param>
        </member>
        <member name="M:Spring.Data.UncategorizedAdoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Data.UncategorizedAdoException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Data.UncategorizedAdoException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
        </member>
        <member name="P:Spring.Data.UncategorizedAdoException.ErrorCode">
            <summary>
            Return the underlying error code if available from the underlying provider.
            </summary>
        </member>
        <member name="P:Spring.Data.UncategorizedAdoException.Sql">
            <summary>
            Return the SQL that resulted in this exception.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Config.AttributeDrivenObjectDefinitionParser">
            <summary>
            IObjectDefinitionParser implementation that allows users to easily configure all the
            infrastructure objects required to enable attribute-driven transction demarcation.
            </summary>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.Config.AttributeDrivenObjectDefinitionParser.PROXY_TARGET_TYPE">
            <summary>
            The '<code>proxy-target-type</code>' attribute
            </summary>
        </member>
        <member name="F:Spring.Transaction.Config.AttributeDrivenObjectDefinitionParser.ORDER">
            <summary>
            The '<code>order</code>' property/attribute
            </summary>
        </member>
        <member name="M:Spring.Transaction.Config.AttributeDrivenObjectDefinitionParser.ParseInternal(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Central template method to actually parse the supplied XmlElement
            into one or more IObjectDefinitions.
            </summary>
            <param name="element">The element that is to be parsed into one or more <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>s</param>
            <param name="parserContext">The the object encapsulating the current state of the parsing process;
            provides access to a <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/></param>
            <returns>
            The primary IObjectDefinition resulting from the parsing of the supplied XmlElement
            </returns>
        </member>
        <member name="M:Spring.Transaction.Config.AttributeDrivenObjectDefinitionParser.ConfigureAutoProxyCreator(Spring.Objects.Factory.Xml.ParserContext,System.Xml.XmlElement)">
            <summary>
            Configures the auto proxy creator.
            </summary>
            <param name="parserContext">The parser context.</param>
            <param name="element">The element.</param>
        </member>
        <member name="P:Spring.Transaction.Config.AttributeDrivenObjectDefinitionParser.ShouldGenerateId">
            <summary>
            Gets a value indicating whether an ID should be generated instead of read
            from the passed in XmlElement.
            </summary>
            <value><c>true</c> if should generate id; otherwise, <c>false</c>.</value>
            <remarks>Note that this flag is about always generating an ID; the parser
            won't even check for an "id" attribute in this case.
            </remarks>
        </member>
        <member name="T:Spring.Transaction.Config.TxAdviceObjectDefinitionParser">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> for the <code>&lt;tx:advice&gt;</code> tag.
            </summary>
            <author>Rob Harrop</author>
            <author>Juergen Hoeller</author>
            <author>Adrian Colyer</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.Config.TxNamespaceParser">
            <summary>
            <code>NamespaceParser</code> allowing for the configuration of
            declarative transaction management using either XML or using attributes.
            
            This namespace handler is the central piece of functionality in the
            Spring transaction management facilities and offers two appraoches
            to declaratively manage transactions.
            
            One approach uses transaction semantics defined in XML using the
            <code>&lt;tx:advice&gt;</code> elements, the other uses attributes
            in combination with the <code>&lt;tx:annotation-driven&gt;</code> element.
            Both approached are detailed in the Spring reference manual.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Config.TxNamespaceParser.Init">
            <summary>
            Register the <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> for the '<code>advice</code>' and
            '<code>attribute-driven'</code> tags.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Config.TxNamespaceUtils">
            <summary>
            This is a utility class to help in parsing the transaction namespace
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Transaction.Config.TxNamespaceUtils.TRANSACTION_MANAGER_ATTRIBUTE">
            <summary>
            The transaction manager attribute
            </summary>
        </member>
        <member name="F:Spring.Transaction.Config.TxNamespaceUtils.TRANSACTION_ATTRIBUTE_SOURCE">
            <summary>
            The source of transaction metadata
            </summary>
        </member>
        <member name="F:Spring.Transaction.Config.TxNamespaceUtils.TRANSACTION_MANAGER_PROPERTY">
            <summary>
            The property asociated with the transaction manager xml element
            </summary>
        </member>
        <member name="T:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource">
            <summary>
            Abstract implementation of
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/>
            that caches attributes for methods, and implements a default fallback policy.
            </summary>
            <remarks>
            <p>
            The default fallback policy applied by this class is:
            <list type="numbered">
            <item>
            <description>most specific method</description>
            </item>
            <item>
            <description>target class attribute</description>
            </item>
            <item>
            <description>declaring method</description>
            </item>
            <item>
            <description>declaring class</description>
            </item>
            </list>
            </p>
            <p>
            Defaults to using class's transaction attribute if none is associated
            with the target method. Any transaction attribute associated with the
            target method completely overrides a class transaction attribute.
            </p>
            <p>
            This implementation caches attributes by method after they are first used.
            If it's ever desirable to allow dynamic changing of transaction attributes
            (unlikely) caching could be made configurable. Caching is desirable because
            of the cost of evaluating rollback rules.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.Interceptor.ITransactionAttributeSource">
            <summary>
            Interface used by <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/>
            to source transaction attributes.
            </summary>
            <remarks>
            <p>
            Implementations know how to source transaction attributes, whether from configuration,
            metadata attributes at source level, or anywhere else.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.ITransactionAttributeSource.ReturnTransactionAttribute(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Return the <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> for this
            method.
            </summary>
            <param name="method">The method to check.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>. May be null, in which case the declaring 
            class of the supplied <paramref name="method"/> must be used.
            </param>
            <returns>
            A <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> or 
            null if the method is non-transactional.
            </returns>
        </member>
        <member name="F:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource.NULL_TX_ATTIBUTE">
            <summary>
            Canonical value held in cache to indicate no transaction attibute was found
            for this method, and we don't need to look again.
            </summary>
        </member>
        <member name="F:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource._transactionAttibuteCache">
            <summary>
            Cache of <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/>s, keyed by method and target class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource.FindAllAttributes(System.Reflection.MethodInfo)">
            <summary>
            Subclasses should implement this to return all attributes for this method.
            May return null.
            </summary>
            <remarks>
            We need all because of the need to analyze rollback rules.
            </remarks>
            <param name="method">The method to retrieve attributes for.</param>
            <returns>The transactional attributes associated with the method.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource.FindAllAttributes(System.Type)">
            <summary>
            Subclasses should implement this to return all attributes for this class.
            May return null.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> to retrieve attributes for.
            </param>
            <returns>
            All attributes associated with the supplied <paramref name="targetType"/>.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource.ReturnTransactionAttribute(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Return the transaction attribute for this method invocation.
            </summary>
            <remarks>
            Defaults to the class's transaction attribute if no method
            attribute is found
            </remarks>
            <param name="method">method for the current invocation. Can't be null</param>
            <param name="targetType">target class for this invocation. May be null.</param>
            <returns><see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> for this method, or null if the method is non-transactional</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource.FindTransactionAttribute(System.Attribute[])">
            <summary>
            Return the transaction attribute, given this set of attributes
            attached to a method or class. Return null if it's not transactional.  
            </summary>
            <remarks>
            Protected rather than private as subclasses may want to customize
            how this is done: for example, returning a
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/>
            affected by the values of other attributes.
            This implementation takes into account
            <see cref="T:Spring.Transaction.Interceptor.RollbackRuleAttribute"/>s, if
            the TransactionAttribute is a RuleBasedTransactionAttribute.
            </remarks>
            <param name="attributes">
            Attributes attached to a method or class. May be null, in which case a null
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> will be returned.
            </param>
            <returns>
            The <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> configured transaction attribute, or null
            if none was found.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AbstractTransactionAttributeSourcePointcut.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Does the supplied <paramref name="method"/> satisfy this matcher?
            </summary>
            <remarks>
            <p>
            Must be implemented by a derived class in order to specify matching
            rules.
            </p>
            </remarks>
            <param name="method">The candidate method.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/> (may be <see langword="null"/>,
            in which case the candidate <see cref="T:System.Type"/> must be taken
            to be the <paramref name="method"/>'s declaring class).
            </param>
            <returns>
            <see langword="true"/> if this this method matches statically.
            </returns>
        </member>
        <member name="T:Spring.Transaction.Interceptor.AttributesTransactionAttributeSource">
            <summary>
            Implementation of <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/> that uses
            <see cref="T:System.Attribute"/>s.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AttributesTransactionAttributeSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Transaction.Interceptor.AttributesTransactionAttributeSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AttributesTransactionAttributeSource.FindAllAttributes(System.Reflection.MethodInfo)">
            <summary>
            <see cref="M:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource.FindAllAttributes(System.Reflection.MethodInfo)"/>
            implementation.
            </summary>
            <remarks>
            We need all because of the need to analyze rollback rules.
            </remarks>
            <param name="method">The method to retrieve attributes for.</param>
            <returns>The transactional attributes associated with the method.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.AttributesTransactionAttributeSource.FindAllAttributes(System.Type)">
            <summary>
            <see cref="M:Spring.Transaction.Interceptor.AbstractFallbackTransactionAttributeSource.FindAllAttributes(System.Type)"/>
            implementation.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> to retrieve attributes for.
            </param>
            <returns>
            All attributes associated with the supplied <paramref name="targetType"/>.
            </returns>
        </member>
        <member name="T:Spring.Transaction.Interceptor.DefaultTransactionAttribute">
            <summary> 
            Transaction attribute approach to rolling back on all exceptions, no other
            exceptions by default.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.Support.DefaultTransactionDefinition">
            <summary>
            Default implementation of the <see cref="T:Spring.Transaction.ITransactionDefinition"/>
            interface, offering object-style configuration and sensible default values.
            </summary>
            <remarks>
            <p>
            Base class for both <see cref="T:System.SystemException"/> and
            <see cref="T:Spring.Transaction.Interceptor.DefaultTransactionAttribute"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.ITransactionDefinition">
            <summary>
            Interface for classes that define transaction properties. Base interface for
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/>.
            </summary>
            <remarks>
            <p>
            Note that isolation level, timeout and read-only settings will only
            get applied when starting a new transaction. As only
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/> can actually cause that, it doesn't make sense
            to specify any of those settings else. Furthermore, not all transaction
            managers will support those features and thus throw respective exceptions
            when given non-default values.
            </p>
            </remarks>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="P:Spring.Transaction.ITransactionDefinition.PropagationBehavior">
            <summary>
            Return the propagation behavior of type
            <see cref="T:Spring.Transaction.TransactionPropagation"/>.
            </summary>
        </member>
        <member name="P:Spring.Transaction.ITransactionDefinition.TransactionIsolationLevel">
            <summary>
            Return the isolation level of type <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <remarks>
            <p>
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            </p>
            <p>
            Note that a transaction manager that does not support custom isolation levels
            will throw an exception when given any other level than
            <see cref="F:System.Data.IsolationLevel.Unspecified"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.ITransactionDefinition.TransactionTimeout">
            <summary>
            Return the transaction timeout.
            </summary>
            <remarks>
            <p>
            Must return a number of seconds, or -1.
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            Note that a transaction manager that does not support timeouts will
            throw an exception when given any other timeout than -1.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.ITransactionDefinition.ReadOnly">
            <summary>
            Get whether to optimize as read-only transaction.
            </summary>
            <remarks>
            <p>
            This just serves as hint for the actual transaction subsystem,
            it will <i>not necessarily</i> cause failure of write accesses.
            </p>
            <p>
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            </p>
            <p>
            A transaction manager that cannot interpret the read-only hint
            will <i>not</i> throw an exception when given <c>ReadOnly=true</c>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.ITransactionDefinition.Name">
            <summary>
            Return the name of this transaction.  Can be null.
            </summary>
            <remarks>
            This will be used as a transaction name to be shown in a 
            transaction monitor, if applicable.  In the case of Spring
            declarative transactions, the exposed name will be the fully
            qualified type name + "." method name + assembly (by default).
            </remarks>
        </member>
        <member name="P:Spring.Transaction.ITransactionDefinition.EnterpriseServicesInteropOption">
            <summary>
            Gets the enterprise services interop option.
            </summary>
            <value>The enterprise services interop option.</value>
        </member>
        <member name="F:Spring.Transaction.Support.DefaultTransactionDefinition.TIMEOUT_DEFAULT">
            <summary>
            The default transaction timeout.
            </summary>
        </member>
        <member name="F:Spring.Transaction.Support.DefaultTransactionDefinition.PROPAGATION_CONSTANT_PREFIX">
            <summary>
            Prefix for Propagation settings.
            </summary>
        </member>
        <member name="F:Spring.Transaction.Support.DefaultTransactionDefinition.ISOLATION_CONSTANT_PREFIX">
            <summary>
            Prefix for IsolationLevel settings.
            </summary>
        </member>
        <member name="F:Spring.Transaction.Support.DefaultTransactionDefinition.TIMEOUT_PREFIX">
            <summary>
            Prefix for transaction timeout values in description strings.
            </summary>
        </member>
        <member name="F:Spring.Transaction.Support.DefaultTransactionDefinition.READ_ONLY_MARKER">
            <summary>
            Marker for read-only transactions in description strings.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionDefinition.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Support.DefaultTransactionDefinition"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionDefinition.#ctor(Spring.Transaction.TransactionPropagation)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Support.DefaultTransactionDefinition"/> class
            with the supplied <see cref="T:Spring.Transaction.TransactionPropagation"/>
            behaviour.
            </summary>
            <param name="transactionPropagation">
            The desired <see cref="T:Spring.Transaction.TransactionPropagation"/> behavior.
            </param>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionDefinition.Equals(System.Object)">
            <summary>
            An override of the default <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare to.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionDefinition.GetHashCode">
            <summary>
            An override of the default <see cref="M:System.Object.GetHashCode"/> method that returns the
            hashcode of the
            <see cref="P:Spring.Transaction.Support.DefaultTransactionDefinition.DefinitionDescription"/>
            property.
            </summary>
            <returns>
            The hashcode of the
            <see cref="P:Spring.Transaction.Support.DefaultTransactionDefinition.DefinitionDescription"/>
            property.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionDefinition.ToString">
            <summary>
            An override of the default <see cref="M:System.Object.ToString"/> method that returns a string
            representation of the
            <see cref="P:Spring.Transaction.Support.DefaultTransactionDefinition.DefinitionDescription"/>
            property.
            </summary>
            <returns>
            A string representation of the
            <see cref="P:Spring.Transaction.Support.DefaultTransactionDefinition.DefinitionDescription"/>
            property.
            </returns>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionDefinition.PropagationBehavior">
            <summary>
            Gets / Sets the <see cref="T:Spring.Transaction.TransactionPropagation">propagation</see>
            behavior.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionDefinition.TransactionIsolationLevel">
            <summary>
            Return the isolation level of type <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <remarks>
            <p>
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            </p>
            <p>
            Note that a transaction manager that does not support custom isolation levels
            will throw an exception when given any other level than
            <see cref="F:System.Data.IsolationLevel.Unspecified"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionDefinition.TransactionTimeout">
            <summary>
            Return the transaction timeout.
            </summary>
            <remarks>
            <p>
            Must return a number of seconds, or -1.
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            Note that a transaction manager that does not support timeouts will
            throw an exception when given any other timeout than -1.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionDefinition.ReadOnly">
            <summary>
            Get whether to optimize as read-only transaction.
            </summary>
            <remarks>
            <p>
            This just serves as hint for the actual transaction subsystem,
            it will <i>not necessarily</i> cause failure of write accesses.
            </p>
            <p>
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            </p>
            <p>
            A transaction manager that cannot interpret the read-only hint
            will <i>not</i> throw an exception when given <c>ReadOnly=true</c>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionDefinition.Name">
            <summary>
            Return the name of this transaction.  Can be null.
            </summary>
            <value></value>
            <remarks>
            This will be used as a transaction name to be shown in a
            transaction monitor, if applicable.  In the case of Spring
            declarative transactions, the exposed name will be the fully
            qualified type name + "." method name + assembly (by default).
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionDefinition.EnterpriseServicesInteropOption">
            <summary>
            Gets the enterprise services interop option.
            </summary>
            <value>The enterprise services interop option.</value>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionDefinition.DefinitionDescription">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the
            <see cref="P:Spring.Transaction.Support.DefaultTransactionDefinition.DefinitionDescription"/>
            property.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Interceptor.ITransactionAttribute">
            <summary>
            This interface adds a
            <see cref="M:Spring.Transaction.Interceptor.ITransactionAttribute.RollbackOn(System.Exception)"/>
            specification to <see cref="T:Spring.Transaction.ITransactionDefinition"/>.
            </summary>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.ITransactionAttribute.RollbackOn(System.Exception)">
            <summary>
            Decides if rollback is required for the supplied <paramref name="exception"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to evaluate.</param>
            <returns>True if the exception causes a rollback, false otherwise.</returns>
        </member>
        <member name="F:Spring.Transaction.Interceptor.DefaultTransactionAttribute.ROLLBACK_RULE_PREFIX">
            <summary>
            Prefix for rollback-on-exception rules in description strings.
            </summary>
        </member>
        <member name="F:Spring.Transaction.Interceptor.DefaultTransactionAttribute.COMMIT_RULE_PREFIX">
            <summary>
            Prefix for commit-on-exception rules in description strings.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DefaultTransactionAttribute.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.DefaultTransactionAttribute"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DefaultTransactionAttribute.#ctor(Spring.Transaction.TransactionPropagation)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.DefaultTransactionAttribute"/>
            class, setting the propagation behavior to the supplied value.
            </summary>
            <param name="propagationBehavior">
            The desired transaction propagation behaviour.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DefaultTransactionAttribute.RollbackOn(System.Exception)">
            <summary>
            Decides if rollback is required for the supplied <paramref name="exception"/>.
            </summary>
            <remarks>
            <p>
            The default behavior is to rollback on any exception.
            Consistent with <see cref="T:Spring.Transaction.Support.TransactionTemplate"/>'s behavior.
            </p>
            </remarks>
            <param name="exception">The <see cref="T:System.Exception"/> to evaluate.</param>
            <returns>True if the exception causes a rollback, false otherwise.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DefaultTransactionAttribute.ToString">
            <summary> 
            Return a description of this transaction attribute.
            </summary>
            <remarks>
            <p>
            The format matches the one used by the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeEditor"/>,
            to be able to feed any result into a <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/>
            instance's properties.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Transaction.Interceptor.DefaultTransactionAttributeSourceAdvisor">
            <summary>
            Advisor driven by a <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/>, 
            used to exclude a general advice <see cref="T:AopAlliance.Aop.IAdvice"/> from methods that
            are non-transactional.
            </summary>
            <remarks>
            <para>
            To put it another way, use this advisor when you would like to associate other AOP 
            advice based on the pointcut specified by declarative transaction demarcation, 
            attibute based or otherwise. 
            </para>
            <p>
            Because the AOP framework caches advice calculations, this is normally
            faster than just letting the <see cref="T:AopAlliance.Intercept.IInterceptor"/>
            run and find out itself that it has no work to do.
            </p>
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DefaultTransactionAttributeSourceAdvisor.#ctor(Spring.Transaction.Interceptor.ITransactionAttributeSource,AopAlliance.Aop.IAdvice)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.DefaultTransactionAttributeSourceAdvisor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DefaultTransactionAttributeSourceAdvisor.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Tests the input method to see if it's covered by the advisor.
            </summary>
            <param name="method">The method to match.</param>
            <param name="targetClass">The <see cref="T:System.Type"/> to match against.</param>
            <returns>
            <b>True</b> if the supplied <paramref name="method"/> is covered by the advisor.
            </returns>
        </member>
        <member name="T:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName">
            <summary>
            ITransactionAttribute that delegates all calls to a give target attribute except for the
            name, which is specified in the constructor.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.#ctor(Spring.Transaction.Interceptor.ITransactionAttribute,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName"/> class.
            </summary>
            <param name="targetAttribute">The target attribute.</param>
            <param name="identification">The identification.</param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.RollbackOn(System.Exception)">
            <summary>
            Decides if rollback is required for the supplied <paramref name="exception"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to evaluate.</param>
            <returns>
            True if the exception causes a rollback, false otherwise.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.ToString">
            <summary> 
            Return a description of this transaction attribute.
            </summary>
            <remarks>
            <p>
            The format matches the one used by the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeEditor"/>,
            to be able to feed any result into a <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/>
            instance's properties.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.PropagationBehavior">
            <summary>
            Return the propagation behavior of type
            <see cref="T:Spring.Transaction.TransactionPropagation"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.TransactionIsolationLevel">
            <summary>
            Return the isolation level of type <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <value></value>
            <remarks>
            	<p>
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            </p>
            	<p>
            Note that a transaction manager that does not support custom isolation levels
            will throw an exception when given any other level than
            <see cref="F:System.Data.IsolationLevel.Unspecified"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.TransactionTimeout">
            <summary>
            Return the transaction timeout.
            </summary>
            <value></value>
            <remarks>
            	<p>
            Must return a number of seconds, or -1.
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            Note that a transaction manager that does not support timeouts will
            throw an exception when given any other timeout than -1.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.ReadOnly">
            <summary>
            Get whether to optimize as read-only transaction.
            </summary>
            <value></value>
            <remarks>
            	<p>
            This just serves as hint for the actual transaction subsystem,
            it will <i>not necessarily</i> cause failure of write accesses.
            </p>
            	<p>
            Only makes sense in combination with
            <see cref="F:Spring.Transaction.TransactionPropagation.Required"/> and
            <see cref="F:Spring.Transaction.TransactionPropagation.RequiresNew"/>.
            </p>
            	<p>
            A transaction manager that cannot interpret the read-only hint
            will <i>not</i> throw an exception when given <c>ReadOnly=true</c>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.Name">
            <summary>
            Return the name of this transaction.
            </summary>
            <value></value>
            <remarks>
            The exposed name will be the fully
            qualified type name + "." method name + assembly (by default).
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.DelegatingTransactionAttributeWithName.EnterpriseServicesInteropOption">
            <summary>
            Gets the enterprise services interop option.
            </summary>
            <value>The enterprise services interop option.</value>
        </member>
        <member name="T:Spring.Transaction.Interceptor.MatchAlwaysTransactionAttributeSource">
            <summary>
            Very simple implementation of <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/> 
            which will always return the same <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> 
            for all methods fed to it.
            </summary>
            <remarks>
            <p>
            The <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/>
            may be specified, but will otherwise default to PROPAGATION_REQUIRED. This may be
            used in the cases where you want to use the same transaction attribute with all
            methods being handled by a transaction interceptor.
            </p>
            </remarks>
            <author>Colin Sampaleanu</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MatchAlwaysTransactionAttributeSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.MatchAlwaysTransactionAttributeSource"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MatchAlwaysTransactionAttributeSource.ReturnTransactionAttribute(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Return the <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> for this
            method.
            </summary>
            <param name="method">The method to check.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>. May be null, in which case the declaring 
            class of the supplied <paramref name="method"/> must be used.
            </param>
            <returns>
            A <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> or 
            null if the method is non-transactional.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MatchAlwaysTransactionAttributeSource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MatchAlwaysTransactionAttributeSource.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MatchAlwaysTransactionAttributeSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Spring.Transaction.Interceptor.MatchAlwaysTransactionAttributeSource.TransactionAttribute">
            <summary>
            Allows a transaction attribute to be specified, using the <see cref="T:System.String"/>
            form, for example, "PROPAGATION_REQUIRED".
            </summary>
        </member>
        <member name="T:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource">
            <summary>
            Simple implementation of the <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/>
            interface that allows attributes to be stored per method in a map.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(System.String,Spring.Transaction.Interceptor.ITransactionAttribute)">
            <summary>
            Add an attribute for a transactional method.
            </summary>
            <remarks>
            Method names can end or start with "*" for matching multiple methods.
            </remarks>
            <param name="name">The class and method name, separated by a dot.</param>
            <param name="attribute">The attribute to be associated with the method.</param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(System.Type,System.String,Spring.Transaction.Interceptor.ITransactionAttribute)">
            <summary>
            Add an attribute for a transactional method.
            </summary>
            <remarks>
            Method names can end or start with "*" for matching multiple methods.
            </remarks>
            <param name="type">The target interface or class.</param>
            <param name="mappedName">The mapped method name.</param>
            <param name="transactionAttribute">
            The attribute to be associated with the method.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.AddTransactionalMethod(System.Reflection.MethodInfo,Spring.Transaction.Interceptor.ITransactionAttribute)">
            <summary>
            Add an attribute for a transactional method.
            </summary>
            <param name="method">The transactional method.</param>
            <param name="transactionAttribute">
            The attribute to be associated with the method.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.IsMatch(System.String,System.String)">
            <summary>
            Does the supplied <paramref name="methodName"/> match the supplied <paramref name="mappedName"/>?
            </summary>
            <remarks>
            The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,
            as well as direct equality.  This behaviour can (of course) be overridden in 
            derived classes.
            </remarks>
            <param name="methodName">The method name of the class.</param>
            <param name="mappedName">The name in the descriptor.</param>
            <returns><b>True</b> if the names match.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.ReturnTransactionAttribute(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Return the <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> for this
            method.
            </summary>
            <param name="method">The method to check.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>. May be null, in which case the declaring 
            class of the supplied <paramref name="method"/> must be used.
            </param>
            <returns>
            A <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> or 
            null if the method is non-transactional.
            </returns>
        </member>
        <member name="P:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource.MethodMap">
            <summary>
            Set a name/attribute map, consisting of "FQCN.method, AssemblyName" method names
            (e.g. "MyNameSpace.MyClass.MyMethod, MyAssembly") and ITransactionAttribute
            instances (or Strings to be converted to <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> instances).
            </summary>
            <remarks>
            <p>
            The key values of the supplied <see cref="T:System.Collections.IDictionary"/>
            must adhere to the following form:<br/>
            <code>FQCN.methodName, Assembly</code>.
            </p>
            <example>
            <code>MyNameSpace.MyClass.MyMethod, MyAssembly</code>
            </example>
            </remarks>
        </member>
        <member name="T:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource">
            <summary>
            Simple implementation of the <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/>
            that allows attributes to be matched by registered name.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.log">
            <summary>
            Logger available to subclasses, static for optimal serialization
            </summary>
        </member>
        <member name="F:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.nameMap">
            <summary>
            Keys are method names; values are ITransactionAttributes
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.GetEnumerator">
            <summary>
            Enumerate the string/<see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> mapping entries.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.Add(System.String,Spring.Transaction.Interceptor.ITransactionAttribute)">
            <summary>
            Add a mapping.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.Add(System.String,System.String)">
            <summary>
            Add a mapping.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.IsMatch(System.String,System.String)">
            <summary>
            Does the supplied <paramref name="methodName"/> match the supplied <paramref name="mappedName"/>?
            </summary>
            <remarks>
            The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,
            as well as direct equality. Can be overridden in subclasses.
            </remarks>
            <param name="methodName">The method name of the class.</param>
            <param name="mappedName">The name in the descriptor.</param>
            <returns><b>True</b> if the names match.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.AddTransactionMethod(System.String,Spring.Transaction.Interceptor.ITransactionAttribute)">
            <summary>
            Add an attribute for a transactional method.
            </summary>
            <remarks>
            <p>
            Method names can end with "*" for matching multiple methods.
            </p>
            </remarks>
            <param name="methodName">The transactional method name.</param>
            <param name="attribute">
            The attribute to be associated with the method.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.SetProperties(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses the given properties into a name/attribute map.
            </summary>
            <remarks>
            Expects method names as keys and string attributes definitions as values,
            parsable into <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> 
            instances via 
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeEditor"/>.
            </remarks>
            <param name="transactionAttributes">The properties of the transaction.</param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.ReturnTransactionAttribute(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Return the <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> for this
            method.
            </summary>
            <param name="method">The method to check.</param>
            <param name="targetType">
            The target <see cref="T:System.Type"/>. May be null, in which case the declaring 
            class of the supplied <paramref name="method"/> must be used.
            </param>
            <returns>
            A <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> or 
            null if the method is non-transactional.
            </returns>
        </member>
        <member name="P:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.NameMap">
            <summary>
            Set a name/attribute map, consisting of method names (e.g. "MyMethod") and
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> instances
            (or Strings to be converted to ITransactionAttribute instances).
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource.NameProperties">
            <summary>
            Parses the given properties into a name/attribute map.
            </summary>
            <remarks>
            Expects method names as keys and string attributes definitions as values,
            parsable into <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> 
            instances via 
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeEditor"/>.
            </remarks>
            <value>The properties of the transaction.</value>
        </member>
        <member name="T:Spring.Transaction.Interceptor.NoRollbackRuleAttribute">
            <summary>
            Tag class. Its class means it has the opposite behaviour to the
            <see cref="T:Spring.Transaction.Interceptor.RollbackRuleAttribute"/> superclass.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.Interceptor.RollbackRuleAttribute">
            <summary>
            Rule determining whether or not a given exception (and any subclasses) should
            cause a rollback.
            </summary>
            <remarks>
            <p>
            Multiple such rules can be applied to determine whether a transaction should commit
            or rollback after an exception has been thrown.
            </p>
            </remarks>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.Interceptor.RollbackRuleAttribute._exceptionName">
            <summary>
            Could hold exception, resolving class name but would always require FQN.
            This way does multiple string comparisons, but how often do we decide 
            whether to roll back a transaction following an exception?
            </summary>
        </member>
        <member name="F:Spring.Transaction.Interceptor.RollbackRuleAttribute.RollbackOnSystemExceptions">
            <summary>
            Canonical instance representing default behavior for rolling back on
            all <see cref="T:System.Exception"/>s.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RollbackRuleAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.RollbackRuleAttribute"/> class
            for the named <paramref name="exceptionName"/>.
            </summary>
            <param name="exceptionName">The exception name.</param>
            <remarks>
            <p>
            As always, the <paramref name="exceptionName"/> should be the full
            assembly qualified version.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RollbackRuleAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.RollbackRuleAttribute"/> class
            for the suplied <paramref name="exceptionType"/>.
            </summary>
            <remarks>
            <p>
            The exception class must be <see cref="T:System.Exception"/> or a subclass.
            </p>
            <p>
            This is the preferred way to construct a
            <see cref="T:Spring.Transaction.Interceptor.RollbackRuleAttribute"/>,
            matching the exception class and subclasses.
            </p>
            </remarks>
            <param name="exceptionType">
            The <see cref="T:System.Exception"/> class that will trigger a rollback.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RollbackRuleAttribute.GetDepth(System.Type)">
            <summary>
            Return the depth to the matching superclass execption <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            A return value of 0 means that the <paramref name="exceptionType"/> matches. 
            </remarks>
            <param name="exceptionType">
            The <see cref="T:System.Type"/> of exception to find.
            </param>
            <returns>
            Return -1 if there's no match. Otherwise, return depth. Lowest depth wins.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RollbackRuleAttribute.GetDepth(System.Object)">
            <summary>
            Return the depth to the matching superclass execption <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            A return value of 0 means that the <paramref name="exception"/>s 
            <see cref="T:System.Type"/> matches. 
            </remarks>
            <param name="exception">
            The exception object to find.
            </param>
            <returns>
            Return -1 if there's no match. Otherwise, return depth. Lowest depth wins.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RollbackRuleAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the exception covered by this instance.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RollbackRuleAttribute.GetHashCode">
            <summary>
            Override of <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>The hashcode of the exception name covered by this instance.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RollbackRuleAttribute.Equals(System.Object)">
            <summary>
            Override of <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><b>True</b> if the input object is equal to this instance.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RollbackRuleAttribute.Equals(Spring.Transaction.Interceptor.RollbackRuleAttribute)">
            <summary>
            Strongly typed <c>Equals()</c> implementation.
            </summary>
            <param name="rollbackRuleAttribute">
            The <see cref="T:Spring.Transaction.Interceptor.RollbackRuleAttribute"/> to compare.
            </param>
            <returns>
            <b>True</b> if the input object is equal to the supplied <paramref name="rollbackRuleAttribute"/>.
            </returns>
        </member>
        <member name="P:Spring.Transaction.Interceptor.RollbackRuleAttribute.ExceptionName">
            <summary>
            Returns the name of the exception.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NoRollbackRuleAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.NoRollbackRuleAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource"/> class.
            </summary>
            <param name="exceptionType">
            The <see cref="T:System.Exception"/> class that will trigger a rollback.
            </param>
        </member>
        <member name="P:Spring.Transaction.Interceptor.ObjectFactoryTransactionAttributeSourceAdvisor.Pointcut">
            <summary>
            The <see cref="T:Spring.Aop.IPointcut"/> that drives this advisor.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute">
            <summary>
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> implementation
            that works out whether a given exception should cause transaction rollback by applying
            a number of rollback rules, both positive and negative.
            </summary>
            <remarks>
            If no rules are relevant to the exception, it behaves like the 
            <see cref="T:Spring.Transaction.Interceptor.DefaultTransactionAttribute"/> class
            (rolling back on runtime exceptions)..
            <p>
            The <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeEditor"/> 
            creates objects of this class.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute.#ctor(Spring.Transaction.TransactionPropagation,System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute"/>
            class.
            </summary>
            <param name="transactionPropagation">
            The desired transaction propagation behaviour.
            </param>
            <param name="ruleList">
            The rollback rules list for this transaction attribute.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute.RollbackOn(System.Exception)">
            <summary>
            Will a transaction be rolled back if the supplied <parameref name="exception"/>
            is thrown during the lifecycle of a transaction to which this attribute is applied?
            </summary>
            <param name="exception">The offending <see cref="T:System.Exception"/>.</param>
            <returns>True if the exception should cause a rollback, false otherwise.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of this instance.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute.AddRollbackRule(Spring.Transaction.Interceptor.RollbackRuleAttribute)">
            <summary>
            Adds a <see cref="T:Spring.Transaction.Interceptor.RollbackRuleAttribute"/> to this
            attributes list of rollback rules.
            </summary>
            <param name="rule">
            The <see cref="T:Spring.Transaction.Interceptor.RollbackRuleAttribute"/> to add.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute.ClearRollbackRules">
            <summary>
            Clears the rollback rules for this attribute.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute.RollbackRules">
            <summary>
            Sets the rollback rules list for this transaction attribute.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionAspectSupport">
            <summary>
            Superclass for transaction aspects, such as the AOP Alliance-compatible
            <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/>.
            </summary>
            <remarks>
            <p>
             This enables the underlying Spring transaction infrastructure to be used
             to easily implement an aspect for any aspect system.
            </p>
            <p>
            Subclasses are responsible for calling methods in this class in the correct order.
            </p>
            <p>
            Uses the Strategy design pattern. A <see cref="T:Spring.Transaction.IPlatformTransactionManager"/>
            implementation will perform the actual transaction management
            </p>
            <p>
            A transaction aspect is serializable if its
            <see cref="T:Spring.Transaction.IPlatformTransactionManager"/> and
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/> are serializable.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.Interceptor.TransactionAspectSupport.CURRENT_TRANSACTIONINFO_SLOTNAME">
            <summary>
            The name in thread local storage where the TransactionInfo object is located
            </summary>
        </member>
        <member name="F:Spring.Transaction.Interceptor.TransactionAspectSupport._transactionManager">
            <summary>
            The <see cref="T:Spring.Transaction.IPlatformTransactionManager"/> currently referenced by
            this aspect
            </summary>
        </member>
        <member name="F:Spring.Transaction.Interceptor.TransactionAspectSupport._transactionAttributeSource">
            <summary>
            The <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/> currently
            referenced by this aspect.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.AfterPropertiesSet">
            <summary>
            Checks that the required properties are set.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.CreateTransactionIfNecessary(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Create a transaction if necessary
            </summary>
            <param name="method">Method about to execute</param>
            <param name="targetType">Type that the method is on</param>
            <returns>
            A <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/> object,
            whether or not a transaction was created.
            <p>
            The
            <see cref="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.HasTransaction"/>
            property on the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            class can be used to tell if there was a transaction created.
            </p>
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.CreateTransactionIfNecessary(Spring.Transaction.Interceptor.ITransactionAttribute,System.String)">
            <summary>
            Creates the transaction if necessary.
            </summary>
            <param name="sourceAttr">The source transaction attribute.</param>
            <param name="joinpointIdentification">The joinpoint identification.</param>
            <returns>Transaction Info for declarative transaction management.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.MethodIdentification(System.Reflection.MethodInfo)">
            <summary>
            Identifies the method by providing the qualfied method name.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>qualified mehtod name.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.CommitTransactionAfterReturning(Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo)">
            <summary>
            Execute after the successful completion of call, but not after an exception was handled.
            </summary>
            <remarks>
            <p>
            Do nothing if we didn't create a transaction.
            </p>
            </remarks>
            <param name="transactionInfo">
            The
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            about the current transaction.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.CompleteTransactionAfterThrowing(Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo,System.Exception)">
            <summary>
            Handle a exception, closing out the transaction.
            </summary>
            <remarks>
            <p>
            We may commit or roll back, depending on our configuration.
            </p>
            </remarks>
            <param name="transactionInfo">
            The
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            about the current transaction.
            </param>
            <param name="exception">The <see cref="T:System.Exception"/> encountered.</param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.CleanupTransactionInfo(Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo)">
            <summary>
            Resets the 
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            for this thread.
            </summary>
            <remarks>
            <note>
            Call this in all cases: exceptions or normal return.
            </note>
            </remarks>
            <param name="transactionInfo">
            The 
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            about the current transaction. May be null.
            </param>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionManager">
            <summary>
            Gets and sets the <see cref="T:Spring.Transaction.IPlatformTransactionManager"/> for
            this aspect.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionAttributeSource">
            <summary>
            Gets and sets the
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/> for
            this aspect.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.CurrentTransactionStatus">
            <summary>
            Returns the <see cref="T:Spring.Transaction.ITransactionStatus"/>
            of the current method invocation.
            </summary>
            <remarks>
            Mainly intended for code that wants to set the current transaction
            rollback-only but not throw an application exception.
            </remarks>
            <exception cref="T:Spring.Transaction.NoTransactionException">
            If the transaction info cannot be found, because the method was invoked
            outside of an AOP invocation context.
            </exception>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.CurrentTransactionInfo">
            <summary>
            Subclasses can use this to return the current
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>.
            </summary>
            <remarks>
            Only subclasses that cannot handle all operations in one method
            need to use this mechanism to get at the current
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>. 
            An around advice such as an AOP Alliance
            <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> can hold a reference to the 
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            throughout the aspect method.
            A <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            will be returned even if no transaction was created. The
            <see cref="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.HasTransaction"/>
            property can be used to query this.
            </remarks>
            <exception cref="T:Spring.Transaction.NoTransactionException">
            If no transaction has been created by an aspect.
            </exception>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionAttributes">
            <summary>
            Set properties with method names as keys and transaction attribute
            descriptors (parsed via <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeEditor"/>) as values:
            e.g. key = "MyMethod", value = "PROPAGATION_REQUIRED,readOnly".
            </summary>
            <remarks>
            <note>
            Method names are always applied to the target class, no matter if defined in an
            interface or the class itself.
            </note>
            <p>
            Internally, a
            <see cref="T:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource"/>
            will be created from the given properties.
            </p>	
            </remarks>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo">
            <summary>
            Opaque object used to hold transaction information.
            </summary>
            <remarks>
            <p>
            Subclasses must pass it back to method on this class, but not see its internals.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.#ctor(Spring.Transaction.Interceptor.ITransactionAttribute,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            class for the supplied <paramref name="transactionAttribute"/>.
            </summary>
            <param name="transactionAttribute">The transaction attributes to associate with any transaction.</param>
            <param name="joinpointIdentification">The info for diagnostic display of joinpoint</param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.BindToThread">
            <summary>
            Binds this
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            instance to the thread local storage variable for the current thread and
            backs up the existing
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            object for the current thread.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.RestoreThreadLocalStatus">
            <summary>
            Restores the previous
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            object to the current thread.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.HasTransaction">
            <summary>
            Does this instance currently have a transaction?
            </summary>
            <value><b>True</b> if this instance has a transaction.</value>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.TransactionStatus">
            <summary>
            Gets and sets the <see cref="T:Spring.Transaction.ITransactionStatus"/> for this object.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.TransactionAttribute">
            <summary>
            Gets the current
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> for this
            <see cref="T:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo"/>
            object.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAspectSupport.TransactionInfo.JoinpointIdentification">
            <summary>
            Gets the joinpoint identification.
            </summary>
            <value>The joinpoint identification.</value>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionAttribute">
            <summary>
            .NET Attribute for describing transactional behavior of methods in a class. 
            </summary>
            <remarks>This attribute type is generally directly comparable
            to Spring's <see cref="T:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute"/> class and
            in fact <see cref="T:Spring.Transaction.Interceptor.AttributesTransactionAttributeSource"/> will
            directly convert the data to a <see cref="T:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute"/>
            so that Spring's transaction support code does not have to know about
            attributes. If no rules are relevant to the exception it will be treaded
            like DefaultTransactionAttribute, (rolling back on all exceptions).
            <para>
            The default property values are TransactionPropagation.Required, IsolationLevel.ReadCommitted,
            DefaultTransactionDefinition.TIMEOUT_DEFAULT (can be changed, by default is the default
            value of the underlying transaction subsystem)
            ReadOnly = false, and Type.EmtptyTypes specified for Rollbackfor and NoRollbackFor exception
            types.
            </para>
            </remarks>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Transaction.Interceptor.TransactionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttribute.#ctor(Spring.Transaction.TransactionPropagation)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Transaction.Interceptor.TransactionAttribute"/> class.
            </summary>
            <param name="transactionPropagation">The transaction propagation.</param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttribute.#ctor(Spring.Transaction.TransactionPropagation,System.Data.IsolationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Transaction.Interceptor.TransactionAttribute"/> class.
            </summary>
            <param name="transactionPropagation">The transaction propagation.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttribute.#ctor(System.Data.IsolationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Transaction.Interceptor.TransactionAttribute"/> class.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttribute.TransactionPropagation">
            <summary>
            Gets the transaction propagation.
            </summary>
            <remarks>Defaults to TransactionPropagation.Required</remarks>
            <value>The transaction propagation.</value>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttribute.IsolationLevel">
            <summary>
            Gets the isolation level.
            </summary>
            <remarks>Defaults to IsolationLevel.Unspecified</remarks>
            <value>The isolation level.</value>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttribute.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <remarks>Defaults to the default timeout of the underlying transaction system.</remarks>
            <value>The timeout.</value>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttribute.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the transaction is readonly.
            </summary>
            <remarks>Defaults to false</remarks>
            <value><c>true</c> if read-only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttribute.RollbackFor">
            <summary>
            Gets or sets the zero or more exception types which
            indicating which exception types must cause a transaction
            rollback.
            </summary>
            <remarks>This is the preferred way to construct a rollback rule,
            matching the exception class and subclasses.</remarks>
            <value>The rollback types.</value>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttribute.NoRollbackFor">
            <summary>
            Gets or sets zero or more exceptions types which
            indicationg which exception type must <c>not</c>
            cause a transaction rollback.
            </summary>
            <remarks>This is the preferred way to construct a rollback rule,
            matching the exception type.</remarks>
            <value>The no rollback for.</value>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttribute.EnterpriseServicesInteropOption">
            <summary>
            Gets or sets the enterprise services interop option.
            </summary>
            <value>The enterprise services interop option.</value>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionAttributeConverter">
            <summary>
            Type converter for <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> 
            objects.
            </summary>
            <remarks>
            Takes <see cref="T:System.String"/>s of the form
            <p><code>PROPAGATION_NAME,ISOLATION_NAME,readOnly,timeout_NNNN,+Exception1,-Exception2</code></p>
            <p>where only propagation code is required. For example:</p>
            <p><code>PROPAGATION_MANDATORY,ISOLATION_DEFAULT</code></p>
            <p>
            The tokens can be in <strong>any</strong> order. Propagation and isolation codes
            must use the names of the values in the <see cref="T:Spring.Transaction.TransactionPropagation"/>
            enumeration. Timeout values are in seconds. If no timeout is specified, the transaction
            manager will apply a default timeout specific to the particular transaction manager.
            </p>
            <p>
            A "+" before an exception name substring indicates that transactions should commit even
            if this exception is thrown; a "-" that they should roll back.
            </p>
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to an ITransactionAttribute, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from string to ITransactionAttribute
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="val">The string value to convert</param>
            <returns>An ITransactionAttribute instance</returns>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionAttributeEditor">
            <summary>
            Type converter for <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/> 
            objects.
            </summary>
            <remarks>
            Takes <see cref="T:System.String"/>s of the form
            <p><code>PROPAGATION_NAME,ISOLATION_NAME,readOnly,timeout_NNNN,+Exception1,-Exception2</code></p>
            <p>where only propagation code is required. For example:</p>
            <p><code>PROPAGATION_MANDATORY,ISOLATION_DEFAULT</code></p>
            <p>
            The tokens can be in <strong>any</strong> order. Propagation and isolation codes
            must use the names of the values in the <see cref="T:Spring.Transaction.TransactionPropagation"/>
            enumeration. Timeout values are in seconds. If no timeout is specified, the transaction
            manager will apply a default timeout specific to the particular transaction manager.
            </p>
            <p>
            A "+" before an exception name substring indicates that transactions should commit even
            if this exception is thrown; a "-" that they should roll back.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeEditor.SetAsText(System.String)">
            <summary>
            Parses the input properties string into a valid <see cref="T:Spring.Transaction.Interceptor.ITransactionAttribute"/>
            instance
            </summary>
            <param name="transactionProperties">
            The string defining the transactional properties.
            </param>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttributeEditor.Value">
            <summary>
            Gets the <see cref="T:Spring.Transaction.Interceptor.RuleBasedTransactionAttribute"/>
            from this editor.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionAttributeSourceAdvisor">
            <summary>
            Advisor driven by a <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/>, used to include
            a <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/> for methods that
            are transactional.
            </summary>
            <remarks>
            <p>
            Because the AOP framework caches advice calculations, this is normally
            faster than just letting the <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/> 
            run and find out itself that it has no work to do.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeSourceAdvisor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeSourceAdvisor"/> class.
            </summary>
            <remarks>
            	<p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeSourceAdvisor.#ctor(Spring.Transaction.Interceptor.TransactionInterceptor)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeSourceAdvisor"/> class.
            </summary>
            <param name="transactionInterceptor">
            The pre-configured transaction interceptor.
            </param>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeSourceAdvisor.Matches(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Tests the input method to see if it's covered by the advisor.
            </summary>
            <param name="method">The method to match.</param>
            <param name="targetClass">The <see cref="T:System.Type"/> to match against.</param>
            <returns>
            <b>True</b> if the supplied <paramref name="method"/> is covered by the advisor.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeSourceAdvisor.SetTxAttributeSource(Spring.Transaction.Interceptor.TransactionInterceptor)">
            <summary>
            Sets the tx attribute source.
            </summary>
            <param name="transactionInterceptor">The transaction interceptor.</param>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttributeSourceAdvisor.TransactionInterceptor">
            <summary>
            Sets the transaction interceptor.
            </summary>
            <value>The transaction interceptor.</value>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor">
            <summary>
            Editor that can convert <see cref="T:System.String"/> values into
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/> instances.
            </summary>
            <remarks>
            The transaction attribute string must be parseable by the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeEditor"/> in this package.
            <p>
            Strings must be specified in the following syntax:<br/>
            <code>FQCN.methodName=&lt;transaction attribute string&gt;</code> (sans &lt;&gt;).
            </p>
            <example>
            <code>ExampleNamespace.ExampleClass.MyMethod=PROPAGATION_MANDATORY,ISOLATION_DEFAULT</code>
            </example>
            <note>
            The specified class must be the one where the methods are defined; in the case of
            implementing an interface, the interface class name must be specified.
            </note>
            <p>
            This will register all overloaded methods for a given name. Does not support explicit
            registration of certain overloaded methods. Supports wildcard style mappings (in
            the form "xxx*"), e.g. "Notify*" for "Notify" and "NotifyAll".
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.PropertiesEditor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.SetAsText(System.String)">
            <summary>
            Parses the input properties <see cref="T:System.String"/> into a valid
            <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/>
            instance
            </summary>
            <param name="attributeSource">The properties string to be parsed.</param>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.Value">
            <summary>
            Gets the <see cref="T:Spring.Transaction.Interceptor.ITransactionAttributeSource"/>
            from this instance.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.PropertiesEditor">
            <summary>
            Internal class to parse property values.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.PropertiesEditor.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.PropertiesEditor"/> class.
            </summary>
            <param name="properties">The property values to be parsed.</param>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.PropertiesEditor.Item(System.String)">
            <summary>
            Indexer to return values based on index value.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionAttributeSourceEditor.PropertiesEditor.Keys">
            <summary>
            Returns the collection of keys for properties.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionInterceptor">
            <summary>
            An AOP Alliance <see cref="T:AopAlliance.Intercept.IMethodInterceptor"/> providing
            declarative transaction management using the common Spring.NET transaction infrastructure.
            </summary>
            <remarks>
            <p>
            That class contains the necessary calls into Spring.NET's underlying
            transaction API: subclasses such as this are responsible for calling
            superclass methods such as
            <see cref="M:Spring.Transaction.Interceptor.TransactionAspectSupport.CreateTransactionIfNecessary(System.Reflection.MethodInfo,System.Type)"/>
            in the correct order, in the event of normal invocation return or an exception. 
            </p>
            <p>
            <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/>s are thread-safe.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionInterceptor.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            AOP Alliance invoke call that handles all transaction plumbing. 
            </summary>
            <param name="invocation">
            The method that is to execute in the context of a transaction.
            </param>
            <returns>The return value from the method invocation.</returns>
        </member>
        <member name="T:Spring.Transaction.Interceptor.TransactionProxyFactoryObject">
            <summary>
            Proxy factory object for simplified declarative transaction handling.
            </summary>
            <remarks>
            <p>
            Alternative to the standard AOP <see cref="T:Spring.Aop.Framework.ProxyFactoryObject"/>
            with a <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/>.
            </p>
            <p>
            This class is intended to cover the <i>typical</i> case of declarative
            transaction demarcation: namely, wrapping a (singleton) target object with a
            transactional proxy, proxying all the interfaces that the target implements.
            </p>
            <p>
            Internally, a <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/> 
            instance is used, but the user of this class does not have to care. Optionally, an
            <see cref="T:Spring.Aop.IPointcut"/> can be specified to cause conditional invocation of
            the underlying <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/>.
            </p> 
            <p>
            The
            <see cref="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.PreInterceptors"/>
            and
            <see cref="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.PostInterceptors"/>
            properties can be set to add additional interceptors to the mix.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Dmitriy Kopylenko</author>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Interceptor.TransactionProxyFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.GetObject">
            <summary>
            Returns the object wrapped by this proxy factory.
            </summary>
            <returns>The target object proxy.</returns>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.AfterPropertiesSet">
            <summary>
            Method run after all the properties have been set for this object.
            Responsible for actual proxy creation.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.createTargetSource(System.Object)">
            <summary>
            Set the target or <see cref="T:Spring.Aop.ITargetSource"/>.
            </summary>
            <param name="target">
            The target. If this is an implementation of the <see cref="T:Spring.Aop.ITargetSource"/>
            interface, it is used as our <see cref="T:Spring.Aop.ITargetSource"/>; otherwise it is
            wrapped in a <see cref="T:Spring.Aop.Target.SingletonTargetSource"/>.
            </param>
            <returns>An <see cref="T:Spring.Aop.ITargetSource"/> for this object.</returns>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.PlatformTransactionManager">
            <summary>
            Set the transaction manager for this factory.
            </summary>
            <remarks>
            It is this instance that will perform actual transaction management: this class is
            just a way of invoking it.
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.Target">
            <summary>
            Set the target object, i.e. the object to be wrapped with a transactional proxy.
            </summary>
            <remarks>
            <p>
            The target may be any object, in which case a
            <see cref="T:Spring.Aop.Target.SingletonTargetSource"/> will
            be created. If it is a <see cref="T:Spring.Aop.Target.EmptyTargetSource"/>, no wrapper
            <see cref="T:Spring.Aop.Target.EmptyTargetSource"/> is created: this enables the use of a pooling
            or prototype <see cref="T:Spring.Aop.Target.EmptyTargetSource"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.ProxyInterfaces">
            <summary>
            Specify the set of interfaces being proxied.
            </summary>
            <remarks>
            <p>
            If left null (the default), the AOP infrastructure works
            out which interfaces need proxying by analyzing the target,
            proxying <b>all</b> of the interfaces that the target object implements.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.TransactionAttributes">
            <summary>
            Set properties with method names as keys and transaction attribute
            descriptors as values.
            </summary>
            <remarks>
            <p>
            The various transaction attribute descriptors are parsed via
            an instance of the
            <see cref="T:Spring.Transaction.Interceptor.TransactionAttributeEditor"/> class.
            </p>
            <note>
            Method names are always applied to the target class, no matter if defined in an
            interface or the class itself.
            </note>
            <p>
            Internally, a
            <see cref="T:Spring.Transaction.Interceptor.NameMatchTransactionAttributeSource"/>
            will be created from the given properties.
            </p>
            </remarks>
            <example>
            <p>
            An example string (method name and transaction attributes) might be:
            </p>
            <p>
            key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly".
            </p>
            </example>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.TransactionAttributeSource">
            <summary>
            Set the transaction attribute source which is used to find transaction
            attributes.
            </summary>
            <remarks>
            <p>
            If specifying a <see cref="T:System.String"/> property value, an
            appropriate <see cref="T:System.ComponentModel.TypeConverter"/>
            implementation will create a
            <see cref="T:Spring.Transaction.Interceptor.MethodMapTransactionAttributeSource"/>
            from the value.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.TruePointcut">
            <summary>
            Set a pointcut, i.e an object that can cause conditional invocation
            of the <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/>
            depending on method and attributes passed.
            </summary>
            <remarks>
            <note>
            Additional interceptors are always invoked.
            </note>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.PreInterceptors">
            <summary>
            Set additional interceptors (or advisors) to be applied before the
            implicit transaction interceptor.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.PostInterceptors">
            <summary>
            Set additional interceptors (or advisors) to be applied after the
            implicit transaction interceptor.
            </summary>
            <remarks>
            <p>
            Note that this is just necessary if you rely on those interceptors in general.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.AdvisorAdapterRegistry">
            <summary>
            Specify the <see cref="T:Spring.Aop.Framework.Adapter.IAdvisorAdapterRegistry"/> to use.
            </summary>
            <remarks>The default instance is the global AdvisorAdapterRegistry.</remarks>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.ObjectType">
            <summary>
            Returns the object <see cref="T:System.Type"/> for this proxy factory.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Interceptor.TransactionProxyFactoryObject.IsSingleton">
            <summary>
            Is this object a singleton?  Always returns <b>true</b> in this implementation.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Support.DefaultTransactionStatus">
            <summary>
            Default implementation of the <see cref="T:Spring.Transaction.ITransactionStatus"/> interface,
            used by <see cref="T:Spring.Transaction.Support.AbstractPlatformTransactionManager"/>.
            </summary>
            <remarks>
            <p>
            Holds all status information that
            <see cref="T:Spring.Transaction.Support.AbstractPlatformTransactionManager"/>
            needs internally, including a generic transaction object determined by
            the concrete transaction manager implementation.
            </p>
            <p>
            Supports delegating savepoint-related methods to a transaction object
            that implements the <see cref="T:Spring.Transaction.ISavepointManager"/> interface.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.ITransactionStatus">
            <summary>
            Representation of the status of a transaction,
            consisting of a transaction object and some status flags.
            </summary>
            <remarks>
            <p>
            Transactional code can use this to retrieve status information,
            and to programmatically request a rollback (instead of throwing
            an exception that causes an implicit rollback).
            </p>
            <p>
            Derives from the <see cref="T:Spring.Transaction.ISavepointManager"/> interface to provide access
            to savepoint management facilities. Note that savepoint management
            is just available if the actual transaction manager supports it.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.ITransactionStatus.SetRollbackOnly">
            <summary>
            Set the transaction rollback-only. This instructs the transaction manager that the only possible outcome of
            the transaction may be a rollback, proceeding with the normal application
            workflow though (i.e. no exception).
            </summary>
            <remarks>
            <p>
            For transactions managed by a <see cref="T:Spring.Transaction.Support.TransactionTemplate"/> or
            <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/>.
            An alternative way to trigger a rollback is throwing an transaction exception.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Transaction.ITransactionStatus.IsNewTransaction">
            <summary>
            Returns <b>true</b> if the transaction is new, else <b>false</b> if participating
            in an existing transaction.
            </summary>
        </member>
        <member name="P:Spring.Transaction.ITransactionStatus.RollbackOnly">
            <summary>
            Return whether the transaction has been marked as rollback-only, 
            (either by the application or by the transaction infrastructure).
            </summary>
        </member>
        <member name="P:Spring.Transaction.ITransactionStatus.Transaction">
            <summary>
            Gets the current transaction object.
            </summary>
            <remarks>
            Returns the current transaction object for a given connection.
            <p>
            Used to associate with the <see cref="P:System.Data.IDbCommand.Transaction"/> property.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.#ctor(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Support.DefaultTransactionStatus"/> class.
            </summary>
            <param name="transaction">The underlying transaction object that can hold state for the internal
            transaction implementation.</param>
            <param name="newTransaction">True if the transaction is new, else false if participating in an existing transaction.</param>
            <param name="newSynchronization">True if a new transaction synchronization has been opened for the given
            <paramref name="transaction"/>.</param>
            <param name="readOnly">True if the transaction is read only.</param>
            <param name="debug">if set to <c>true</c>, enable debug log in tx managers.</param>
            <param name="suspendedResources">The suspended resources for the given <paramref name="transaction"/>.</param>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.HasTransaction">
            <summary>
            Determines whether there is an actual transaction active.
            </summary>
            <returns>
            	<c>true</c> if there is an actual transaction active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.SetRollbackOnly">
            <summary>
            Set the transaction rollback-only. This instructs the transaction manager that the only possible outcome of
            the transaction may be a rollback, proceeding with the normal application
            workflow though (i.e. no exception).
            </summary>
            <remarks>
            	<p>
            For transactions managed by a <see cref="T:Spring.Transaction.Support.TransactionTemplate"/> or
            <see cref="T:Spring.Transaction.Interceptor.TransactionInterceptor"/>.
            An alternative way to trigger a rollback is throwing an transaction exception.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.CreateSavepoint(System.String)">
            <summary>
            This implementation delegates to the underlying transaction object
            (if it implements the <see cref="T:Spring.Transaction.ISavepointManager"/> interface)
            to create a savepoint.
            </summary>
            <exception cref="T:Spring.Transaction.NestedTransactionNotSupportedException">
            If the underlying transaction does not support savepoints.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.RollbackToSavepoint(System.String)">
            <summary>
            This implementation delegates to the underlying transaction object
            (if it implements the <see cref="T:Spring.Transaction.ISavepointManager"/> interface)
            to rollback to the supplied <paramref name="savepoint"/>.
            </summary>
            <param name="savepoint">The savepoint to rollback to.</param>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.ReleaseSavepoint(System.String)">
            <summary>
            This implementation delegates to the underlying transaction object
            (if it implements the <see cref="T:Spring.Transaction.ISavepointManager"/> interface)
            to release the supplied <paramref name="savepoint"/>.
            </summary>
            <param name="savepoint">The savepoint to release.</param>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.CreateAndHoldSavepoint(System.String)">
            <summary>
            Create a savepoint and hold it for the transaction.
            </summary>
            <exception cref="T:Spring.Transaction.NestedTransactionNotSupportedException">
            If the underlying transaction does not support savepoints.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.RollbackToHeldSavepoint">
            <summary>
            Roll back to the savepoint that is held for the transaction.
            </summary>
            <exception cref="T:Spring.Transaction.TransactionUsageException">
            If no save point has been created.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.DefaultTransactionStatus.ReleaseHeldSavepoint">
            <summary>
            Release the savepoint that is held for the transaction.
            </summary>
            <exception cref="T:Spring.Transaction.TransactionUsageException">
            If no save point has been created.
            </exception>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.Debug">
            <summary>
            Gets a value indicating whether the progress of this transaction is debugged. 
            This is used by AbstractPlatformTransactionManager as an optimization, to prevent repeated
            calls to log.IsDebug. Not really intended for client code.</summary>
            <value><c>true</c> if debug; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.Transaction">
            <summary>
            Returns the underlying transaction object.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.Completed">
            <summary>
            Gets or sets a value indicating whether the Transaction is completed, that is commited or rolled back.
            </summary>
            <value><c>true</c> if completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.ReadOnly">
            <summary>
            Returns true if the underlying transaction is read only.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.NewSynchronization">
            <summary>
            Flag indicating if a new transaction synchronization has been opened
            for this transaction.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.SuspendedResources">
            <summary>
            Returns suspended resources for this transaction.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.Savepoint">
            <summary>
            Gets and sets the savepoint for the current transaction, if any. 
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.HasSavepoint">
            <summary>
            Returns a flag indicating if the transaction has a savepoint.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.SavepointManager">
            <summary>
            Return the underlying transaction as a
            <see cref="T:Spring.Transaction.ISavepointManager"/>, if possible.
            </summary>
            <exception cref="T:Spring.Transaction.NestedTransactionNotSupportedException">
            If the underlying transaction does not support savepoints.
            </exception>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.IsTransactionSavepointManager">
            <summary>
            Return true if the underlying transaction implements the
            <see cref="T:Spring.Transaction.ISavepointManager"/> interface.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.IsNewTransaction">
            <summary>
            Returns <b>true</b> if the transaction is new, else <b>false</b> if participating
            in an existing transaction.
            </summary>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.RollbackOnly">
            <summary>
            Determine the rollbackOnly flag via checking both this
            <see cref="T:Spring.Transaction.ITransactionStatus"/>
            and the transaction object, provided that the latter implements the
            <see cref="T:Spring.Transaction.Support.ISmartTransactionObject"/> interface.
            </summary>
            <remarks>The property can only be set to true.</remarks>
        </member>
        <member name="P:Spring.Transaction.Support.DefaultTransactionStatus.LocalRollbackOnly">
            <summary>
            Determine the rollback-only flag via checking this TransactionStatus.  Will only
            return true if the application set the property RollbackOnly to true on this
            TransactionStatus object.
            </summary>
            <value><c>true</c> if [local rollback only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spring.Transaction.Support.ITransactionCallback">
            <summary>
            Callback interface for transactional code. 
            </summary>
            <remarks>
            <p>To be used with <see cref="T:Spring.Transaction.Support.TransactionTemplate"/>'s Execute
            methods.
            </p>
            <p>
            Typically used to gather various calls to transaction-unaware low-level
            services into a higher-level method implementation with transaction
            demarcation.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionCallback.DoInTransaction(Spring.Transaction.ITransactionStatus)">
            <summary>
            Gets called by TransactionTemplate.Execute within a 
            transaction context.
            </summary>
            <param name="status">The associated transaction status.</param>
            <returns>A result object or <c>null</c>.</returns>
        </member>
        <member name="T:Spring.Transaction.Support.ITransactionOperations">
            <summary>
            Interface specifying basic transaction exectuion operations.
            </summary>
            <remarks>
            Implemented by <see cref="T:Spring.Transaction.Support.TransactionTemplate"/>.  Not often used directly,
            but a useful option to enhance testability, as it can easily be mocked or stubbed.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollac (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionOperations.Execute(Spring.Transaction.Support.TransactionDelegate)">
            <summary>
            Executes the the action specified by the given delegate callback within a transaction.
            </summary>
            <remarks>Allows for returning a result object created within the transaction, that is,
            a domain object or a collection of domain objects.  An exception thrown by the callback
            is treated as a fatal exception that enforces a rollback.  Such an exception gets
            propagated to the caller of the template.
            </remarks>
            <param name="transactionMethod">The delegate that specifies the transactional action.</param>
            <returns>A result object returned by the callback, or <code>null</code> if one</returns>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of initialization or system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.ITransactionOperations.Execute(Spring.Transaction.Support.ITransactionCallback)">
            <summary>
            Executes the action specified by the given callback object within a transaction.
            </summary>
            <remarks>Allows for returning a result object created within the transaction, that is,
            a domain object or a collection of domain objects.  An exception thrown by the callback
            is treated as a fatal exception that enforces a rollback.  Such an exception gets
            propagated to the caller of the template.
            </remarks>
            <param name="action">The callback object that specifies the transactional action.</param>
            <returns>A result object returned by the callback, or <code>null</code> if one</returns>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of initialization or system errors.
            </exception>
        </member>
        <member name="T:Spring.Transaction.Support.TransactionCallbackWithoutResult">
            <summary>
            Simple convenience class for TransactionCallback implementation.
            Allows for implementing a DoInTransaction version without result,
            i.e. without the need for a return statement.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionCallbackWithoutResult.DoInTransactionWithoutResult(Spring.Transaction.ITransactionStatus)">
            <summary>
            Gets called by TransactionTemplate.execute within a transactional context
            when no return value is required.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            Does not need to care about transactions itself, although it can retrieve
            and influence the status of the current transaction via the given status
            object, e.g. setting rollback-only.
            A RuntimeException thrown by the callback is treated as application
            exception that enforces a rollback. An exception gets propagated to the
            caller of the template.
            </remarks>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionCallbackWithoutResult.DoInTransaction(Spring.Transaction.ITransactionStatus)">
            <summary>
            Gets called by TransactionTemplate.Execute within a
            transaction context.
            </summary>
            <param name="status">The associated transaction status.</param>
            <returns>a result object or <c>null</c></returns>
        </member>
        <member name="T:Spring.Transaction.Support.TransactionDelegate">
            <summary>
            Callback delegate for performing actions within a transactional context.
            </summary>
            <remarks>
            <p>To be used with <see cref="T:Spring.Transaction.Support.TransactionTemplate"/>'s Execute
            methods.
            </p>
            <p>
            Typically used to gather various calls to transaction-unaware low-level
            services into a higher-level method implementation with transaction
            demarcation.
            </p>
            </remarks>
            <param name="status">The status of the transaction, can be used to
            trigger a rollback the current transaction by settings its
            RollbackOnly property to true.</param>
            <returns>A result object or <c>null</c>.</returns>
        </member>
        <member name="T:Spring.Transaction.Support.TransactionSynchronizationManager">
            <summary>
            Internal class that manages resources and transaction synchronizations per thread.
            </summary>
            <remarks>
            Supports one resource per key without overwriting, i.e. a resource needs to
            be removed before a new one can be set for the same key.
            Supports a list of transaction synchronizations if synchronization is active.
            <p>
            Resource management code should check for thread-bound resources via GetResource().
            It is normally not supposed
            to bind resources to threads, as this is the responsiblity of transaction managers.
            A further option is to lazily bind on first use if transaction synchronization
            is active, for performing transactions that span an arbitrary number of resources.
            </p>
            <p>
            Transaction synchronization must be activated and deactivated by a transaction
            manager via
            <see cref="M:Spring.Transaction.Support.TransactionSynchronizationManager.InitSynchronization">InitSynchronization</see>
            and
            <see cref="M:Spring.Transaction.Support.TransactionSynchronizationManager.ClearSynchronization">ClearSynchronization</see>.
            This is automatically supported by
            <see cref="T:Spring.Transaction.Support.AbstractPlatformTransactionManager"/>.
            </p>
            <p>
            Resource management code should only register synchronizations when this
            manager is active, and perform resource cleanup immediately else.
            If transaction synchronization isn't active, there is either no current
            transaction, or the transaction manager doesn't support synchronizations.
            </p>
            Note that this class uses following naming convention for the 
            named 'data slots' for storage of thread local data, 'Spring.Transaction:Name'
            where Name is either 
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationManager.HasResource(System.Object)">
            <summary>
            Check if there is a resource for the given key bound to the current thread.
            </summary>
            <param name="key">key to check</param>
            <returns>if there is a value bound to the current thread</returns>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationManager.GetResource(System.Object)">
            <summary>
            Retrieve a resource for the given key that is bound to the current thread.
            </summary>
            <param name="key">key to check</param>
            <returns>a value bound to the current thread, or null if none.</returns>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationManager.BindResource(System.Object,System.Object)">
            <summary>
            Bind the given resource for teh given key to the current thread
            </summary>
            <param name="key">key to bind the value to</param>
            <param name="value">value to bind</param>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationManager.UnbindResource(System.Object)">
            <summary>
            Unbind a resource for the given key from the current thread
            </summary>
            <param name="key">key to check</param>
            <returns>the previously bound value</returns>
            <exception cref="T:System.InvalidOperationException">if there is no value bound to the thread</exception>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationManager.InitSynchronization">
            <summary>
            Activate transaction synchronization for the current thread.
            </summary>
            <remarks>
            Called by transaction manager at the beginning of a transaction.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If synchronization is already active.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationManager.ClearSynchronization">
            <summary>
            Deactivate transaction synchronization for the current thread.
            </summary>
            <remarks>
            Called by transaction manager on transaction cleanup.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If synchronization is not active.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationManager.Clear">
            <summary>
            Clears the entire transaction synchronization state for the current thread, registered
            synchronizations as well as the various transaction characteristics.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionSynchronizationManager.RegisterSynchronization(Spring.Transaction.Support.ITransactionSynchronization)">
            <summary>
            Register a new transaction synchronization for the current thread.
            </summary>
            <remarks>
            Typically called by resource management code.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If synchronization is not active.
            </exception>
        </member>
        <member name="P:Spring.Transaction.Support.TransactionSynchronizationManager.ResourceDictionary">
            <summary>
            Return all resources that are bound to the current thread.
            </summary>
            <remarks>Main for debugging purposes.  Resource manager should always
            invoke HasResource for a specific resource key that they are interested in.
            </remarks>
            <returns>IDictionary with resource keys and resource objects or empty 
            dictionary if none is bound.</returns>
        </member>
        <member name="P:Spring.Transaction.Support.TransactionSynchronizationManager.Synchronizations">
            <summary>
            Return an unmodifiable list of all registered synchronizations
            for the current thread.
            </summary>
            <returns>
            A list of <see cref="T:Spring.Transaction.Support.ITransactionSynchronization"/>
            instances.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If synchronization is not active.
            </exception>
        </member>
        <member name="P:Spring.Transaction.Support.TransactionSynchronizationManager.SynchronizationActive">
            <summary>
            Return if transaction synchronization is active for the current thread.
            </summary>
            <remarks>
            Can be called before
            <see cref="M:Spring.Transaction.Support.TransactionSynchronizationManager.RegisterSynchronization(Spring.Transaction.Support.ITransactionSynchronization)">InitSynchronization</see>
            to avoid unnecessary instance creation.
            </remarks>
        </member>
        <member name="P:Spring.Transaction.Support.TransactionSynchronizationManager.CurrentTransactionReadOnly">
            <summary>
            Gets or sets a value indicating whether the 
            current transaction is read only.
            </summary>
            <remarks> 
            Called by transaction manager on transaction begin and on cleanup.
            Return whether the current transaction is marked as read-only.
            To be called by resource management code when preparing a newly
            created resource (for example, a Hibernate Session).
            <p>Note that transaction synchronizations receive the read-only flag
            as argument for the <code>beforeCommit</code> callback, to be able
            to suppress change detection on commit. The present method is meant
            to be used for earlier read-only checks, for example to set the
            flush mode of a Hibernate Session to FlushMode.Never upfront.
            </p>
            </remarks>
            <value>
            	<c>true</c> if current transaction read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Transaction.Support.TransactionSynchronizationManager.CurrentTransactionName">
            <summary>
            Gets or sets the name of the current transaction, if any.
            </summary>
            <remarks>Called by the transaction manager on transaction begin and on cleanup.
            To be called by resource management code for optimizations per use case, for
            example to optimize fetch strategies for specific named transactions.</remarks>
            <value>The name of the current transactio or null if none set.</value>
        </member>
        <member name="P:Spring.Transaction.Support.TransactionSynchronizationManager.ActualTransactionActive">
            <summary>
            Gets or sets a value indicating whether there currently is an actual transaction
            active.
            </summary>
            <remarks>This indicates wheter the current thread is associated with an actual
            transaction rather than just with active transaction synchronization.
            <para>Called by the transaction manager on transaction begin and on cleanup.</para>
            <para>To be called by resource management code that wants to discriminate between
            active transaction synchronization (with or without backing resource transaction;
            also on PROPAGATION_SUPPORTS) and an actual transaction being active; on 
            PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etC)</para></remarks>
            <value>
            	<c>true</c> if [actual transaction active]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Transaction.Support.TransactionSynchronizationManager.CurrentTransactionIsolationLevel">
            <summary>
            Gets or sets the current transaction isolation level, if any.
            </summary>
            <remarks>Called by the transaction manager on transaction begin and on cleanup.</remarks>
            <value>The current transaction isolation level.  If no current transaction is 
            active, retrun IsolationLevel.Unspecified</value>
        </member>
        <member name="T:Spring.Transaction.Support.TransactionSynchronizationState">
            <summary>
            Enumeration containing the state of transaction synchronization.
            </summary>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.Support.TransactionSynchronizationState.Always">
            <summary>
            Always activate transaction synchronization, even for "empty" transactions
            that result from <see cref="T:Spring.Transaction.TransactionPropagation"/>.
            </summary>
            <seealso cref="F:Spring.Transaction.TransactionPropagation.Supports"/> with no existing backend transaction.
        </member>
        <member name="F:Spring.Transaction.Support.TransactionSynchronizationState.OnActualTransaction">
            <summary>
            Activate transaction synchronization only for actual transactions,
            i.e. not for empty ones that result from <see cref="T:Spring.Transaction.TransactionPropagation"/>.
            </summary>
            <seealso cref="F:Spring.Transaction.TransactionPropagation.Supports"/> with no
            existing backend transaction.
        </member>
        <member name="F:Spring.Transaction.Support.TransactionSynchronizationState.Never">
            <summary>
            Never active transaction synchronization.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Support.TransactionSynchronizationStatus">
            <summary>
            Enumeration of status values when synchronizing transactions.
            </summary>
            <author>Griffin Caprio</author>
        </member>
        <member name="F:Spring.Transaction.Support.TransactionSynchronizationStatus.Committed">
            <summary>
            Completion status in case of proper commit.
            </summary>
        </member>
        <member name="F:Spring.Transaction.Support.TransactionSynchronizationStatus.Rolledback">
            <summary>
            Completion status in case of proper rollback.
            </summary>
        </member>
        <member name="F:Spring.Transaction.Support.TransactionSynchronizationStatus.Unknown">
            <summary>
            Completion status in case of heuristic mixed completion or system error.
            </summary>
        </member>
        <member name="T:Spring.Transaction.Support.TransactionTemplate">
            <summary>
            Helper class that simplifies programmatic transaction demarcation and
            transaction exception handling.
            </summary>
            <remarks>
            <p>
            The central methods are
            <see cref="M:Spring.Transaction.Support.TransactionTemplate.Execute(Spring.Transaction.Support.ITransactionCallback)"/>
            and <see cref="M:Spring.Transaction.Support.TransactionTemplate.Execute(Spring.Transaction.Support.TransactionDelegate)"/>
            supporting transactional code wrapped in the delegate instance. It handles the
            transaction lifecycle and possible exceptions such that neither the delegate
            implementation nor the calling code needs to explicitly handle transactions.
            </p>
            <p>
            Can be used within a service implementation via direct instantiation with
            a transaction manager reference, or get prepared in an application context
            and given to services as object reference.
            </p>
            <note>
            The transaction manager should always be configured as an object in the application
            context, in the first case given to the service directly, in the second case to the
            prepared template.
            </note>
            <p>
            Supports setting the propagation behavior and the isolation level by name,
            for convenient configuration in context definitions.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author> 
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionTemplate.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Support.TransactionTemplate"/> class.
            </summary>
            <remarks>
            <p>
            Mainly targeted at configuration by an object factory.
            </p>
            <note>
            The
            <see cref="P:Spring.Transaction.Support.TransactionTemplate.PlatformTransactionManager"/>
            property must be set before any calls to the
            <see cref="M:Spring.Transaction.Support.TransactionTemplate.Execute(Spring.Transaction.Support.ITransactionCallback)"/>
            or <see cref="M:Spring.Transaction.Support.TransactionTemplate.Execute(Spring.Transaction.Support.TransactionDelegate)"/>
            method.
            </note>
            </remarks>
            <seealso cref="T:Spring.Transaction.IPlatformTransactionManager"/>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionTemplate.#ctor(Spring.Transaction.IPlatformTransactionManager)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.Support.TransactionTemplate"/> class.
            </summary>
            <remarks>
            <p>
            Mainly targeted at configuration by an object factory.
            </p>
            </remarks>
            <param name="platformTransactionManager">
            The transaction management strategy to be used.
            </param>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionTemplate.AfterPropertiesSet">
            <summary>
            Ensures that the
            <see cref="P:Spring.Transaction.Support.TransactionTemplate.PlatformTransactionManager"/>
            has been set.
            </summary>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionTemplate.Execute(Spring.Transaction.Support.TransactionDelegate)">
            <summary>
            Executes the the action specified by the given delegate callback within a transaction.
            </summary>
            <param name="transactionMethod">The delegate that specifies the transactional action.</param>
            <returns>
            A result object returned by the callback, or <code>null</code> if one
            </returns>
            <remarks>Allows for returning a result object created within the transaction, that is,
            a domain object or a collection of domain objects.  An exception thrown by the callback
            is treated as a fatal exception that enforces a rollback.  Such an exception gets
            propagated to the caller of the template.
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of initialization or system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionTemplate.Execute(Spring.Transaction.Support.ITransactionCallback)">
            <summary>
            Executes the action specified by the given callback object within a transaction.
            </summary>
            <param name="action">The callback object that specifies the transactional action.</param>
            <returns>
            A result object returned by the callback, or <code>null</code> if one
            </returns>
            <remarks>Allows for returning a result object created within the transaction, that is,
            a domain object or a collection of domain objects.  An exception thrown by the callback
            is treated as a fatal exception that enforces a rollback.  Such an exception gets
            propagated to the caller of the template.
            </remarks>
            <exception cref="T:Spring.Transaction.TransactionException">
            In case of initialization or system errors.
            </exception>
        </member>
        <member name="M:Spring.Transaction.Support.TransactionTemplate.rollbackOnException(Spring.Transaction.ITransactionStatus,System.Exception)">
            <summary>
            Perform a rollback, handling rollback exceptions properly.
            </summary>
            <param name="status">The object representing the transaction.</param>
            <param name="exception">The thrown application exception or error.</param>
        </member>
        <member name="P:Spring.Transaction.Support.TransactionTemplate.PlatformTransactionManager">
            <summary>
            Gets and sets the <see cref="T:Spring.Transaction.IPlatformTransactionManager"/> to
            be used.
            </summary>
        </member>
        <member name="T:Spring.Transaction.CannotCreateTransactionException">
            <summary> 
            Exception thrown when a transaction can't be created using an
            underlying transaction API such as COM+.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.TransactionException">
            <summary>
            Base class for all transaction exceptions.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.TransactionException.#ctor">
            <summary>
            Creates a new instance of the TransactionException class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.TransactionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the TransactionException class, with the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the TransactionException class with the specified message
            and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the TransactionException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Transaction.CannotCreateTransactionException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.CannotCreateTransactionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.CannotCreateTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.CannotCreateTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Transaction.HeuristicCompletionException">
            <summary>
            Exception that represents a transaction failure caused by heuristics.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.HeuristicCompletionException._outcomeState">
            <summary>
            The outcome state of the transaction: have some or all resources been committed?
            </summary>
        </member>
        <member name="M:Spring.Transaction.HeuristicCompletionException.GetStateString(Spring.Transaction.TransactionOutcomeState)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the supplied
            <see cref="T:Spring.Transaction.TransactionOutcomeState"/>.
            </summary>
            <param name="outcomeState">
            The <see cref="T:Spring.Transaction.TransactionOutcomeState"/> value that
            is to be stringified.
            </param>
            <returns>A <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="M:Spring.Transaction.HeuristicCompletionException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.HeuristicCompletionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.HeuristicCompletionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.HeuristicCompletionException.#ctor(Spring.Transaction.TransactionOutcomeState,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class
            with the specified <see cref="T:Spring.Transaction.TransactionOutcomeState"/>
            and inner exception.
            </summary>
            <param name="outcomeState">
            The <see cref="T:Spring.Transaction.TransactionOutcomeState"/>
            for the transaction.
            </param>
            <param name="innerException">
            The inner exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.HeuristicCompletionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.CannotCreateTransactionException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Transaction.HeuristicCompletionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override of <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            to allow for private serialization.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Transaction.HeuristicCompletionException.OutcomeState">
            <summary>
            Returns the transaction's outcome state.
            </summary>
        </member>
        <member name="T:Spring.Transaction.IllegalTransactionStateException">
            <summary>
            Exception thrown when the existence or non-existence of a transaction
            amounts to an illegal state according to the transaction propagation
            behavior that applies.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.IllegalTransactionStateException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.IllegalTransactionStateException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.IllegalTransactionStateException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.IllegalTransactionStateException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.IllegalTransactionStateException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.IllegalTransactionStateException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.IllegalTransactionStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.IllegalTransactionStateException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Transaction.InvalidIsolationLevelException">
            <summary>
            Exception that gets thrown when an invalid isolation level is specified,
            i.e. an isolation level that the transaction manager implementation
            doesn't support.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="T:Spring.Transaction.TransactionUsageException">
            <summary> 
            Superclass for exceptions caused by inappropriate usage of 
            a <a href="http://www.springframework.net/">Spring.NET</a> transaction API.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.TransactionUsageException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionUsageException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.TransactionUsageException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionUsageException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionUsageException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionUsageException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionUsageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionUsageException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Transaction.InvalidIsolationLevelException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidIsolationLevelException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.InvalidIsolationLevelException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidIsolationLevelException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.InvalidIsolationLevelException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidIsolationLevelException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.InvalidIsolationLevelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidIsolationLevelException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Transaction.InvalidTimeoutException">
            <summary> 
            Exception that gets thrown when an invalid timeout is specified,
            for example when the transaction manager implementation doesn't support timeouts.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.InvalidTimeoutException._timeout">
            <summary>
            Invalid timeout value.
            </summary>
        </member>
        <member name="M:Spring.Transaction.InvalidTimeoutException.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidTimeoutException"/> class
            with the specified message and timeout value.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="timeout">The (possibly invalid) timeout value.</param>
        </member>
        <member name="M:Spring.Transaction.InvalidTimeoutException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.InvalidTimeoutException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidTimeoutException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.InvalidTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidTimeoutException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.InvalidTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.InvalidTimeoutException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Transaction.InvalidTimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override of <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            to allow for private serialization.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Transaction.InvalidTimeoutException.Timeout">
            <summary>
            Returns the invalid timeout for this exception.
            </summary>
        </member>
        <member name="T:Spring.Transaction.NestedTransactionNotSupportedException">
            <summary>
            Exception thrown when attempting to work with a nested transaction
            but nested transactions are not supported by the underlying backend.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.NestedTransactionNotSupportedException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.NestedTransactionNotSupportedException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.NestedTransactionNotSupportedException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.NestedTransactionNotSupportedException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.NestedTransactionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.NestedTransactionNotSupportedException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.NestedTransactionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.NestedTransactionNotSupportedException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Transaction.NoTransactionException">
            <summary>
            Exception thrown when an operation is attempted that relies on an existing
            transaction (such as setting rollback status) and there is no existing transaction.
            This represents an illegal usage of the transaction API.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.NoTransactionException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.NoTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.NoTransactionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.NoTransactionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.NoTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.NoTransactionException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.NoTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.NoTransactionException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Transaction.TransactionOutcomeState">
            <summary>
            Represents a transaction's current state.
            </summary>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.TransactionOutcomeState.Unknown">
            <summary>
            The transaction state is unknown.
            </summary>
        </member>
        <member name="F:Spring.Transaction.TransactionOutcomeState.Committed">
            <summary>
            The transaction has been committed.
            </summary>
        </member>
        <member name="F:Spring.Transaction.TransactionOutcomeState.Rolledback">
            <summary>
            The transaction has been rolled back.
            </summary>
        </member>
        <member name="F:Spring.Transaction.TransactionOutcomeState.Mixed">
            <summary>
            The transaction is in an unknown, mixed state.
            </summary>
        </member>
        <member name="T:Spring.Transaction.TransactionPropagation">
            <summary>
            Enumeration describing <a href="http://www.springframework.net/">Spring.NET's</a>
            transaction propagation settings.
            </summary>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Transaction.TransactionPropagation.Required">
            <summary>
            Support a current transaction, create a new one if none exists.
            </summary>
            <remarks>
            <p>
            Analogous to System.EnterpriseServices.TransactionOption value of the same name.
            This is typically the default setting of a transaction definition.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Transaction.TransactionPropagation.Supports">
            <summary>
            Support a current transaction, execute non-transactionally if none exists.
            </summary>
            <remarks>
            <p>
            Analogous to System.EnterpriseServices.TransactionOption.Supported.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Transaction.TransactionPropagation.Mandatory">
            <summary>
            Support a current transaction, throw an exception if none exists.
            </summary>
            <remarks>
            <p>
            No corresponding System.EnterpriseServices.TransactionOption value.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Transaction.TransactionPropagation.RequiresNew">
            <summary>
            Create a new transaction, suspending the current transaction if one exists.
            </summary>
            <remarks>
            <p>
            Analogous to System.EnterpriseServices.TransactionOption value of the same name.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Transaction.TransactionPropagation.NotSupported">
            <summary>
            Execute non-transactionally, suspending the current transaction if one exists.
            </summary>
            <remarks>
            <p>
            Analogous to System.EnterpriseServices.TransactionOption value of the same name.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Transaction.TransactionPropagation.Never">
            <summary>
            Execute non-transactionally, throw an exception if a transaction exists.
            </summary>
            <remarks>
            <p>
            Analogous to System.EnterpriseServices.TransactionOption.Disabled.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Transaction.TransactionPropagation.Nested">
            <summary>
            Execute within a nested transaction if a current transaction exists, else
            behave like <see cref="F:Spring.Transaction.TransactionPropagation.Required"/>. 
            </summary>
            <remarks>
            <p>
            There is no analogous feature in TransactionOption.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Transaction.TransactionSuspensionNotSupportedException">
            <summary>
            Exception thrown when attempting to suspend an existing transaction
            but transaction suspension is not supported by the underlying backend.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.TransactionSuspensionNotSupportedException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionSuspensionNotSupportedException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.TransactionSuspensionNotSupportedException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionSuspensionNotSupportedException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionSuspensionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionSuspensionNotSupportedException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionSuspensionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionSuspensionNotSupportedException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Transaction.TransactionSystemException">
            <summary>
            Exception thrown when a general transaction system error is encountered,
            for instance on commit or rollback.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.TransactionSystemException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionSystemException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.TransactionSystemException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionSystemException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionSystemException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionSystemException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Transaction.TransactionTimedOutException">
            <summary>
            Exception to be thrown when a transaction has timed out.
            </summary>
        </member>
        <member name="M:Spring.Transaction.TransactionTimedOutException.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Spring.Transaction.TransactionTimedOutException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionTimedOutException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionTimedOutException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionTimedOutException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.TransactionTimedOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.TransactionTimedOutException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Transaction.UnexpectedRollbackException">
            <summary>
            Thrown when an attempt to commit a transaction resulted in an unexpected rollback.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Transaction.UnexpectedRollbackException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.UnexpectedRollbackException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Transaction.UnexpectedRollbackException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.UnexpectedRollbackException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Transaction.UnexpectedRollbackException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.UnexpectedRollbackException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Transaction.UnexpectedRollbackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Transaction.UnexpectedRollbackException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
    </members>
</doc>
