<?xml version="1.0" encoding="UTF-8"?>
<chapter id="bootstrap" version="5" xmlns="http://docbook.org/ns/docbook"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns2="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Bootstrapping GemFire through the Spring container</title>

  <para>One of the first tasks when using GemFire and Spring is to configure
  the data grid using dependency injection via the Spring container. While
  this is <ulink
  url="https://community.gemstone.com/display/gemfire/Integrating+GemFire+with+the+Spring+IoC+Container">possible</ulink>
  out of the box, the configuration tends to be verbose and only address basic
  cases. To address this problem, the Spring GemFire project provides several
  classes that enable the configuration of distributed caches or regions to
  support a variety of scenarios with minimal effort.</para>

  <section>
    <title>Using the Spring GemFire Namespace</title>

    <para>To simplify configuration, SGF provides a dedicated namespace for
    most of its components. However, one can opt to configure the objects
    directly through the usual &lt;object&gt; definition. For more information
    about XML Schema-based configuration in Spring.NET, see <ulink
    url="http://www.springframework.net/doc-latest/reference/html/xsd-config.html">this</ulink>
    appendix in the Spring.NET Framework reference documentation.</para>

    <programlisting language="myxml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;objects xmlns="http://www.springframework.net" 
         xmlns:gfe<co id="gfe#ns#prefix" />="http://www.springframework.net/gemfire<co
        id="gfe#ns#uri" />"&gt;

  &lt;gfe:cache ...&gt;<co id="gfe#ns#example" />

&lt;/objects&gt;
    </programlisting>

    <calloutlist>
      <callout arearefs="gfe#ns#prefix">
        <para>Spring GemFire namespace prefix. Any name can do but through out
        the reference documentation, the <literal>gfe</literal> will be
        used.</para>
      </callout>

      <callout arearefs="gfe#ns#uri">
        <para>The namespace URI.</para>
      </callout>

      <callout arearefs="gfe#ns#example">
        <para>Declaration example for the GemFire namespace. Notice the prefix
        usage.</para>
      </callout>
    </calloutlist>

    <para>For the remainder of this doc, to improve readability, the XML
    examples will simply refer to the <literal>&lt;gfe&gt;</literal> namespace
    without the namespace declaration, where possible. To enable Spring.NET to
    recognize this namespace you need to register it in the applications
    App.config section.</para>

    <programlisting language="myxml">&lt;configuration&gt;

  &lt;configSections&gt;
    &lt;sectionGroup name="spring"&gt;
      &lt;!-- other Spring config sections handler like context, typeAliases, etc not shown for brevity --&gt;   
      &lt;section name="parsers" type="Spring.Context.Support.NamespaceParsersSectionHandler, Spring.Core"/&gt;        
     &lt;/sectionGroup&gt;
  &lt;/configSections&gt;

  &lt;spring&gt;
    &lt;parsers&gt; 
      &lt;parser type="Spring.Data.GemFire.Config.GemfireNamespaceParser, Spring.Data.GemFire" /&gt;
    &lt;/parsers&gt; 
  &lt;/spring&gt;

&lt;/configuration&gt;
    </programlisting>
  </section>

  <section id="bootstrap:cache">
    <title>Configuring the GemFire
    <interfacename>Cache</interfacename></title>

    <para>In order to use the GemFire Fabric, one needs to either create a new
    <interfacename>Cache</interfacename> or connect to an existing one. As of
    the current version of GemFire (6.0.x) there can be only one opened cache
    per application. In most cases the cache is created once and then all
    other consumers connect to it.</para>

    <para>In its simplest form, a cache can be defined in one line:</para>

    <programlisting language="myxml">&lt;gfe:cache /&gt;  </programlisting>

    <para>The declaration above declares an
    object(<literal>CacheFactoryObject</literal>) for the GemFire Cache, named
    <literal>gemfire-cache</literal>. All the other SGF components use this
    naming convention if no name is specified, allowing for very concise
    configurations. The definition above will try to connect to an existing
    cache and, in case one does not exist, create it. Since no additional
    properties were specified the created cache uses the default cache
    configuration.Especially in environments with opened caches, this basic
    configuration can go a long way.</para>

    <para>For scenarios where the cache needs to be configured, the user can
    pass in a reference the GemFire configuration file:</para>

    <programlisting language="myxml">&lt;gfe:cache id="cache-with-xml" cache-xml-location="cache-config.xml"/&gt;</programlisting>

    <para>In this example, if the cache needs to be created, it will use the
    file named <literal>cache.xml</literal> located in the root of the runtime
    directory. Only if the cache is created will the configuration file be
    used.</para>

    <para>In addition to referencing an external configuration file one can
    specify GemFire settings directly through NameValueCollection
    p<classname>roperties</classname>. This can be quite handy when just a few
    settings need to be changed.</para>

    <programlisting language="myxml">  &lt;gfe:cache id="cache-with-xml" cache-xml-location="cache-config.xml" properties-ref="props"/&gt;

  &lt;object name="props" type="System.Collections.Specialized.NameValueCollection"&gt;
    &lt;property name="['log-level']" value="warning"/&gt;
    &lt;!-- set properties such as durable-client-id, durable-timeout for a durable cache --&gt;
  &lt;/object&gt;</programlisting>

    <para>Other properties that can be set in the namespace are
    <literal>disconnect-on-close</literal>,
    <literal>keepalive-on-close</literal>, and
    <literal>distributed-system-name</literal> as shown below.</para>

    <programlisting language="myxml">  &lt;gfe:cache disconnect-on-close="false" keepalive-on-close="true" distributed-system-name="MySystemName"/&gt;</programlisting>

    <para>The disconnect-on-close property is set to true by default. It
    should be changed to false in case you encounter a race condition in the
    3.0.0.5 client library that results in the disconnect call hanging the
    application.</para>

    <para>Or can use fallback to a <emphasis>raw</emphasis>
    <literal>&lt;objects&gt;</literal> declaration:</para>

    <programlisting language="myxml">  &lt;object name="cache-with-props" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"&gt;   
    &lt;property name="Properties"&gt;
      &lt;name-values&gt;
        &lt;add key="log-level" value="warning"/&gt;
      &lt;/name-values&gt;
    &lt;/property&gt;
  &lt;/object&gt;</programlisting>

    <para>In this last example, the SGF classes are declared and configured
    directly without relying on the namespace. As one can tell, this approach
    is a generic one, exposing more of the backing infrastructure.</para>

    <programlisting language="myxml">&lt;object name="default-cache" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"/&gt;  </programlisting>

    <para>Here, the <emphasis>default-cache</emphasis> will try to connect to
    an existing cache and, in case one does not exist, create a local client
    cache. Since no additional properties were specified the created cache
    uses the default cache configuration.</para>

    <para>The name of the cache will be the name of the Spring object
    definition unless you specify a different name using the
    NameValueCollection property described next. Note, you can specify the
    name of the underlying DistributedSystem that will be created with the
    property <literal>DistributedSystemName</literal></para>

    <para>Especially in environments with opened caches, this basic
    configuration can go a long way. For scenarios where the cache needs to be
    configured, the user can pass in a reference the GemFire configuration
    file:</para>

    <programlisting language="xml">&lt;object name="cache-with-xml" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"&gt;
  &lt;property name="CacheXml" value="cache.xml"/&gt;
&lt;/object&gt;</programlisting>

    <para>In this example, if the cache needs to be created, it will use the
    file named <literal>cache.xml</literal> located in the runtime
    directory.</para>

    <para>In addition to referencing an external configuration file one can
    specify GemFire settings directly through .NET name value properties. This
    can be quite handy when just a few settings need to be changed:</para>

    <programlisting language="xml">&lt;object name="cache-with-props" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"&gt; 
  &lt;property name="Properties"&gt;
    &lt;name-values&gt;
      &lt;add key="log-level" value="warning"/&gt;
    &lt;/name-values&gt;
  &lt;/property&gt;
&lt;/object&gt;</programlisting>

    <para>The 'name' property is used to set the name of the Cache object. For
    a complete list of properties refer to the GemFire reference
    documentation.</para>

    <para>Spring object definitions support property replacement through the
    use of <ulink
    url="http://www.springframework.net/doc-latest/reference/html/objects.html#objects-variablesource">variable
    replacement</ulink>. The following configuration allows you to externalize
    the properties from the Spring configuration file which is a best
    practice. The Spring configuration file is usually an embedded assembly
    resource so as to prevent accidental changes in production. There are
    seven locations supported out of the box in Spring.NET where you can place
    your externalized configuration data and can be extended to support your
    own locations. In the following example the configuration flues would come
    from a name-value configuration section in App/Web.config</para>

    <programlisting language="myxml">&lt;gfe:cache id="cache-with-props" cache-xml-location="cache-config.xml" properties-ref="props"/&gt;

&lt;object name="props" type="System.Collections.Specialized.NameValueCollection"&gt;
  &lt;property name="['log-level']" value="${cache.log-level}"/&gt;
&lt;/object&gt;

&lt;object type="Spring.Objects.Factory.Config.VariablePlaceholderConfigurer, Spring.Core"&gt;
   &lt;property name="VariableSources"&gt;
      &lt;list&gt;
         &lt;object type="Spring.Objects.Factory.Config.ConfigSectionVariableSource, Spring.Core"&gt;
            &lt;property name="SectionNames" value="CacheConfiguration" /&gt;
         &lt;/object&gt;
      &lt;/list&gt;
   &lt;/property&gt;
&lt;/object&gt;

</programlisting>

    <para>The CacheConfiguration section in App.config would then look like
    the following</para>

    <programlisting language="myxml">&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;section name="CacheConfiguration" type="System.Configuration.NameValueSectionHandler"/&gt;
  &lt;/configSections&gt;

  &lt;CacheConfiguration&gt;
    &lt;add key="cache.log-level" value="warning"/&gt;
  &lt;/CacheConfiguration&gt;

&lt;/configuration&gt;</programlisting>

    <para>It is worth pointing out again, that the cache settings apply only
    if the cache needs to be created, there is no opened cache in existence
    otherwise the existing cache will be used and the configuration will
    simply be discarded.</para>
  </section>

  <section>
    <title>Configuring a GemFire <interfacename>Region</interfacename></title>

    <para>Once the <interfacename>Cache</interfacename> is configured, one
    needs to configure one or more <interfacename>Region</interfacename>s to
    interact with the data fabric. SGF allows various region types to be
    configured and created directly from Spring or in case they are created
    directly in GemFire, retrieved as such.</para>

    <para>For more information about the various region types and their
    capabilities as well as configuration options, please refer to the GemFire
    Developer's <ulink
    url="https://www.gemstone.com/documentation">Guide</ulink> and community
    <ulink
    url="https://community.gemstone.com/display/gemfire/GemFire+Enterprise">site</ulink>.</para>

    <section>
      <title>Using an externally configured
      <interfacename>Region</interfacename></title>

      <para>For consuming but not creating
      <interfacename>Region</interfacename>s (for example in case, the regions
      are already configured through GemFire native configuration, the
      <literal>cache.xml</literal>), one can use the
      <literal>lookup-region</literal> element. Simply declare the target
      region name the <literal> name</literal> attribute; for example to
      declare a object definition, named <literal>region-object</literal> for
      an existing region named <literal>orders</literal> one can use the
      following definition:</para>

      <programlisting language="myxml">&lt;gfe:lookup-region id="region-object" name="orders"/&gt;</programlisting>

      <para>If the <literal>name</literal> is not specified, the object name
      will be used automatically. The example above becomes:</para>

      <programlisting language="myxml">&lt;!-- lookup for a region called 'orders' --&gt;
&lt;gfe:lookup-region id="orders"/&gt;</programlisting>

      <note>
        <para>If the region does not exist, an initialization exception will
        be thrown. For configuring new GemFire regions proceed to the sections
        below for client region and advanced client region
        configuration.</para>
      </note>

      <para>Note that in the previous examples, since no cache name was
      defined, the default SGF naming convention
      (<literal>gemfire-cache</literal>) was used. If that is not an option,
      one can point to the cache object through the
      <literal>cache-ref</literal> attribute:</para>

      <programlisting language="myxml">&lt;gfe:cache id="cache"/&gt;
		
&lt;gfe:lookup-region id="region-object" name="orders" cache-ref="cache"/&gt;</programlisting>

      <para>The <literal>lookup-region</literal> provides a simple way of
      retrieving existing, pre-configured regions without exposing the region
      semantics or setup infrastructure.</para>
    </section>

    <section id="bootstrap:region:client">
      <title>Client Region</title>

      <para>GemFire supports various deployment topologies for managing and
      distributing data. For .NET the currenlty supported topoloy is
      client-server. Additional topologies such as peer-to-peer may be
      supported in future releases of the .NET client as they are supported in
      the Java client already. To declare <emphasis>client</emphasis> regions
      which connect to a backing cache server, SGF offers dedicated support
      for such configuration through the <literal>client-region</literal> and
      <literal>pool</literal> elements. As the name imply, the former defines
      a client region while the latter connection pools to be used/shared by
      the various client regions.</para>

      <para>Below is a usual configuration for a client region:</para>

      <programlisting language="myxml">&lt;gfe:cache/&gt;

&lt;!-- client region declaration --&gt;
&lt;gfe:client-region id="complex" pool-name="gemfire-pool"&gt;
    &lt;gfe:cache-listener ref="c-listener"/&gt;
&lt;/gfe:client-region&gt;
	
&lt;object id="c-listener" type="Spring.Data.GemFire.Tests.SimpleCacheListener, Spring.Data.GemFire.Tests"/&gt;

&lt;!-- pool declaration --&gt;	
&lt;gfe:pool id="gemfire-pool" subscription-enabled="false"&gt;
    &lt;gfe:server host="localhost" port="40404"/&gt;  
&lt;/gfe:pool&gt;</programlisting>

      <para>Just as the other region types, <literal>client-region</literal>
      allows defining <interfacename>CacheListener</interfacename>s. It also
      relies on the same naming conventions in case the region name or the
      cache are not set explicitely. However, it also requires a connection
      <literal>pool</literal> to be specified for connecting to the server.
      Each client can have its own pool or they can share the same one.</para>

      <para>The client-region can also reference multiple
      cache-listeners:</para>

      <programlisting language="myxml">&lt;gfe:cache/&gt;

  &lt;gfe:client-region id="complex" pool-name="gemfire-pool"&gt;    
    &lt;gfe:cache-listener&gt;      
      &lt;ref object="c-listener"/&gt;
      &lt;object type="Spring.Data.GemFire.Tests.SimpleCacheListener, Spring.Data.GemFire.Tests"/&gt;
    &lt;/gfe:cache-listener&gt; 

  &lt;/gfe:client-region&gt;

  &lt;object id="c-listener" type="Spring.Data.GemFire.Tests.SimpleCacheListener, Spring.Data.GemFire.Tests"/&gt;

  &lt;!-- pool declaration --&gt;	
  &lt;gfe:pool id="gemfire-pool" subscription-enabled="false"&gt;
    &lt;gfe:server host="localhost" port="40404"/&gt;  
  &lt;/gfe:pool&gt;</programlisting>

      <para>Other options to configure the client-region are to specify a
      specific cache by name, set the and persistence of the reigon via the
      persistent attribute, and also to set the various RegionAttributes.
      RegionAttributes are set using the attributes-ref element:</para>

      <programlisting language="myxml">  &lt;gfe:client-region id="simple" pool-name="gemfire-pool" attributes-ref="myCustomRegionAttributes" /&gt;

  &lt;!-- some common base cache configuration that can be used later in parent object referencts --&gt;
  &lt;object id="cachingProxy" type="Spring.Data.GemFire.RegionAttributesFactoryObject, Spring.Data.GemFire"&gt;
    &lt;property name="ClientNotification" value="true"/&gt;
  &lt;/object&gt;

  &lt;object id="myCustomRegionAttributes" 
          parent="cachingProxy"
          type="Spring.Data.GemFire.RegionAttributesFactoryObject, Spring.Data.GemFire"&gt;
    &lt;property name="LruEntriesLimit" value="1234"/&gt;
  &lt;/object&gt;</programlisting>

      <para>The use of Spring's parent referent allows you set setup commonly
      used configurations and then extend them by overriding or adding
      additional properties.</para>

      <para>For a full list of options to set on the client and especially on
      the pool, please refer to the SGF schema (<xref
      linkend="appendix-schema" />) and the GemFire documentation.</para>

      <section id="bootstrap:region:client:interests">
        <title>Client Interests</title>

        <para>To minimize network traffic, each client can define its own
        'interest', pointing out to GemFire, the data it actually needs. In
        SGF, interests can be defined for each client, both key-based and
        regular-expression-based types being supported; for example:</para>

        <programlisting language="xml">  &lt;gfe:client-region id="complex" pool-name="gemfire-pool"&gt;    

    &lt;gfe:all-keys-interest durable="true" result-policy="Keys"/&gt;
    
    &lt;gfe:key-interest result-policy="KeysAndValues" key-ref="cacheableString"/&gt;

    &lt;gfe:regex-interest pattern=".*"/&gt;    

  &lt;/gfe:client-region&gt;

  &lt;object id="cacheableString" type="GemStone.GemFire.Cache.CacheableString, GemStone.GemFire.Cache"&gt;
    &lt;constructor-arg index="0" value="hello"/&gt;
  &lt;/object&gt;</programlisting>
      </section>
    </section>
  </section>

  <section id="bootstrap:region:advanced">
    <title>Advanced Region Creation</title>

    <para>SGF namespaces allow short and easy configuration of the major
    GemFire regions and associated entities. However, there might be corner
    cases where the namespaces are not enough, where a certain combination or
    set of attributes needs to be used. For such situations, using directly
    the SGF <interfacename>FactoryObject</interfacename>s is a possible
    alternative as it gives access to the full set of options at the expense
    of conciseness.</para>

    <para>As a warm up, below are some common configurations, declared through
    raw <literal>objects</literal> definitions.</para>

    <programlisting language="myxml">&lt;object name="basic" type="Spring.Data.GemFire.ClientRegionFactoryObject, Spring.Data.GemFire"&gt;
  &lt;property Name="Cache"&gt;
    &lt;object type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"/&gt; 
  &lt;/property&gt; 
&lt;/object&gt;
</programlisting>

    <para>By default the region name is the name of the object definition
    unless explicitly specified using the <literal>Name</literal> property.
    Notice how the GemFire cache definition has been nested into the declaring
    region definition. Let's add more regions and make the cache a top level
    object.</para>

    <para>Since the region object definition name is usually the same with
    that of the cache, the <literal>name</literal> property can be omitted
    (the object name will be used automatically).</para>

    <programlisting language="myxml">&lt;!-- shared cache across regions --&gt;
&lt;object id="cache" type="Spring.Data.GemFire.CacheFactoryObject, Spring.Data.GemFire"/&gt; 

&lt;!-- region named 'basic' --&gt;
&lt;object name="basic" type="Spring.Data.GemFire.ClientRegionFactoryObject, Spring.Data.GemFire"&gt;
  &lt;property name="Endpoints" value="localhost:40404"/&gt;
  &lt;property name="Cache" ref="Cache"/&gt;
&lt;/object&gt;

&lt;!-- region with a name different then the object definition --&gt;
&lt;object name="basic" type="Spring.Data.GemFire.ClientRegionFactoryObject, Spring.Data.GemFire"&gt;
  &lt;property name="Endpoints" value="localhost:40404"/&gt;
  &lt;property name="Cache" ref="Cache"/&gt;
  &lt;property name="Name" value="default-region"/&gt;
&lt;/object&gt;
</programlisting>

    <para>It is worth pointing out, that for the vast majority of cases
    configuring the cache loader, listener and writer through the Spring
    container is preferred since the same instances can be reused across
    multiple regions and additionally, the instances themselves can benefit
    from the container's rich feature set:</para>

    <programlisting language="myxml">  &lt;object name="baseRegion" abstract="true"&gt;
    &lt;property name="Endpoints" value="localhost:40404"/&gt;
    &lt;property name="Cache" ref="Cache"/&gt;   &lt;!-- definition not shown here --&gt;
  &lt;/object&gt;

  &lt;object name="listeners" type="Spring.Data.GemFire.ClientRegionFactoryObject, Spring.Data.GemFire"
          parent="baseRegion"&gt;
    &lt;property name="CacheListener"&gt;
      &lt;object type="Spring.Data.GemFire.Tests.SimpleCacheListener, Spring.Data.GemFire.Tests"&gt;
        &lt;!-- set properties or constructor arguments --&gt;
      &lt;/object&gt;
    &lt;/property&gt;
    &lt;property name="CacheLoader"&gt;
      &lt;object type="Spring.Data.GemFire.Tests.SimpleCacheLoader, Spring.Data.GemFire.Tests"/&gt;      
    &lt;/property&gt;
    &lt;property name="CacheWriter"&gt;
      &lt;object type="Spring.Data.GemFire.Tests.SimpleCacheWriter, Spring.Data.GemFire.Tests"/&gt;
    &lt;/property&gt;
  &lt;/object&gt;

</programlisting>

    <section id="bootstrap:region:client:interest">
      <title>Configuring update interest for <emphasis>client</emphasis>
      <interfacename>Region</interfacename></title>

      <para>For scenarios where a <emphasis>CacheServer</emphasis> is used and
      <emphasis>clients</emphasis> need to be configured and the namespace is
      not an option, SGF offers a dedicated configuration class named:
      <classname>ClientRegionFactoryObject</classname>. This allows client
      <emphasis>interests</emphasis> to be registered in both key and regex
      form through <classname>AllKeysInterest</classname>,
      <classname>KeyInterest</classname>, and
      <classname>RegexInterest</classname> classes in the
      <literal>Spring.Data.GemFire</literal> namespace. Here is an example of
      how to configure the AllKeys interest in the region.</para>

      <programlisting language="myxml">  &lt;object name="baseRegion" abstract="true"&gt;
    &lt;property name="Endpoints" value="localhost:40404"/&gt;
    &lt;property name="Cache" ref="Cache"/&gt;   &lt;!-- Cache definition not shown here --&gt;
    &lt;property name="Attributes"&gt;
      &lt;object type="Spring.Data.GemFire.RegionAttributesFactoryObject, Spring.Data.GemFire"&gt;
        &lt;property name="ClientNotification" value="true"/&gt;
      &lt;/object&gt;
    &lt;/property&gt;
  &lt;/object&gt;

  &lt;object name="region-all-keys-interest" type="Spring.Data.GemFire.ClientRegionFactoryObject, Spring.Data.GemFire"
          parent="baseRegion"&gt;
    &lt;property name="interests"&gt;
      &lt;list&gt;
        <emphasis role="bold">&lt;object type="Spring.Data.GemFire.AllKeysInterest"/&gt;</emphasis>
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/object&gt;
</programlisting>

      <para>This example makes use of Spring's object configuration
      inheritance allowing you to place common configuration in the baseRegion
      object definition and then refer to it later via the
      <literal>parent</literal> attribute.</para>

      <para>Users that need fine control over a region, can configure it in
      Spring by using the <literal>Attributes</literal> property. To ease
      declarative configuration in Spring, SGF provides an
      <classname>RegionAttributesFactoryObject</classname>. The previous
      examples shows configuring the baseRegion by embedding the use of the
      RegionAttributesFactoryObject:</para>

      <para>To register interest for a set of key, use the KeyInterest class,
      as shown below from the sample application</para>

      <programlisting language="myxml">  &lt;object name="region" type="Spring.Data.GemFire.ClientRegionFactoryObject, Spring.Data.GemFire"
                parent="baseRegion"&gt;  &lt;!-- baseRegion definition not shown here --&gt;
    &lt;property name="Interests"&gt;
      &lt;list&gt;
<emphasis role="bold">        &lt;object type="Spring.Data.GemFire.KeyInterest"&gt;
          &lt;property name="Keys"&gt;
            &lt;list&gt;
              &lt;object type="GemStone.GemFire.Cache.CacheableString" factory-method="Create"&gt;
                &lt;constructor-arg value="Key-123"/&gt;
              &lt;/object&gt;
            &lt;/list&gt;
          &lt;/property&gt;
        &lt;/object&gt;</emphasis>
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/object&gt;</programlisting>

      <para>To register interest based on a regular expression, use the
      following configuration</para>

      <programlisting language="myxml">  &lt;object name="Region" type="Spring.Data.GemFire.ClientRegionFactoryObject, Spring.Data.GemFire"   
          parent="baseRegion"&gt;  &lt;!-- baseRegion definition not shown here --&gt;
    &lt;property name="Interests"&gt;
      &lt;list&gt;
<emphasis role="bold">        &lt;object type="Spring.Data.GemFire.RegexInterest"&gt;
          &lt;property name="Regex" value="Key-.*"/&gt;
        &lt;/object&gt;</emphasis>
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/object&gt;</programlisting>

      <para>This would only register interest in keys of the type 'Key-123' or
      'Key-4abc'.</para>

      <para>See below an example of configuring a region through Spring XML
      embedding the use of the RegionAttributesFactoryObject, no parent object
      definition is used.</para>

      <programlisting language="myxml">  &lt;object name="Region" type="Spring.Data.GemFire.ClientRegionFactoryObject, Spring.Data.GemFire"
    &lt;property name="Endpoints" value="localhost:40404"/&gt;
    &lt;property name="Cache" ref="Cache"/&gt;
    &lt;property name="Name" value="exampleregion"/&gt;
    &lt;property name="Attributes"&gt;
      &lt;object type="Spring.Data.GemFire.RegionAttributesFactoryObject, Spring.Data.GemFire"&gt;
        &lt;property name="ClientNotification" value="true"/&gt;
      &lt;/object&gt;
    &lt;/property&gt;
    &lt;property name="Interests"&gt;
      &lt;list&gt;
<emphasis role="bold">        &lt;object type="Spring.Data.GemFire.RegexInterest"&gt;
          &lt;property name="Regex" value="Key-.*"/&gt;
        &lt;/object&gt;</emphasis>
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/object&gt;</programlisting>

      <para>Please refer to the API documentation for more information on the
      various <interfacename>IInterest</interfacename> subclasses.</para>
    </section>
  </section>

  <section id="bootstrap:region:spring:config">
    <title>Advantages of using Spring over GemFire
    <literal>cache.xml</literal></title>

    <para>With SGF, GemFire regions, pools and cache can be configured either
    through Spring or directly inside GemFire, native,
    <literal>cache.xml</literal> file. While both are valid approaches, it's
    worth pointing out that Spring's powerful DI container and AOP
    functionality makes it very easy to wire GemFire into an application. This
    lalso lets you leverage features such as replacement of varaiable
    placeholders, e..g. ${port}. Also configuring a region cache loader,
    listener and writer through the Spring container is preferred since the
    same instances can be reused across multiple regions. Spring object
    definition inheritance also allows you to create base region and region
    attribute object definitions that can later be referred to using Spring's
    'parent' attribute.</para>

    <para>Whatever route one chooses to go, SGF supports both approaches
    allowing for easy migrate between them without forcing an upfront
    decision.</para>
  </section>
</chapter>
